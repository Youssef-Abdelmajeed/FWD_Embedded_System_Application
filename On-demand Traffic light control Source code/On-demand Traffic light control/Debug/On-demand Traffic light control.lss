
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000b3c  00000bd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800092  00800092  00000c02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d26  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1f  00000000  00000000  00002b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee0  00000000  00000000  00003785  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  00004668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8b  00000000  00000000  00004ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de8  00000000  00000000  0000556b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006353  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_4>
  14:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_10>
  2c:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3b       	cpi	r26, 0xB3	; 179
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 18 03 	call	0x630	; 0x630 <main>
  8a:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_APP>:
}

void init_APP(void)
{	
	/* set traffic light pins */
	TRAFFIC_LIGHT_Init(&Traffic_light) ;
  92:	83 e6       	ldi	r24, 0x63	; 99
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 df 02 	call	0x5be	; 0x5be <TRAFFIC_LIGHT_Init>
	
	/* set pedestrian sign pins */
	TRAFFIC_LIGHT_Init(&Peds_sign) ;
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 df 02 	call	0x5be	; 0x5be <TRAFFIC_LIGHT_Init>
	
	/* init button */
	Button_Init(&PEDs_button) ;
  a2:	86 e6       	ldi	r24, 0x66	; 102
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 45 02 	call	0x48a	; 0x48a <Button_Init>
	
	/* start millis counter / tracker on timer2 */
	Millis_Init() ;
  aa:	0e 94 42 04 	call	0x884	; 0x884 <Millis_Init>
  ae:	08 95       	ret

000000b0 <APP_normal_mode>:
		break;
	}
}

void APP_normal_mode(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <APP_normal_mode+0x6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <APP_normal_mode+0x8>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	/* get time in ms  */
	millis_t currentTime = Millis_get() ;
  bc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <Millis_get>
  c0:	69 83       	std	Y+1, r22	; 0x01
  c2:	7a 83       	std	Y+2, r23	; 0x02
  c4:	8b 83       	std	Y+3, r24	; 0x03
  c6:	9c 83       	std	Y+4, r25	; 0x04
	
	/*current state counter */
	static uint8_t state_counter = 0;
	
	/*if traffic interval has passed */
	if (currentTime -lastTime >= TRAFFIC_INTERVAL)
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	ab 81       	ldd	r26, Y+3	; 0x03
  ce:	bc 81       	ldd	r27, Y+4	; 0x04
  d0:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <lastTime.1650>
  d4:	50 91 a2 00 	lds	r21, 0x00A2	; 0x8000a2 <lastTime.1650+0x1>
  d8:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <lastTime.1650+0x2>
  dc:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <lastTime.1650+0x3>
  e0:	84 1b       	sub	r24, r20
  e2:	95 0b       	sbc	r25, r21
  e4:	a6 0b       	sbc	r26, r22
  e6:	b7 0b       	sbc	r27, r23
  e8:	88 38       	cpi	r24, 0x88	; 136
  ea:	93 41       	sbci	r25, 0x13	; 19
  ec:	a1 05       	cpc	r26, r1
  ee:	b1 05       	cpc	r27, r1
  f0:	b0 f0       	brcs	.+44     	; 0x11e <APP_normal_mode+0x6e>
	{
		/* increment state counter */
		state_counter++ ;
  f2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <state_counter.1652>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <state_counter.1652>
		
		/*turn off all LEDs */
		TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	83 e6       	ldi	r24, 0x63	; 99
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
		
		/*rest counter*/
		lastTime =currentTime ;
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	ab 81       	ldd	r26, Y+3	; 0x03
 10c:	bc 81       	ldd	r27, Y+4	; 0x04
 10e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <lastTime.1650>
 112:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <lastTime.1650+0x1>
 116:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <lastTime.1650+0x2>
 11a:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <lastTime.1650+0x3>
	}
	
	/* limit state counter to only 4 element */
	state_counter = (state_counter>3)? 0: state_counter ;
 11e:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <state_counter.1652>
 122:	e4 30       	cpi	r30, 0x04	; 4
 124:	08 f0       	brcs	.+2      	; 0x128 <APP_normal_mode+0x78>
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	e0 93 a0 00 	sts	0x00A0, r30	; 0x8000a0 <state_counter.1652>
	
	/* get the next state */
	currentState = normal_seq[state_counter] ;
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ea 58       	subi	r30, 0x8A	; 138
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	80 81       	ld	r24, Z
 134:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <currentState>
	
	/* check on current state and drive the traffic light */
	switch(currentState)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	51 f0       	breq	.+20     	; 0x150 <APP_normal_mode+0xa0>
 13c:	18 f0       	brcs	.+6      	; 0x144 <APP_normal_mode+0x94>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	71 f1       	breq	.+92     	; 0x19e <APP_normal_mode+0xee>
 142:	33 c0       	rjmp	.+102    	; 0x1aa <APP_normal_mode+0xfa>
	{
		case GREEN:
		TRAFFIC_LIGHT_Drive(&Traffic_light,GREEN) ;
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	83 e6       	ldi	r24, 0x63	; 99
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
		break;
 14e:	32 c0       	rjmp	.+100    	; 0x1b4 <APP_normal_mode+0x104>
		case YELLOW:
		if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	9a 81       	ldd	r25, Y+2	; 0x02
 154:	ab 81       	ldd	r26, Y+3	; 0x03
 156:	bc 81       	ldd	r27, Y+4	; 0x04
 158:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <lastTimeYellow.1651>
 15c:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <lastTimeYellow.1651+0x1>
 160:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <lastTimeYellow.1651+0x2>
 164:	70 91 9f 00 	lds	r23, 0x009F	; 0x80009f <lastTimeYellow.1651+0x3>
 168:	84 1b       	sub	r24, r20
 16a:	95 0b       	sbc	r25, r21
 16c:	a6 0b       	sbc	r26, r22
 16e:	b7 0b       	sbc	r27, r23
 170:	8a 3f       	cpi	r24, 0xFA	; 250
 172:	91 05       	cpc	r25, r1
 174:	a1 05       	cpc	r26, r1
 176:	b1 05       	cpc	r27, r1
 178:	e8 f0       	brcs	.+58     	; 0x1b4 <APP_normal_mode+0x104>
		{
			/*toggle yellow led every 0.25 sec*/
			TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	83 e6       	ldi	r24, 0x63	; 99
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
			
			/*set the old counter to be the current counter to begin counting again*/
			lastTimeYellow = currentTime ;
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	ab 81       	ldd	r26, Y+3	; 0x03
 18a:	bc 81       	ldd	r27, Y+4	; 0x04
 18c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <lastTimeYellow.1651>
 190:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <lastTimeYellow.1651+0x1>
 194:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <lastTimeYellow.1651+0x2>
 198:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <lastTimeYellow.1651+0x3>
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <APP_normal_mode+0x104>
		}
		break;
		case RED:
		TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	83 e6       	ldi	r24, 0x63	; 99
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
		break;
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <APP_normal_mode+0x104>
		default:
		TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	83 e6       	ldi	r24, 0x63	; 99
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
		break;
	}
}
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <APP_pedestrian_mode>:

void APP_pedestrian_mode(void)
{
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <APP_pedestrian_mode+0x8>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <APP_pedestrian_mode+0xa>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62

	/* get time in ms  */
	millis_t currentTime = Millis_get() ;
 1d0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <Millis_get>
 1d4:	69 83       	std	Y+1, r22	; 0x01
 1d6:	7a 83       	std	Y+2, r23	; 0x02
 1d8:	8b 83       	std	Y+3, r24	; 0x03
 1da:	9c 83       	std	Y+4, r25	; 0x04
	static uint8_t turnoff_ped_mode = 0 ;
	/* flag to indicate if the mode is terminated */
	uint8_t done = 0 ;
	
	/* if traffic interval has passed */
	if(currentTime-lastTime>=TRAFFIC_INTERVAL)
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	9a 81       	ldd	r25, Y+2	; 0x02
 1e0:	ab 81       	ldd	r26, Y+3	; 0x03
 1e2:	bc 81       	ldd	r27, Y+4	; 0x04
 1e4:	40 91 98 00 	lds	r20, 0x0098	; 0x800098 <lastTime.1662>
 1e8:	50 91 99 00 	lds	r21, 0x0099	; 0x800099 <lastTime.1662+0x1>
 1ec:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <lastTime.1662+0x2>
 1f0:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <lastTime.1662+0x3>
 1f4:	84 1b       	sub	r24, r20
 1f6:	95 0b       	sbc	r25, r21
 1f8:	a6 0b       	sbc	r26, r22
 1fa:	b7 0b       	sbc	r27, r23
 1fc:	88 38       	cpi	r24, 0x88	; 136
 1fe:	93 41       	sbci	r25, 0x13	; 19
 200:	a1 05       	cpc	r26, r1
 202:	b1 05       	cpc	r27, r1
 204:	c8 f1       	brcs	.+114    	; 0x278 <APP_pedestrian_mode+0xb6>
	{
		
		/* increment state counter */
		state_counter++ ;
 206:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <state_counter.1664>
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <state_counter.1664>
		
		/* rest config and switch mode */
		if (turnoff_ped_mode)
 210:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <turnoff_ped_mode.1665>
 214:	88 23       	and	r24, r24
 216:	c1 f0       	breq	.+48     	; 0x248 <APP_pedestrian_mode+0x86>
		{
			/* set the current mode to normal */
			currentMode = normal ;
 218:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <currentMode>
			/*reset */
			turnoff_ped_mode = 0 ;
 21c:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <turnoff_ped_mode.1665>
			lastTime = 0 ;
 220:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <lastTime.1662>
 224:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <lastTime.1662+0x1>
 228:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <lastTime.1662+0x2>
 22c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <lastTime.1662+0x3>
			lastTimeYellow =  0 ;
 230:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
 234:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <__data_end+0x1>
 238:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end+0x2>
 23c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x3>
			state_counter = 0 ;
 240:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <state_counter.1664>
			done = 1 ;
 244:	11 e0       	ldi	r17, 0x01	; 1
 246:	01 c0       	rjmp	.+2      	; 0x24a <APP_pedestrian_mode+0x88>
	static uint8_t state_counter = 0;
	
	/* flag to indicate end of pedestrian mode request */
	static uint8_t turnoff_ped_mode = 0 ;
	/* flag to indicate if the mode is terminated */
	uint8_t done = 0 ;
 248:	10 e0       	ldi	r17, 0x00	; 0
			lastTime = 0 ;
			lastTimeYellow =  0 ;
			state_counter = 0 ;
			done = 1 ;
		}
		TRAFFIC_LIGHT_Drive(&Peds_sign,OFF) ;
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	80 e6       	ldi	r24, 0x60	; 96
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
		TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	83 e6       	ldi	r24, 0x63	; 99
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
		
		/* reset overflow counter */
		lastTime = currentTime ;
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	ab 81       	ldd	r26, Y+3	; 0x03
 264:	bc 81       	ldd	r27, Y+4	; 0x04
 266:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <lastTime.1662>
 26a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <lastTime.1662+0x1>
 26e:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <lastTime.1662+0x2>
 272:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <lastTime.1662+0x3>
 276:	01 c0       	rjmp	.+2      	; 0x27a <APP_pedestrian_mode+0xb8>
	static uint8_t state_counter = 0;
	
	/* flag to indicate end of pedestrian mode request */
	static uint8_t turnoff_ped_mode = 0 ;
	/* flag to indicate if the mode is terminated */
	uint8_t done = 0 ;
 278:	10 e0       	ldi	r17, 0x00	; 0
		TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
		
		/* reset overflow counter */
		lastTime = currentTime ;
	}
	if(!done)
 27a:	11 11       	cpse	r17, r1
 27c:	dd c0       	rjmp	.+442    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
	{
		/* if the cars traffic light was red */
		if (currentState == RED)
 27e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <currentState>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	69 f4       	brne	.+26     	; 0x2a0 <APP_pedestrian_mode+0xde>
		{
			/* set pedestrian sign green led */
			TRAFFIC_LIGHT_Drive(&Peds_sign,GREEN) ;
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
			TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	83 e6       	ldi	r24, 0x63	; 99
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>

			/* wait 5s and turn off pedestrian mode */
			turnoff_ped_mode = 1 ;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <turnoff_ped_mode.1665>
		}
		/* if the traffic light was green or yellow */
		if (currentState == GREEN || currentState ==YELLOW)
 2a0:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <currentState>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <APP_pedestrian_mode+0xe8>
 2a8:	c7 c0       	rjmp	.+398    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		{
			
			/* limit state counter to be only 6 states */
			state_counter = (state_counter>5) ? 0 : state_counter ;
 2aa:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <state_counter.1664>
 2ae:	86 30       	cpi	r24, 0x06	; 6
 2b0:	08 f0       	brcs	.+2      	; 0x2b4 <APP_pedestrian_mode+0xf2>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <state_counter.1664>
			
			switch(state_counter)
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	09 f4       	brne	.+2      	; 0x2be <APP_pedestrian_mode+0xfc>
 2bc:	74 c0       	rjmp	.+232    	; 0x3a6 <APP_pedestrian_mode+0x1e4>
 2be:	30 f4       	brcc	.+12     	; 0x2cc <APP_pedestrian_mode+0x10a>
 2c0:	88 23       	and	r24, r24
 2c2:	69 f0       	breq	.+26     	; 0x2de <APP_pedestrian_mode+0x11c>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	09 f4       	brne	.+2      	; 0x2ca <APP_pedestrian_mode+0x108>
 2c8:	41 c0       	rjmp	.+130    	; 0x34c <APP_pedestrian_mode+0x18a>
 2ca:	b6 c0       	rjmp	.+364    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <APP_pedestrian_mode+0x110>
 2d0:	a6 c0       	rjmp	.+332    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 2d2:	08 f4       	brcc	.+2      	; 0x2d6 <APP_pedestrian_mode+0x114>
 2d4:	73 c0       	rjmp	.+230    	; 0x3bc <APP_pedestrian_mode+0x1fa>
 2d6:	85 30       	cpi	r24, 0x05	; 5
 2d8:	09 f4       	brne	.+2      	; 0x2dc <APP_pedestrian_mode+0x11a>
 2da:	ab c0       	rjmp	.+342    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 2dc:	ad c0       	rjmp	.+346    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			{
				case 0 :
					TRAFFIC_LIGHT_Drive(&Peds_sign,RED) ;
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	80 e6       	ldi	r24, 0x60	; 96
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
					if (currentState == YELLOW)
 2e8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <currentState>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	41 f5       	brne	.+80     	; 0x340 <APP_pedestrian_mode+0x17e>
					{
						if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	9a 81       	ldd	r25, Y+2	; 0x02
 2f4:	ab 81       	ldd	r26, Y+3	; 0x03
 2f6:	bc 81       	ldd	r27, Y+4	; 0x04
 2f8:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 2fc:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 300:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
 304:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
 308:	84 1b       	sub	r24, r20
 30a:	95 0b       	sbc	r25, r21
 30c:	a6 0b       	sbc	r26, r22
 30e:	b7 0b       	sbc	r27, r23
 310:	8a 3f       	cpi	r24, 0xFA	; 250
 312:	91 05       	cpc	r25, r1
 314:	a1 05       	cpc	r26, r1
 316:	b1 05       	cpc	r27, r1
 318:	08 f4       	brcc	.+2      	; 0x31c <APP_pedestrian_mode+0x15a>
 31a:	8e c0       	rjmp	.+284    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
						{
							/*toggle yellow led every 0.25 sec*/
							TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	83 e6       	ldi	r24, 0x63	; 99
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
							/*set the old counter to be the current counter to begin counting again*/
							lastTimeYellow = currentTime ;
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	9a 81       	ldd	r25, Y+2	; 0x02
 32a:	ab 81       	ldd	r26, Y+3	; 0x03
 32c:	bc 81       	ldd	r27, Y+4	; 0x04
 32e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 332:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 336:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
 33a:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
 33e:	7c c0       	rjmp	.+248    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>

						}
					}
					else
					{
						TRAFFIC_LIGHT_Drive(&Traffic_light,GREEN) ;
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	83 e6       	ldi	r24, 0x63	; 99
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
 34a:	76 c0       	rjmp	.+236    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
					}
					break;
				case 1 :
					if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	9a 81       	ldd	r25, Y+2	; 0x02
 350:	ab 81       	ldd	r26, Y+3	; 0x03
 352:	bc 81       	ldd	r27, Y+4	; 0x04
 354:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 358:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 35c:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
 360:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
 364:	84 1b       	sub	r24, r20
 366:	95 0b       	sbc	r25, r21
 368:	a6 0b       	sbc	r26, r22
 36a:	b7 0b       	sbc	r27, r23
 36c:	8a 3f       	cpi	r24, 0xFA	; 250
 36e:	91 05       	cpc	r25, r1
 370:	a1 05       	cpc	r26, r1
 372:	b1 05       	cpc	r27, r1
 374:	08 f4       	brcc	.+2      	; 0x378 <APP_pedestrian_mode+0x1b6>
 376:	60 c0       	rjmp	.+192    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
					{
						/*toggle yellow led every 0.25 sec*/
						TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	83 e6       	ldi	r24, 0x63	; 99
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
						TRAFFIC_LIGHT_Drive(&Peds_sign,YELLOW) ;
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	80 e6       	ldi	r24, 0x60	; 96
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
						/*set the old counter to be the current counter to begin counting again*/
						lastTimeYellow = currentTime ;
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	9a 81       	ldd	r25, Y+2	; 0x02
 390:	ab 81       	ldd	r26, Y+3	; 0x03
 392:	bc 81       	ldd	r27, Y+4	; 0x04
 394:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 398:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 39c:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
 3a0:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
 3a4:	49 c0       	rjmp	.+146    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
					}
					break;
				case 2 :
					TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 3a6:	62 e0       	ldi	r22, 0x02	; 2
 3a8:	83 e6       	ldi	r24, 0x63	; 99
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
					TRAFFIC_LIGHT_Drive(&Peds_sign,GREEN) ;
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	80 e6       	ldi	r24, 0x60	; 96
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
					break ;
 3ba:	3e c0       	rjmp	.+124    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
				case 3 :
					if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	9a 81       	ldd	r25, Y+2	; 0x02
 3c0:	ab 81       	ldd	r26, Y+3	; 0x03
 3c2:	bc 81       	ldd	r27, Y+4	; 0x04
 3c4:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 3c8:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 3cc:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
 3d0:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
 3d4:	84 1b       	sub	r24, r20
 3d6:	95 0b       	sbc	r25, r21
 3d8:	a6 0b       	sbc	r26, r22
 3da:	b7 0b       	sbc	r27, r23
 3dc:	8a 3f       	cpi	r24, 0xFA	; 250
 3de:	91 05       	cpc	r25, r1
 3e0:	a1 05       	cpc	r26, r1
 3e2:	b1 05       	cpc	r27, r1
 3e4:	b0 f0       	brcs	.+44     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
					{
						/* toggle yellow led every 0.25 sec */
						TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	83 e6       	ldi	r24, 0x63	; 99
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
						TRAFFIC_LIGHT_Drive(&Peds_sign,YELLOW) ;
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	80 e6       	ldi	r24, 0x60	; 96
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
						/* set the old counter to be the current counter to begin counting again */
						lastTimeYellow = currentTime ;
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	ab 81       	ldd	r26, Y+3	; 0x03
 400:	bc 81       	ldd	r27, Y+4	; 0x04
 402:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 406:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 40a:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
 40e:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
					}
					TRAFFIC_LIGHT_Drive(&Peds_sign,GREEN) ;
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	80 e6       	ldi	r24, 0x60	; 96
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
					break;
 41c:	0d c0       	rjmp	.+26     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
				case 4 :
					TRAFFIC_LIGHT_Drive(&Peds_sign,RED) ;
 41e:	62 e0       	ldi	r22, 0x02	; 2
 420:	80 e6       	ldi	r24, 0x60	; 96
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
					TRAFFIC_LIGHT_Drive(&Traffic_light,GREEN) ;
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	83 e6       	ldi	r24, 0x63	; 99
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>
				case 5 :
					turnoff_ped_mode = 1 ;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <turnoff_ped_mode.1665>
					break;
			}
		}
	}
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	08 95       	ret

00000448 <startApp>:
ST_TrafficLight_t Traffic_light = {T_GREEN_LED_PIN ,T_YELLOW_LED_PIN,T_RED_LED_PIN} ,Peds_sign ={PEDS_GREEN_LED_PIN,PEDS_YELLOW_LED_PIN,PEDS_RED_LED_PIN} ;

static inline void DoButton(void)
{
	/*get button state */
	Button_readState(&PEDs_button) ;
 448:	86 e6       	ldi	r24, 0x66	; 102
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Button_readState>

	/*if the button was pressed a short press */
	if(PEDs_button.buttonPressState == ShortPress)
 450:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <PEDs_button+0x1>
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	61 f4       	brne	.+24     	; 0x470 <startApp+0x28>
	{
		/* if the button is pressed single press */
		if (currentMode==normal)
 458:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <currentMode>
 45c:	81 11       	cpse	r24, r1
 45e:	08 c0       	rjmp	.+16     	; 0x470 <startApp+0x28>
		{
			/* change the current mode to pedestrian mode */
			currentMode = ped ;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <currentMode>
			TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
 466:	63 e0       	ldi	r22, 0x03	; 3
 468:	83 e6       	ldi	r24, 0x63	; 99
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TRAFFIC_LIGHT_Drive>

void startApp(void)
{	
	/* get the system current mode from the button */
	DoButton() ; 
	switch(currentMode)
 470:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <currentMode>
 474:	88 23       	and	r24, r24
 476:	19 f0       	breq	.+6      	; 0x47e <startApp+0x36>
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	21 f0       	breq	.+8      	; 0x484 <startApp+0x3c>
 47c:	08 95       	ret
	{
	case normal : 
		APP_normal_mode() ;
 47e:	0e 94 58 00 	call	0xb0	; 0xb0 <APP_normal_mode>
		break;
 482:	08 95       	ret
	case  ped: 
		APP_pedestrian_mode() ;
 484:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <APP_pedestrian_mode>
 488:	08 95       	ret

0000048a <Button_Init>:
#include "../../MCAL/DIO/DIO_INT.h"
#include "../../MCAL/MILLIS/MILLIS_INT.h"
#include "Button_INT.h"

void Button_Init(ST_Button_t * button)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ec 01       	movw	r28, r24
	DIO_setPinDirection(button->buttonPin,INPUT) ;
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	88 81       	ld	r24, Y
 494:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_setPinDirection>
	button->buttonPressState =NoAction ;
 498:	19 82       	std	Y+1, r1	; 0x01
	button->lastButtonState = LOW ;
 49a:	1a 82       	std	Y+2, r1	; 0x02
	button-> isLongPress = 0 ;
 49c:	1b 82       	std	Y+3, r1	; 0x03
}
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <Button_readState>:

void Button_readState(ST_Button_t * button) 
{
 4a4:	cf 92       	push	r12
 4a6:	df 92       	push	r13
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <Button_readState+0x12>
 4b6:	00 d0       	rcall	.+0      	; 0x4b8 <Button_readState+0x14>
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	8c 01       	movw	r16, r24
	/* Time since the millis timer started */
	millis_t currentMillis = Millis_get() ;
 4be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <Millis_get>
 4c2:	69 83       	std	Y+1, r22	; 0x01
 4c4:	7a 83       	std	Y+2, r23	; 0x02
 4c6:	8b 83       	std	Y+3, r24	; 0x03
 4c8:	9c 83       	std	Y+4, r25	; 0x04
	
	button->buttonPressState =NoAction ;
 4ca:	f8 01       	movw	r30, r16
 4cc:	11 82       	std	Z+1, r1	; 0x01
	/* Check for debouncing  */
	if(currentMillis - button->lastReadingTime > successiveReadingInterval) {
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	9a 81       	ldd	r25, Y+2	; 0x02
 4d2:	ab 81       	ldd	r26, Y+3	; 0x03
 4d4:	bc 81       	ldd	r27, Y+4	; 0x04
 4d6:	40 85       	ldd	r20, Z+8	; 0x08
 4d8:	51 85       	ldd	r21, Z+9	; 0x09
 4da:	62 85       	ldd	r22, Z+10	; 0x0a
 4dc:	73 85       	ldd	r23, Z+11	; 0x0b
 4de:	84 1b       	sub	r24, r20
 4e0:	95 0b       	sbc	r25, r21
 4e2:	a6 0b       	sbc	r26, r22
 4e4:	b7 0b       	sbc	r27, r23
 4e6:	c3 97       	sbiw	r24, 0x33	; 51
 4e8:	a1 05       	cpc	r26, r1
 4ea:	b1 05       	cpc	r27, r1
 4ec:	08 f4       	brcc	.+2      	; 0x4f0 <Button_readState+0x4c>
 4ee:	5a c0       	rjmp	.+180    	; 0x5a4 <Button_readState+0x100>
		
		/*get the current button reading */
		uint8_t buttonState = DIO_getPinValue(button->buttonPin);
 4f0:	80 81       	ld	r24, Z
 4f2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <DIO_getPinValue>

		/*if the button was pressed for the first time and the button wasn't pressed for a long time */
		if (buttonState == HIGH && button->lastButtonState  == LOW && !button->isLongPress) {
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	91 f4       	brne	.+36     	; 0x51e <Button_readState+0x7a>
 4fa:	f8 01       	movw	r30, r16
 4fc:	92 81       	ldd	r25, Z+2	; 0x02
 4fe:	91 11       	cpse	r25, r1
 500:	0e c0       	rjmp	.+28     	; 0x51e <Button_readState+0x7a>
 502:	93 81       	ldd	r25, Z+3	; 0x03
 504:	91 11       	cpse	r25, r1
 506:	0b c0       	rjmp	.+22     	; 0x51e <Button_readState+0x7a>
			button->buttonPressTime = currentMillis;
 508:	49 81       	ldd	r20, Y+1	; 0x01
 50a:	5a 81       	ldd	r21, Y+2	; 0x02
 50c:	6b 81       	ldd	r22, Y+3	; 0x03
 50e:	7c 81       	ldd	r23, Y+4	; 0x04
 510:	44 83       	std	Z+4, r20	; 0x04
 512:	55 83       	std	Z+5, r21	; 0x05
 514:	66 83       	std	Z+6, r22	; 0x06
 516:	77 83       	std	Z+7, r23	; 0x07
			button->lastButtonState  = HIGH;
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	92 83       	std	Z+2, r25	; 0x02
			button->buttonPressState = Pressing ;
 51c:	91 83       	std	Z+1, r25	; 0x01
		}

		// get how long the button has been pressed
		button->buttonPressedTime = currentMillis - button->buttonPressTime;
 51e:	49 81       	ldd	r20, Y+1	; 0x01
 520:	5a 81       	ldd	r21, Y+2	; 0x02
 522:	6b 81       	ldd	r22, Y+3	; 0x03
 524:	7c 81       	ldd	r23, Y+4	; 0x04
 526:	f8 01       	movw	r30, r16
 528:	c4 80       	ldd	r12, Z+4	; 0x04
 52a:	d5 80       	ldd	r13, Z+5	; 0x05
 52c:	e6 80       	ldd	r14, Z+6	; 0x06
 52e:	f7 80       	ldd	r15, Z+7	; 0x07
 530:	4c 19       	sub	r20, r12
 532:	5d 09       	sbc	r21, r13
 534:	6e 09       	sbc	r22, r14
 536:	7f 09       	sbc	r23, r15
 538:	44 87       	std	Z+12, r20	; 0x0c
 53a:	55 87       	std	Z+13, r21	; 0x0d
 53c:	66 87       	std	Z+14, r22	; 0x0e
 53e:	77 87       	std	Z+15, r23	; 0x0f

		/* if the button is pressed and button pressed time >= the long press interval (1 s) */
		if (buttonState == HIGH && !button->isLongPress && button->buttonPressedTime >= isLongPressInterval) {
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	89 f4       	brne	.+34     	; 0x566 <Button_readState+0xc2>
 544:	93 81       	ldd	r25, Z+3	; 0x03
 546:	91 11       	cpse	r25, r1
 548:	0e c0       	rjmp	.+28     	; 0x566 <Button_readState+0xc2>
 54a:	44 85       	ldd	r20, Z+12	; 0x0c
 54c:	55 85       	ldd	r21, Z+13	; 0x0d
 54e:	66 85       	ldd	r22, Z+14	; 0x0e
 550:	77 85       	ldd	r23, Z+15	; 0x0f
 552:	48 3e       	cpi	r20, 0xE8	; 232
 554:	53 40       	sbci	r21, 0x03	; 3
 556:	61 05       	cpc	r22, r1
 558:	71 05       	cpc	r23, r1
 55a:	28 f0       	brcs	.+10     	; 0x566 <Button_readState+0xc2>
			/* set the button long press flag */
			button->isLongPress = 1;
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	f8 01       	movw	r30, r16
 560:	93 83       	std	Z+3, r25	; 0x03
			/* set button pressed state to be a long press*/
			button->buttonPressState = LongPress;
 562:	94 e0       	ldi	r25, 0x04	; 4
 564:	91 83       	std	Z+1, r25	; 0x01
		}
		
		/* if the button current state was low and last was high the button is released */
		if (buttonState == LOW && button->lastButtonState  == HIGH) {
 566:	81 11       	cpse	r24, r1
 568:	14 c0       	rjmp	.+40     	; 0x592 <Button_readState+0xee>
 56a:	f8 01       	movw	r30, r16
 56c:	82 81       	ldd	r24, Z+2	; 0x02
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	81 f4       	brne	.+32     	; 0x592 <Button_readState+0xee>
			
			/*rest last button state */
			button->lastButtonState  = LOW;
 572:	12 82       	std	Z+2, r1	; 0x02
			
			/*rest long press flag */
			button->isLongPress = 0;
 574:	13 82       	std	Z+3, r1	; 0x03
			
			/* set button pressed state to be released */
			button->buttonPressState = Released;
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	81 83       	std	Z+1, r24	; 0x01
			/*if the button is released before the long press interval then the button press is a short press */
			if (button->buttonPressedTime < isLongPressInterval) {
 57a:	84 85       	ldd	r24, Z+12	; 0x0c
 57c:	95 85       	ldd	r25, Z+13	; 0x0d
 57e:	a6 85       	ldd	r26, Z+14	; 0x0e
 580:	b7 85       	ldd	r27, Z+15	; 0x0f
 582:	88 3e       	cpi	r24, 0xE8	; 232
 584:	93 40       	sbci	r25, 0x03	; 3
 586:	a1 05       	cpc	r26, r1
 588:	b1 05       	cpc	r27, r1
 58a:	18 f4       	brcc	.+6      	; 0x592 <Button_readState+0xee>
				button->buttonPressState = ShortPress;
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	f8 01       	movw	r30, r16
 590:	81 83       	std	Z+1, r24	; 0x01
			}
		}
		
		/*set the last time to the current time to get to the next iteration */
		button->lastReadingTime = currentMillis;
 592:	89 81       	ldd	r24, Y+1	; 0x01
 594:	9a 81       	ldd	r25, Y+2	; 0x02
 596:	ab 81       	ldd	r26, Y+3	; 0x03
 598:	bc 81       	ldd	r27, Y+4	; 0x04
 59a:	f8 01       	movw	r30, r16
 59c:	80 87       	std	Z+8, r24	; 0x08
 59e:	91 87       	std	Z+9, r25	; 0x09
 5a0:	a2 87       	std	Z+10, r26	; 0x0a
 5a2:	b3 87       	std	Z+11, r27	; 0x0b
	}

}
 5a4:	0f 90       	pop	r0
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	ff 90       	pop	r15
 5b6:	ef 90       	pop	r14
 5b8:	df 90       	pop	r13
 5ba:	cf 90       	pop	r12
 5bc:	08 95       	ret

000005be <TRAFFIC_LIGHT_Init>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_INT.h"
#include "traffic_light_INT.h"

void TRAFFIC_LIGHT_Init(ST_TrafficLight_t *traffic_light)
{
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	ec 01       	movw	r28, r24
	/* Set traffic light pins to be output */
	DIO_setPinDirection(traffic_light->GREEN_Pin,OUTPUT) ; 
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	88 81       	ld	r24, Y
 5c8:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_setPinDirection>
	DIO_setPinDirection(traffic_light->YELLOW_Pin,OUTPUT) ;
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_setPinDirection>
	DIO_setPinDirection(traffic_light->RED_Pin,OUTPUT) ;
 5d4:	61 e0       	ldi	r22, 0x01	; 1
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_setPinDirection>
}
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	08 95       	ret

000005e2 <TRAFFIC_LIGHT_Drive>:

void TRAFFIC_LIGHT_Drive(ST_TrafficLight_t * trafficLight , EN_LightState_t state) 
{
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	ec 01       	movw	r28, r24
	switch(state)
 5e8:	61 30       	cpi	r22, 0x01	; 1
 5ea:	49 f0       	breq	.+18     	; 0x5fe <TRAFFIC_LIGHT_Drive+0x1c>
 5ec:	18 f0       	brcs	.+6      	; 0x5f4 <TRAFFIC_LIGHT_Drive+0x12>
 5ee:	62 30       	cpi	r22, 0x02	; 2
 5f0:	59 f0       	breq	.+22     	; 0x608 <TRAFFIC_LIGHT_Drive+0x26>
 5f2:	0f c0       	rjmp	.+30     	; 0x612 <TRAFFIC_LIGHT_Drive+0x30>
	{
	case GREEN:
		/* turn only green led */
		DIO_setPinValue(trafficLight->GREEN_Pin,HIGH) ; 
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	88 81       	ld	r24, Y
 5f8:	0e 94 89 03 	call	0x712	; 0x712 <DIO_setPinValue>
		
		break;
 5fc:	16 c0       	rjmp	.+44     	; 0x62a <TRAFFIC_LIGHT_Drive+0x48>
	case YELLOW:
		/* Toggle only yellow led */
		DIO_setPinValue(trafficLight->YELLOW_Pin,TOGGLE) ;
 5fe:	62 e0       	ldi	r22, 0x02	; 2
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	0e 94 89 03 	call	0x712	; 0x712 <DIO_setPinValue>
		break;
 606:	11 c0       	rjmp	.+34     	; 0x62a <TRAFFIC_LIGHT_Drive+0x48>
	case RED:
		/* turn only red led */
		DIO_setPinValue(trafficLight->RED_Pin,HIGH) ;
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	8a 81       	ldd	r24, Y+2	; 0x02
 60c:	0e 94 89 03 	call	0x712	; 0x712 <DIO_setPinValue>
		break;
 610:	0c c0       	rjmp	.+24     	; 0x62a <TRAFFIC_LIGHT_Drive+0x48>
	
	default:
		/* turn off all  */
		DIO_setPinValue(trafficLight->GREEN_Pin,LOW) ;
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	88 81       	ld	r24, Y
 616:	0e 94 89 03 	call	0x712	; 0x712 <DIO_setPinValue>
		DIO_setPinValue(trafficLight->YELLOW_Pin,LOW) ;
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	89 81       	ldd	r24, Y+1	; 0x01
 61e:	0e 94 89 03 	call	0x712	; 0x712 <DIO_setPinValue>
		DIO_setPinValue(trafficLight->RED_Pin,LOW) ;
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	8a 81       	ldd	r24, Y+2	; 0x02
 626:	0e 94 89 03 	call	0x712	; 0x712 <DIO_setPinValue>
		break;
	}

}
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <main>:
#include "APP/APP.h"

int main(void)
{
	/*init all modules used in app*/
	init_APP() ;
 630:	0e 94 49 00 	call	0x92	; 0x92 <init_APP>
	
    while (1) 
    {
		/* run the app */
		startApp();
 634:	0e 94 24 02 	call	0x448	; 0x448 <startApp>
 638:	fd cf       	rjmp	.-6      	; 0x634 <main+0x4>

0000063a <DIO_setPinDirection>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 63a:	88 30       	cpi	r24, 0x08	; 8
 63c:	70 f0       	brcs	.+28     	; 0x65a <DIO_setPinDirection+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 63e:	28 ef       	ldi	r18, 0xF8	; 248
 640:	28 0f       	add	r18, r24
 642:	28 30       	cpi	r18, 0x08	; 8
 644:	58 f0       	brcs	.+22     	; 0x65c <DIO_setPinDirection+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 646:	20 ef       	ldi	r18, 0xF0	; 240
 648:	28 0f       	add	r18, r24
 64a:	28 30       	cpi	r18, 0x08	; 8
 64c:	38 f0       	brcs	.+14     	; 0x65c <DIO_setPinDirection+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 64e:	28 ee       	ldi	r18, 0xE8	; 232
 650:	28 0f       	add	r18, r24
 652:	28 30       	cpi	r18, 0x08	; 8
 654:	18 f0       	brcs	.+6      	; 0x65c <DIO_setPinDirection+0x22>
	return NC ; 
 656:	2f ef       	ldi	r18, 0xFF	; 255
 658:	01 c0       	rjmp	.+2      	; 0x65c <DIO_setPinDirection+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 65a:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 65c:	88 30       	cpi	r24, 0x08	; 8
 65e:	68 f0       	brcs	.+26     	; 0x67a <DIO_setPinDirection+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 660:	98 ef       	ldi	r25, 0xF8	; 248
 662:	98 0f       	add	r25, r24
 664:	98 30       	cpi	r25, 0x08	; 8
 666:	58 f0       	brcs	.+22     	; 0x67e <DIO_setPinDirection+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 668:	90 ef       	ldi	r25, 0xF0	; 240
 66a:	98 0f       	add	r25, r24
 66c:	98 30       	cpi	r25, 0x08	; 8
 66e:	48 f0       	brcs	.+18     	; 0x682 <DIO_setPinDirection+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 670:	88 51       	subi	r24, 0x18	; 24
 672:	88 30       	cpi	r24, 0x08	; 8
 674:	40 f4       	brcc	.+16     	; 0x686 <DIO_setPinDirection+0x4c>
 676:	83 e0       	ldi	r24, 0x03	; 3
 678:	07 c0       	rjmp	.+14     	; 0x688 <DIO_setPinDirection+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	05 c0       	rjmp	.+10     	; 0x688 <DIO_setPinDirection+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	03 c0       	rjmp	.+6      	; 0x688 <DIO_setPinDirection+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 682:	82 e0       	ldi	r24, 0x02	; 2
 684:	01 c0       	rjmp	.+2      	; 0x688 <DIO_setPinDirection+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 686:	8f ef       	ldi	r24, 0xFF	; 255
{
	
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[port][1]) ;
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	fc 01       	movw	r30, r24
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	df 01       	movw	r26, r30
 692:	a8 0f       	add	r26, r24
 694:	b9 1f       	adc	r27, r25
 696:	aa 0f       	add	r26, r26
 698:	bb 1f       	adc	r27, r27
 69a:	a6 58       	subi	r26, 0x86	; 134
 69c:	bf 4f       	sbci	r27, 0xFF	; 255
 69e:	12 96       	adiw	r26, 0x02	; 2
 6a0:	0d 90       	ld	r0, X+
 6a2:	bc 91       	ld	r27, X
 6a4:	a0 2d       	mov	r26, r0
	/* select PORTX Register */ 
	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 6a6:	e8 0f       	add	r30, r24
 6a8:	f9 1f       	adc	r31, r25
 6aa:	ee 0f       	add	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	e6 58       	subi	r30, 0x86	; 134
 6b0:	ff 4f       	sbci	r31, 0xFF	; 255
 6b2:	01 90       	ld	r0, Z+
 6b4:	f0 81       	ld	r31, Z
 6b6:	e0 2d       	mov	r30, r0
    switch (pinDirection)
 6b8:	61 30       	cpi	r22, 0x01	; 1
 6ba:	81 f0       	breq	.+32     	; 0x6dc <DIO_setPinDirection+0xa2>
 6bc:	18 f0       	brcs	.+6      	; 0x6c4 <DIO_setPinDirection+0x8a>
 6be:	62 30       	cpi	r22, 0x02	; 2
 6c0:	c1 f0       	breq	.+48     	; 0x6f2 <DIO_setPinDirection+0xb8>
 6c2:	08 95       	ret
    {
    case INPUT:
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 6c4:	3c 91       	ld	r19, X
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <DIO_setPinDirection+0x96>
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	2a 95       	dec	r18
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <DIO_setPinDirection+0x92>
 6d4:	80 95       	com	r24
 6d6:	83 23       	and	r24, r19
 6d8:	8c 93       	st	X, r24
        break;
 6da:	08 95       	ret
    case OUTPUT:
        /* set PORTX to 1 to set as output */
        setBit((*DDRX),pin) ;
 6dc:	3c 91       	ld	r19, X
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_setPinDirection+0xae>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	2a 95       	dec	r18
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_setPinDirection+0xaa>
 6ec:	83 2b       	or	r24, r19
 6ee:	8c 93       	st	X, r24
        break;
 6f0:	08 95       	ret
    case INPUT_PULLUP:
        /* set PORTX to 1 to active the pull up resistor */
        setBit((*PORTX),pin) ;  
 6f2:	30 81       	ld	r19, Z
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_setPinDirection+0xc4>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	2a 95       	dec	r18
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_setPinDirection+0xc0>
 702:	93 2f       	mov	r25, r19
 704:	98 2b       	or	r25, r24
 706:	90 83       	st	Z, r25
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 708:	9c 91       	ld	r25, X
 70a:	80 95       	com	r24
 70c:	89 23       	and	r24, r25
 70e:	8c 93       	st	X, r24
 710:	08 95       	ret

00000712 <DIO_setPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 712:	88 30       	cpi	r24, 0x08	; 8
 714:	70 f0       	brcs	.+28     	; 0x732 <DIO_setPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 716:	28 ef       	ldi	r18, 0xF8	; 248
 718:	28 0f       	add	r18, r24
 71a:	28 30       	cpi	r18, 0x08	; 8
 71c:	58 f0       	brcs	.+22     	; 0x734 <DIO_setPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 71e:	20 ef       	ldi	r18, 0xF0	; 240
 720:	28 0f       	add	r18, r24
 722:	28 30       	cpi	r18, 0x08	; 8
 724:	38 f0       	brcs	.+14     	; 0x734 <DIO_setPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 726:	28 ee       	ldi	r18, 0xE8	; 232
 728:	28 0f       	add	r18, r24
 72a:	28 30       	cpi	r18, 0x08	; 8
 72c:	18 f0       	brcs	.+6      	; 0x734 <DIO_setPinValue+0x22>
	return NC ; 
 72e:	2f ef       	ldi	r18, 0xFF	; 255
 730:	01 c0       	rjmp	.+2      	; 0x734 <DIO_setPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 732:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 734:	88 30       	cpi	r24, 0x08	; 8
 736:	68 f0       	brcs	.+26     	; 0x752 <DIO_setPinValue+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 738:	98 ef       	ldi	r25, 0xF8	; 248
 73a:	98 0f       	add	r25, r24
 73c:	98 30       	cpi	r25, 0x08	; 8
 73e:	58 f0       	brcs	.+22     	; 0x756 <DIO_setPinValue+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 740:	90 ef       	ldi	r25, 0xF0	; 240
 742:	98 0f       	add	r25, r24
 744:	98 30       	cpi	r25, 0x08	; 8
 746:	48 f0       	brcs	.+18     	; 0x75a <DIO_setPinValue+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 748:	88 51       	subi	r24, 0x18	; 24
 74a:	88 30       	cpi	r24, 0x08	; 8
 74c:	40 f4       	brcc	.+16     	; 0x75e <DIO_setPinValue+0x4c>
 74e:	83 e0       	ldi	r24, 0x03	; 3
 750:	07 c0       	rjmp	.+14     	; 0x760 <DIO_setPinValue+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	05 c0       	rjmp	.+10     	; 0x760 <DIO_setPinValue+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	03 c0       	rjmp	.+6      	; 0x760 <DIO_setPinValue+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 75a:	82 e0       	ldi	r24, 0x02	; 2
 75c:	01 c0       	rjmp	.+2      	; 0x760 <DIO_setPinValue+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 75e:	8f ef       	ldi	r24, 0xFF	; 255
void DIO_setPinValue(EN_PinNumber_t pinNum, EN_Values_t value) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PORTX Register */
   	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	fc 01       	movw	r30, r24
 764:	ee 0f       	add	r30, r30
 766:	ff 1f       	adc	r31, r31
 768:	e8 0f       	add	r30, r24
 76a:	f9 1f       	adc	r31, r25
 76c:	ee 0f       	add	r30, r30
 76e:	ff 1f       	adc	r31, r31
 770:	e6 58       	subi	r30, 0x86	; 134
 772:	ff 4f       	sbci	r31, 0xFF	; 255
 774:	01 90       	ld	r0, Z+
 776:	f0 81       	ld	r31, Z
 778:	e0 2d       	mov	r30, r0
    switch (value)
 77a:	61 30       	cpi	r22, 0x01	; 1
 77c:	81 f0       	breq	.+32     	; 0x79e <DIO_setPinValue+0x8c>
 77e:	18 f0       	brcs	.+6      	; 0x786 <DIO_setPinValue+0x74>
 780:	62 30       	cpi	r22, 0x02	; 2
 782:	c1 f0       	breq	.+48     	; 0x7b4 <DIO_setPinValue+0xa2>
 784:	08 95       	ret
    {
        
    case LOW:
        /* set the selected pin to LOW */
       clearBit((*PORTX),pin) ;
 786:	30 81       	ld	r19, Z
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_setPinValue+0x80>
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	2a 95       	dec	r18
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_setPinValue+0x7c>
 796:	80 95       	com	r24
 798:	83 23       	and	r24, r19
 79a:	80 83       	st	Z, r24
        break;    
 79c:	08 95       	ret
    case HIGH:
        /* set the selected pin to HIGH */
        setBit((*PORTX),pin) ;
 79e:	30 81       	ld	r19, Z
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_setPinValue+0x98>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	2a 95       	dec	r18
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_setPinValue+0x94>
 7ae:	83 2b       	or	r24, r19
 7b0:	80 83       	st	Z, r24
        break;
 7b2:	08 95       	ret
    case TOGGLE:
        /*TOGGLE the selected pin */
        toggleBit((*PORTX),pin) ;
 7b4:	30 81       	ld	r19, Z
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_setPinValue+0xae>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	2a 95       	dec	r18
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_setPinValue+0xaa>
 7c4:	83 27       	eor	r24, r19
 7c6:	80 83       	st	Z, r24
 7c8:	08 95       	ret

000007ca <DIO_getPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 7ca:	88 30       	cpi	r24, 0x08	; 8
 7cc:	70 f0       	brcs	.+28     	; 0x7ea <DIO_getPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 7ce:	28 ef       	ldi	r18, 0xF8	; 248
 7d0:	28 0f       	add	r18, r24
 7d2:	28 30       	cpi	r18, 0x08	; 8
 7d4:	58 f0       	brcs	.+22     	; 0x7ec <DIO_getPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 7d6:	20 ef       	ldi	r18, 0xF0	; 240
 7d8:	28 0f       	add	r18, r24
 7da:	28 30       	cpi	r18, 0x08	; 8
 7dc:	38 f0       	brcs	.+14     	; 0x7ec <DIO_getPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 7de:	28 ee       	ldi	r18, 0xE8	; 232
 7e0:	28 0f       	add	r18, r24
 7e2:	28 30       	cpi	r18, 0x08	; 8
 7e4:	18 f0       	brcs	.+6      	; 0x7ec <DIO_getPinValue+0x22>
	return NC ; 
 7e6:	2f ef       	ldi	r18, 0xFF	; 255
 7e8:	01 c0       	rjmp	.+2      	; 0x7ec <DIO_getPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 7ea:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 7ec:	88 30       	cpi	r24, 0x08	; 8
 7ee:	68 f0       	brcs	.+26     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 7f0:	98 ef       	ldi	r25, 0xF8	; 248
 7f2:	98 0f       	add	r25, r24
 7f4:	98 30       	cpi	r25, 0x08	; 8
 7f6:	58 f0       	brcs	.+22     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 7f8:	90 ef       	ldi	r25, 0xF0	; 240
 7fa:	98 0f       	add	r25, r24
 7fc:	98 30       	cpi	r25, 0x08	; 8
 7fe:	48 f0       	brcs	.+18     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 800:	88 51       	subi	r24, 0x18	; 24
 802:	88 30       	cpi	r24, 0x08	; 8
 804:	40 f4       	brcc	.+16     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 806:	83 e0       	ldi	r24, 0x03	; 3
 808:	07 c0       	rjmp	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	05 c0       	rjmp	.+10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	03 c0       	rjmp	.+6      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 812:	82 e0       	ldi	r24, 0x02	; 2
 814:	01 c0       	rjmp	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 816:	8f ef       	ldi	r24, 0xFF	; 255
uint8_t DIO_getPinValue(EN_PinNumber_t pinNum) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	fc 01       	movw	r30, r24
 81c:	ee 0f       	add	r30, r30
 81e:	ff 1f       	adc	r31, r31
 820:	e8 0f       	add	r30, r24
 822:	f9 1f       	adc	r31, r25
 824:	ee 0f       	add	r30, r30
 826:	ff 1f       	adc	r31, r31
 828:	e6 58       	subi	r30, 0x86	; 134
 82a:	ff 4f       	sbci	r31, 0xFF	; 255
 82c:	04 80       	ldd	r0, Z+4	; 0x04
 82e:	f5 81       	ldd	r31, Z+5	; 0x05
 830:	e0 2d       	mov	r30, r0
   /* return pin value */
    return getBit((*PINX) ,pin);
 832:	80 81       	ld	r24, Z
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	95 95       	asr	r25
 83a:	87 95       	ror	r24
 83c:	2a 95       	dec	r18
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
}
 840:	81 70       	andi	r24, 0x01	; 1
 842:	08 95       	ret

00000844 <GIE_Enable>:

#include "GIE_INT.h"
#include "GIE_REG.h"


inline void GIE_Enable(void)  {SREG |=  (1<<SREG_I) ;}
 844:	8f b7       	in	r24, 0x3f	; 63
 846:	80 68       	ori	r24, 0x80	; 128
 848:	8f bf       	out	0x3f, r24	; 63
 84a:	08 95       	ret

0000084c <GIE_Disable>:

 84c:	8f b7       	in	r24, 0x3f	; 63
 84e:	8f 77       	andi	r24, 0x7F	; 127
 850:	8f bf       	out	0x3f, r24	; 63
 852:	08 95       	ret

00000854 <Millis_INC>:

/* each timer overflow(timer ISR) */ 
static void Millis_INC(void)
{
	/* set timer preload again */
	Timer_SetOVFRegister(Selected_Timer,131);
 854:	63 e8       	ldi	r22, 0x83	; 131
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	0e 94 ef 04 	call	0x9de	; 0x9de <Timer_SetOVFRegister>
	/*increment the number of milliseconds passed */
	millis++ ; 	
 85c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <millis>
 860:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <millis+0x1>
 864:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <millis+0x2>
 868:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <millis+0x3>
 86c:	01 96       	adiw	r24, 0x01	; 1
 86e:	a1 1d       	adc	r26, r1
 870:	b1 1d       	adc	r27, r1
 872:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <millis>
 876:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <millis+0x1>
 87a:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <millis+0x2>
 87e:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <millis+0x3>
 882:	08 95       	ret

00000884 <Millis_Init>:
}

void Millis_Init(void) 
{
	/* global interrupts enable*/
	GIE_Enable() ; 
 884:	0e 94 22 04 	call	0x844	; 0x844 <GIE_Enable>
	/* set timer overflow callback (what happen when timer overflows */
	Timer_SetOVF_Callback(Selected_Timer,&Millis_INC) ; 
 888:	6a e2       	ldi	r22, 0x2A	; 42
 88a:	74 e0       	ldi	r23, 0x04	; 4
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Timer_SetOVF_Callback>
	
	/* set timer overflow register to  131 to achieve 1 ms in the next overflow*/
	Timer_SetOVFRegister(Selected_Timer,131) ;
 892:	63 e8       	ldi	r22, 0x83	; 131
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	0e 94 ef 04 	call	0x9de	; 0x9de <Timer_SetOVFRegister>
	
	/* set timer prescaller and wave mode to be normal */
	Timer_Init(Selected_Timer,prescaler8,Normal) ;
 89a:	40 e0       	ldi	r20, 0x00	; 0
 89c:	62 e0       	ldi	r22, 0x02	; 2
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	0e 94 c4 04 	call	0x988	; 0x988 <Timer_Init>
 8a4:	08 95       	ret

000008a6 <Millis_get>:
}

millis_t Millis_get(void) 
{
 8a6:	cf 93       	push	r28
 8a8:	df 93       	push	r29
 8aa:	00 d0       	rcall	.+0      	; 0x8ac <Millis_get+0x6>
 8ac:	00 d0       	rcall	.+0      	; 0x8ae <Millis_get+0x8>
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
	/*disable all interrupts */ 
	GIE_Disable() ; 
 8b2:	0e 94 26 04 	call	0x84c	; 0x84c <GIE_Disable>
	millis_t m = millis ; 
 8b6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <millis>
 8ba:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <millis+0x1>
 8be:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <millis+0x2>
 8c2:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <millis+0x3>
 8c6:	89 83       	std	Y+1, r24	; 0x01
 8c8:	9a 83       	std	Y+2, r25	; 0x02
 8ca:	ab 83       	std	Y+3, r26	; 0x03
 8cc:	bc 83       	std	Y+4, r27	; 0x04
	/* global interrupts enable */
	GIE_Enable() ;
 8ce:	0e 94 22 04 	call	0x844	; 0x844 <GIE_Enable>
	return m ;
 8d2:	69 81       	ldd	r22, Y+1	; 0x01
 8d4:	7a 81       	ldd	r23, Y+2	; 0x02
 8d6:	8b 81       	ldd	r24, Y+3	; 0x03
 8d8:	9c 81       	ldd	r25, Y+4	; 0x04
 8da:	0f 90       	pop	r0
 8dc:	0f 90       	pop	r0
 8de:	0f 90       	pop	r0
 8e0:	0f 90       	pop	r0
 8e2:	df 91       	pop	r29
 8e4:	cf 91       	pop	r28
 8e6:	08 95       	ret

000008e8 <Timer_SetPrescaller>:
	{
	case TIMER0:
		setBit(TIFR,TIFR_OCF0) ;
		break;
	case TIMER2:
		 setBit(TIFR,TIFR_OCF2) ;
 8e8:	88 23       	and	r24, r24
 8ea:	19 f0       	breq	.+6      	; 0x8f2 <Timer_SetPrescaller+0xa>
 8ec:	81 30       	cpi	r24, 0x01	; 1
 8ee:	41 f0       	breq	.+16     	; 0x900 <Timer_SetPrescaller+0x18>
 8f0:	08 95       	ret
 8f2:	83 b7       	in	r24, 0x33	; 51
 8f4:	88 7f       	andi	r24, 0xF8	; 248
 8f6:	83 bf       	out	0x33, r24	; 51
 8f8:	83 b7       	in	r24, 0x33	; 51
 8fa:	68 2b       	or	r22, r24
 8fc:	63 bf       	out	0x33, r22	; 51
 8fe:	08 95       	ret
 900:	85 b5       	in	r24, 0x25	; 37
 902:	88 7f       	andi	r24, 0xF8	; 248
 904:	68 2b       	or	r22, r24
 906:	65 bd       	out	0x25, r22	; 37
 908:	08 95       	ret

0000090a <Timer_SetWaveMode>:
 90a:	88 23       	and	r24, r24
 90c:	19 f0       	breq	.+6      	; 0x914 <Timer_SetWaveMode+0xa>
 90e:	81 30       	cpi	r24, 0x01	; 1
 910:	f9 f0       	breq	.+62     	; 0x950 <Timer_SetWaveMode+0x46>
 912:	08 95       	ret
 914:	83 b7       	in	r24, 0x33	; 51
 916:	87 7b       	andi	r24, 0xB7	; 183
 918:	83 bf       	out	0x33, r24	; 51
 91a:	83 b7       	in	r24, 0x33	; 51
 91c:	a6 2f       	mov	r26, r22
 91e:	a1 70       	andi	r26, 0x01	; 1
 920:	b0 e0       	ldi	r27, 0x00	; 0
 922:	00 24       	eor	r0, r0
 924:	b6 95       	lsr	r27
 926:	a7 95       	ror	r26
 928:	07 94       	ror	r0
 92a:	b6 95       	lsr	r27
 92c:	a7 95       	ror	r26
 92e:	07 94       	ror	r0
 930:	ba 2f       	mov	r27, r26
 932:	a0 2d       	mov	r26, r0
 934:	61 fb       	bst	r22, 1
 936:	44 27       	eor	r20, r20
 938:	40 f9       	bld	r20, 0
 93a:	50 e0       	ldi	r21, 0x00	; 0
 93c:	44 0f       	add	r20, r20
 93e:	55 1f       	adc	r21, r21
 940:	44 0f       	add	r20, r20
 942:	55 1f       	adc	r21, r21
 944:	44 0f       	add	r20, r20
 946:	55 1f       	adc	r21, r21
 948:	4a 2b       	or	r20, r26
 94a:	48 2b       	or	r20, r24
 94c:	43 bf       	out	0x33, r20	; 51
 94e:	08 95       	ret
 950:	85 b5       	in	r24, 0x25	; 37
 952:	87 7b       	andi	r24, 0xB7	; 183
 954:	e6 2f       	mov	r30, r22
 956:	e1 70       	andi	r30, 0x01	; 1
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	00 24       	eor	r0, r0
 95c:	f6 95       	lsr	r31
 95e:	e7 95       	ror	r30
 960:	07 94       	ror	r0
 962:	f6 95       	lsr	r31
 964:	e7 95       	ror	r30
 966:	07 94       	ror	r0
 968:	fe 2f       	mov	r31, r30
 96a:	e0 2d       	mov	r30, r0
 96c:	61 fb       	bst	r22, 1
 96e:	22 27       	eor	r18, r18
 970:	20 f9       	bld	r18, 0
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	22 0f       	add	r18, r18
 976:	33 1f       	adc	r19, r19
 978:	22 0f       	add	r18, r18
 97a:	33 1f       	adc	r19, r19
 97c:	22 0f       	add	r18, r18
 97e:	33 1f       	adc	r19, r19
 980:	2e 2b       	or	r18, r30
 982:	28 2b       	or	r18, r24
 984:	25 bd       	out	0x25, r18	; 37
 986:	08 95       	ret

00000988 <Timer_Init>:
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	c8 2f       	mov	r28, r24
 98e:	d4 2f       	mov	r29, r20
 990:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Timer_SetPrescaller>
 994:	6d 2f       	mov	r22, r29
 996:	8c 2f       	mov	r24, r28
 998:	0e 94 85 04 	call	0x90a	; 0x90a <Timer_SetWaveMode>
 99c:	df 91       	pop	r29
 99e:	cf 91       	pop	r28
 9a0:	08 95       	ret

000009a2 <Timer_SetOVF_Callback>:
 9a2:	61 15       	cp	r22, r1
 9a4:	71 05       	cpc	r23, r1
 9a6:	d1 f0       	breq	.+52     	; 0x9dc <Timer_SetOVF_Callback+0x3a>
 9a8:	88 23       	and	r24, r24
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <Timer_SetOVF_Callback+0x10>
 9ac:	81 30       	cpi	r24, 0x01	; 1
 9ae:	61 f0       	breq	.+24     	; 0x9c8 <Timer_SetOVF_Callback+0x26>
 9b0:	08 95       	ret
 9b2:	89 b7       	in	r24, 0x39	; 57
 9b4:	81 60       	ori	r24, 0x01	; 1
 9b6:	89 bf       	out	0x39, r24	; 57
 9b8:	89 b7       	in	r24, 0x39	; 57
 9ba:	8d 7f       	andi	r24, 0xFD	; 253
 9bc:	89 bf       	out	0x39, r24	; 57
 9be:	70 93 af 00 	sts	0x00AF, r23	; 0x8000af <TIMERS_NORMAL_ISR+0x1>
 9c2:	60 93 ae 00 	sts	0x00AE, r22	; 0x8000ae <TIMERS_NORMAL_ISR>
 9c6:	08 95       	ret
 9c8:	89 b7       	in	r24, 0x39	; 57
 9ca:	80 64       	ori	r24, 0x40	; 64
 9cc:	89 bf       	out	0x39, r24	; 57
 9ce:	89 b7       	in	r24, 0x39	; 57
 9d0:	8f 77       	andi	r24, 0x7F	; 127
 9d2:	89 bf       	out	0x39, r24	; 57
 9d4:	70 93 b1 00 	sts	0x00B1, r23	; 0x8000b1 <TIMERS_NORMAL_ISR+0x3>
 9d8:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <TIMERS_NORMAL_ISR+0x2>
 9dc:	08 95       	ret

000009de <Timer_SetOVFRegister>:
 9de:	88 23       	and	r24, r24
 9e0:	19 f0       	breq	.+6      	; 0x9e8 <Timer_SetOVFRegister+0xa>
 9e2:	81 30       	cpi	r24, 0x01	; 1
 9e4:	19 f0       	breq	.+6      	; 0x9ec <Timer_SetOVFRegister+0xe>
 9e6:	08 95       	ret
 9e8:	62 bf       	out	0x32, r22	; 50
 9ea:	08 95       	ret
 9ec:	64 bd       	out	0x24, r22	; 36
 9ee:	08 95       	ret

000009f0 <__vector_11>:
}

/* Timer0 Overflow ISR */
void __vector_11 (void) __attribute__ ((signal,used)) ; 
void __vector_11 (void) 
{
 9f0:	1f 92       	push	r1
 9f2:	0f 92       	push	r0
 9f4:	0f b6       	in	r0, 0x3f	; 63
 9f6:	0f 92       	push	r0
 9f8:	11 24       	eor	r1, r1
 9fa:	2f 93       	push	r18
 9fc:	3f 93       	push	r19
 9fe:	4f 93       	push	r20
 a00:	5f 93       	push	r21
 a02:	6f 93       	push	r22
 a04:	7f 93       	push	r23
 a06:	8f 93       	push	r24
 a08:	9f 93       	push	r25
 a0a:	af 93       	push	r26
 a0c:	bf 93       	push	r27
 a0e:	ef 93       	push	r30
 a10:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[0] != ((void *)0))
 a12:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <TIMERS_NORMAL_ISR>
 a16:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <TIMERS_NORMAL_ISR+0x1>
 a1a:	30 97       	sbiw	r30, 0x00	; 0
 a1c:	09 f0       	breq	.+2      	; 0xa20 <__vector_11+0x30>
    {
        TIMERS_NORMAL_ISR[0]() ;
 a1e:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 a20:	ff 91       	pop	r31
 a22:	ef 91       	pop	r30
 a24:	bf 91       	pop	r27
 a26:	af 91       	pop	r26
 a28:	9f 91       	pop	r25
 a2a:	8f 91       	pop	r24
 a2c:	7f 91       	pop	r23
 a2e:	6f 91       	pop	r22
 a30:	5f 91       	pop	r21
 a32:	4f 91       	pop	r20
 a34:	3f 91       	pop	r19
 a36:	2f 91       	pop	r18
 a38:	0f 90       	pop	r0
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	0f 90       	pop	r0
 a3e:	1f 90       	pop	r1
 a40:	18 95       	reti

00000a42 <__vector_10>:

/* Timer0 CompareMatch ISR */
void __vector_10 (void) __attribute__ ((signal,used)) ; 
void __vector_10 (void) 
{
 a42:	1f 92       	push	r1
 a44:	0f 92       	push	r0
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	0f 92       	push	r0
 a4a:	11 24       	eor	r1, r1
 a4c:	2f 93       	push	r18
 a4e:	3f 93       	push	r19
 a50:	4f 93       	push	r20
 a52:	5f 93       	push	r21
 a54:	6f 93       	push	r22
 a56:	7f 93       	push	r23
 a58:	8f 93       	push	r24
 a5a:	9f 93       	push	r25
 a5c:	af 93       	push	r26
 a5e:	bf 93       	push	r27
 a60:	ef 93       	push	r30
 a62:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[0] != ((void *)0))
 a64:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <TIMERS_CTC_ISR>
 a68:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <TIMERS_CTC_ISR+0x1>
 a6c:	30 97       	sbiw	r30, 0x00	; 0
 a6e:	09 f0       	breq	.+2      	; 0xa72 <__vector_10+0x30>
    {
        TIMERS_CTC_ISR[0]() ;
 a70:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 a72:	ff 91       	pop	r31
 a74:	ef 91       	pop	r30
 a76:	bf 91       	pop	r27
 a78:	af 91       	pop	r26
 a7a:	9f 91       	pop	r25
 a7c:	8f 91       	pop	r24
 a7e:	7f 91       	pop	r23
 a80:	6f 91       	pop	r22
 a82:	5f 91       	pop	r21
 a84:	4f 91       	pop	r20
 a86:	3f 91       	pop	r19
 a88:	2f 91       	pop	r18
 a8a:	0f 90       	pop	r0
 a8c:	0f be       	out	0x3f, r0	; 63
 a8e:	0f 90       	pop	r0
 a90:	1f 90       	pop	r1
 a92:	18 95       	reti

00000a94 <__vector_5>:

/* Timer2 Overflow ISR */
void __vector_5 (void) __attribute__ ((signal,used)) ; 
void __vector_5 (void) 
{
 a94:	1f 92       	push	r1
 a96:	0f 92       	push	r0
 a98:	0f b6       	in	r0, 0x3f	; 63
 a9a:	0f 92       	push	r0
 a9c:	11 24       	eor	r1, r1
 a9e:	2f 93       	push	r18
 aa0:	3f 93       	push	r19
 aa2:	4f 93       	push	r20
 aa4:	5f 93       	push	r21
 aa6:	6f 93       	push	r22
 aa8:	7f 93       	push	r23
 aaa:	8f 93       	push	r24
 aac:	9f 93       	push	r25
 aae:	af 93       	push	r26
 ab0:	bf 93       	push	r27
 ab2:	ef 93       	push	r30
 ab4:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[1] != ((void *)0))
 ab6:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <TIMERS_NORMAL_ISR+0x2>
 aba:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <TIMERS_NORMAL_ISR+0x3>
 abe:	30 97       	sbiw	r30, 0x00	; 0
 ac0:	09 f0       	breq	.+2      	; 0xac4 <__vector_5+0x30>
    {
        TIMERS_NORMAL_ISR[1]() ;
 ac2:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
 ac8:	bf 91       	pop	r27
 aca:	af 91       	pop	r26
 acc:	9f 91       	pop	r25
 ace:	8f 91       	pop	r24
 ad0:	7f 91       	pop	r23
 ad2:	6f 91       	pop	r22
 ad4:	5f 91       	pop	r21
 ad6:	4f 91       	pop	r20
 ad8:	3f 91       	pop	r19
 ada:	2f 91       	pop	r18
 adc:	0f 90       	pop	r0
 ade:	0f be       	out	0x3f, r0	; 63
 ae0:	0f 90       	pop	r0
 ae2:	1f 90       	pop	r1
 ae4:	18 95       	reti

00000ae6 <__vector_4>:

/* Timer2 CompareMatch ISR */
void __vector_4 (void) __attribute__ ((signal,used)) ; 
void __vector_4 (void) 
{
 ae6:	1f 92       	push	r1
 ae8:	0f 92       	push	r0
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	0f 92       	push	r0
 aee:	11 24       	eor	r1, r1
 af0:	2f 93       	push	r18
 af2:	3f 93       	push	r19
 af4:	4f 93       	push	r20
 af6:	5f 93       	push	r21
 af8:	6f 93       	push	r22
 afa:	7f 93       	push	r23
 afc:	8f 93       	push	r24
 afe:	9f 93       	push	r25
 b00:	af 93       	push	r26
 b02:	bf 93       	push	r27
 b04:	ef 93       	push	r30
 b06:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[1] != ((void *)0))
 b08:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <TIMERS_CTC_ISR+0x2>
 b0c:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <TIMERS_CTC_ISR+0x3>
 b10:	30 97       	sbiw	r30, 0x00	; 0
 b12:	09 f0       	breq	.+2      	; 0xb16 <__vector_4+0x30>
    {
        TIMERS_CTC_ISR[1]() ;
 b14:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 b16:	ff 91       	pop	r31
 b18:	ef 91       	pop	r30
 b1a:	bf 91       	pop	r27
 b1c:	af 91       	pop	r26
 b1e:	9f 91       	pop	r25
 b20:	8f 91       	pop	r24
 b22:	7f 91       	pop	r23
 b24:	6f 91       	pop	r22
 b26:	5f 91       	pop	r21
 b28:	4f 91       	pop	r20
 b2a:	3f 91       	pop	r19
 b2c:	2f 91       	pop	r18
 b2e:	0f 90       	pop	r0
 b30:	0f be       	out	0x3f, r0	; 63
 b32:	0f 90       	pop	r0
 b34:	1f 90       	pop	r1
 b36:	18 95       	reti

00000b38 <_exit>:
 b38:	f8 94       	cli

00000b3a <__stop_program>:
 b3a:	ff cf       	rjmp	.-2      	; 0xb3a <__stop_program>
