
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000b46  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800092  00800092  00000c0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d47  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1f  00000000  00000000  00002b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee6  00000000  00000000  000037ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  00004694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8b  00000000  00000000  00004b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de8  00000000  00000000  00005597  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000637f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__vector_4>
  14:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__vector_10>
  2c:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3b       	cpi	r26, 0xB3	; 179
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1d 03 	call	0x63a	; 0x63a <main>
  8a:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_APP>:
}

void init_APP(void)
{	
	/* set traffic light pins */
	TRAFFIC_LIGHT_Init(&Traffic_light) ;
  92:	83 e6       	ldi	r24, 0x63	; 99
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <TRAFFIC_LIGHT_Init>
	
	/* set pedestrian sign pins */
	TRAFFIC_LIGHT_Init(&Peds_sign) ;
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <TRAFFIC_LIGHT_Init>
	
	/* init button */
	Button_Init(&PEDs_button) ;
  a2:	86 e6       	ldi	r24, 0x66	; 102
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 4a 02 	call	0x494	; 0x494 <Button_Init>
	
	/* start millis counter / tracker on timer2 */
	Millis_Init() ;
  aa:	0e 94 47 04 	call	0x88e	; 0x88e <Millis_Init>
  ae:	08 95       	ret

000000b0 <APP_normal_mode>:
		break;
	}
}

void APP_normal_mode(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <APP_normal_mode+0x6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <APP_normal_mode+0x8>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	/* get time in ms  */
	millis_t currentTime = Millis_get() ;
  bc:	0e 94 58 04 	call	0x8b0	; 0x8b0 <Millis_get>
  c0:	69 83       	std	Y+1, r22	; 0x01
  c2:	7a 83       	std	Y+2, r23	; 0x02
  c4:	8b 83       	std	Y+3, r24	; 0x03
  c6:	9c 83       	std	Y+4, r25	; 0x04
	
	/*current state counter */
	static uint8_t state_counter = 0;
	
	/*if traffic interval has passed */
	if (currentTime -lastTime >= TRAFFIC_INTERVAL)
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	ab 81       	ldd	r26, Y+3	; 0x03
  ce:	bc 81       	ldd	r27, Y+4	; 0x04
  d0:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <lastTime.1650>
  d4:	50 91 a2 00 	lds	r21, 0x00A2	; 0x8000a2 <lastTime.1650+0x1>
  d8:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <lastTime.1650+0x2>
  dc:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <lastTime.1650+0x3>
  e0:	84 1b       	sub	r24, r20
  e2:	95 0b       	sbc	r25, r21
  e4:	a6 0b       	sbc	r26, r22
  e6:	b7 0b       	sbc	r27, r23
  e8:	88 38       	cpi	r24, 0x88	; 136
  ea:	93 41       	sbci	r25, 0x13	; 19
  ec:	a1 05       	cpc	r26, r1
  ee:	b1 05       	cpc	r27, r1
  f0:	b0 f0       	brcs	.+44     	; 0x11e <APP_normal_mode+0x6e>
	{
		/* increment state counter */
		state_counter++ ;
  f2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <state_counter.1652>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <state_counter.1652>
		
		/*turn off all LEDs */
		TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	83 e6       	ldi	r24, 0x63	; 99
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
		
		/*rest counter*/
		lastTime =currentTime ;
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	ab 81       	ldd	r26, Y+3	; 0x03
 10c:	bc 81       	ldd	r27, Y+4	; 0x04
 10e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <lastTime.1650>
 112:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <lastTime.1650+0x1>
 116:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <lastTime.1650+0x2>
 11a:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <lastTime.1650+0x3>
	}
	
	/* limit state counter to only 4 element */
	state_counter = (state_counter>3)? 0: state_counter ;
 11e:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <state_counter.1652>
 122:	e4 30       	cpi	r30, 0x04	; 4
 124:	08 f0       	brcs	.+2      	; 0x128 <APP_normal_mode+0x78>
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	e0 93 a0 00 	sts	0x00A0, r30	; 0x8000a0 <state_counter.1652>
	
	/* get the next state */
	currentState = normal_seq[state_counter] ;
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ea 58       	subi	r30, 0x8A	; 138
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	80 81       	ld	r24, Z
 134:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <currentState>
	
	/* check on current state and drive the traffic light */
	switch(currentState)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	51 f0       	breq	.+20     	; 0x150 <APP_normal_mode+0xa0>
 13c:	18 f0       	brcs	.+6      	; 0x144 <APP_normal_mode+0x94>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	71 f1       	breq	.+92     	; 0x19e <APP_normal_mode+0xee>
 142:	33 c0       	rjmp	.+102    	; 0x1aa <APP_normal_mode+0xfa>
	{
		case GREEN:
		TRAFFIC_LIGHT_Drive(&Traffic_light,GREEN) ;
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	83 e6       	ldi	r24, 0x63	; 99
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
		break;
 14e:	32 c0       	rjmp	.+100    	; 0x1b4 <APP_normal_mode+0x104>
		case YELLOW:
		if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	9a 81       	ldd	r25, Y+2	; 0x02
 154:	ab 81       	ldd	r26, Y+3	; 0x03
 156:	bc 81       	ldd	r27, Y+4	; 0x04
 158:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <lastTimeYellow.1651>
 15c:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <lastTimeYellow.1651+0x1>
 160:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <lastTimeYellow.1651+0x2>
 164:	70 91 9f 00 	lds	r23, 0x009F	; 0x80009f <lastTimeYellow.1651+0x3>
 168:	84 1b       	sub	r24, r20
 16a:	95 0b       	sbc	r25, r21
 16c:	a6 0b       	sbc	r26, r22
 16e:	b7 0b       	sbc	r27, r23
 170:	8a 3f       	cpi	r24, 0xFA	; 250
 172:	91 05       	cpc	r25, r1
 174:	a1 05       	cpc	r26, r1
 176:	b1 05       	cpc	r27, r1
 178:	e8 f0       	brcs	.+58     	; 0x1b4 <APP_normal_mode+0x104>
		{
			/*toggle yellow led every 0.25 sec*/
			TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	83 e6       	ldi	r24, 0x63	; 99
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
			
			/*set the old counter to be the current counter to begin counting again*/
			lastTimeYellow = currentTime ;
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	ab 81       	ldd	r26, Y+3	; 0x03
 18a:	bc 81       	ldd	r27, Y+4	; 0x04
 18c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <lastTimeYellow.1651>
 190:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <lastTimeYellow.1651+0x1>
 194:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <lastTimeYellow.1651+0x2>
 198:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <lastTimeYellow.1651+0x3>
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <APP_normal_mode+0x104>
		}
		break;
		case RED:
		TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	83 e6       	ldi	r24, 0x63	; 99
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
		break;
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <APP_normal_mode+0x104>
		default:
		TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	83 e6       	ldi	r24, 0x63	; 99
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
		break;
	}
}
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <APP_pedestrian_mode>:

void APP_pedestrian_mode(void)
{
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <APP_pedestrian_mode+0x8>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <APP_pedestrian_mode+0xa>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62

	/* get time in ms  */
	millis_t currentTime = Millis_get() ;
 1d0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <Millis_get>
 1d4:	69 83       	std	Y+1, r22	; 0x01
 1d6:	7a 83       	std	Y+2, r23	; 0x02
 1d8:	8b 83       	std	Y+3, r24	; 0x03
 1da:	9c 83       	std	Y+4, r25	; 0x04
	static uint8_t turnoff_ped_mode = 0 ;
	/* flag to indicate if the mode is terminated */
	uint8_t done = 0 ;
	
	/* if traffic interval has passed */
	if(currentTime-lastTime>=TRAFFIC_INTERVAL)
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	9a 81       	ldd	r25, Y+2	; 0x02
 1e0:	ab 81       	ldd	r26, Y+3	; 0x03
 1e2:	bc 81       	ldd	r27, Y+4	; 0x04
 1e4:	40 91 98 00 	lds	r20, 0x0098	; 0x800098 <lastTime.1662>
 1e8:	50 91 99 00 	lds	r21, 0x0099	; 0x800099 <lastTime.1662+0x1>
 1ec:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <lastTime.1662+0x2>
 1f0:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <lastTime.1662+0x3>
 1f4:	84 1b       	sub	r24, r20
 1f6:	95 0b       	sbc	r25, r21
 1f8:	a6 0b       	sbc	r26, r22
 1fa:	b7 0b       	sbc	r27, r23
 1fc:	88 38       	cpi	r24, 0x88	; 136
 1fe:	93 41       	sbci	r25, 0x13	; 19
 200:	a1 05       	cpc	r26, r1
 202:	b1 05       	cpc	r27, r1
 204:	c8 f1       	brcs	.+114    	; 0x278 <APP_pedestrian_mode+0xb6>
	{
		
		/* increment state counter */
		state_counter++ ;
 206:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <state_counter.1664>
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <state_counter.1664>
		
		/* rest config and switch mode */
		if (turnoff_ped_mode)
 210:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <turnoff_ped_mode.1665>
 214:	88 23       	and	r24, r24
 216:	c1 f0       	breq	.+48     	; 0x248 <APP_pedestrian_mode+0x86>
		{
			/* set the current mode to normal */
			currentMode = normal ;
 218:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <currentMode>
			/*reset */
			turnoff_ped_mode = 0 ;
 21c:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <turnoff_ped_mode.1665>
			lastTime = 0 ;
 220:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <lastTime.1662>
 224:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <lastTime.1662+0x1>
 228:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <lastTime.1662+0x2>
 22c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <lastTime.1662+0x3>
			lastTimeYellow =  0 ;
 230:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
 234:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <__data_end+0x1>
 238:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end+0x2>
 23c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x3>
			state_counter = 0 ;
 240:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <state_counter.1664>
			done = 1 ;
 244:	11 e0       	ldi	r17, 0x01	; 1
 246:	01 c0       	rjmp	.+2      	; 0x24a <APP_pedestrian_mode+0x88>
	static uint8_t state_counter = 0;
	
	/* flag to indicate end of pedestrian mode request */
	static uint8_t turnoff_ped_mode = 0 ;
	/* flag to indicate if the mode is terminated */
	uint8_t done = 0 ;
 248:	10 e0       	ldi	r17, 0x00	; 0
			lastTime = 0 ;
			lastTimeYellow =  0 ;
			state_counter = 0 ;
			done = 1 ;
		}
		TRAFFIC_LIGHT_Drive(&Peds_sign,OFF) ;
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	80 e6       	ldi	r24, 0x60	; 96
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
		TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	83 e6       	ldi	r24, 0x63	; 99
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
		
		/* reset overflow counter */
		lastTime = currentTime ;
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	ab 81       	ldd	r26, Y+3	; 0x03
 264:	bc 81       	ldd	r27, Y+4	; 0x04
 266:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <lastTime.1662>
 26a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <lastTime.1662+0x1>
 26e:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <lastTime.1662+0x2>
 272:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <lastTime.1662+0x3>
 276:	01 c0       	rjmp	.+2      	; 0x27a <APP_pedestrian_mode+0xb8>
	static uint8_t state_counter = 0;
	
	/* flag to indicate end of pedestrian mode request */
	static uint8_t turnoff_ped_mode = 0 ;
	/* flag to indicate if the mode is terminated */
	uint8_t done = 0 ;
 278:	10 e0       	ldi	r17, 0x00	; 0
		TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
		
		/* reset overflow counter */
		lastTime = currentTime ;
	}
	if(!done)
 27a:	11 11       	cpse	r17, r1
 27c:	e2 c0       	rjmp	.+452    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	{
		/* if the cars traffic light was red */
		if (currentState == RED)
 27e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <currentState>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	69 f4       	brne	.+26     	; 0x2a0 <APP_pedestrian_mode+0xde>
		{
			/* set pedestrian sign green led */
			TRAFFIC_LIGHT_Drive(&Peds_sign,GREEN) ;
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
			TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	83 e6       	ldi	r24, 0x63	; 99
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>

			/* wait 5s and turn off pedestrian mode */
			turnoff_ped_mode = 1 ;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <turnoff_ped_mode.1665>
		}
		/* if the traffic light was green or yellow */
		if (currentState == GREEN || currentState ==YELLOW)
 2a0:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <currentState>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <APP_pedestrian_mode+0xe8>
 2a8:	cc c0       	rjmp	.+408    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		{
			
			/* limit state counter to be only 6 states */
			state_counter = (state_counter>5) ? 0 : state_counter ;
 2aa:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <state_counter.1664>
 2ae:	86 30       	cpi	r24, 0x06	; 6
 2b0:	08 f0       	brcs	.+2      	; 0x2b4 <APP_pedestrian_mode+0xf2>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <state_counter.1664>
			
			switch(state_counter)
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	09 f4       	brne	.+2      	; 0x2be <APP_pedestrian_mode+0xfc>
 2bc:	79 c0       	rjmp	.+242    	; 0x3b0 <APP_pedestrian_mode+0x1ee>
 2be:	30 f4       	brcc	.+12     	; 0x2cc <APP_pedestrian_mode+0x10a>
 2c0:	88 23       	and	r24, r24
 2c2:	69 f0       	breq	.+26     	; 0x2de <APP_pedestrian_mode+0x11c>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	09 f4       	brne	.+2      	; 0x2ca <APP_pedestrian_mode+0x108>
 2c8:	46 c0       	rjmp	.+140    	; 0x356 <APP_pedestrian_mode+0x194>
 2ca:	bb c0       	rjmp	.+374    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <APP_pedestrian_mode+0x110>
 2d0:	ab c0       	rjmp	.+342    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 2d2:	08 f4       	brcc	.+2      	; 0x2d6 <APP_pedestrian_mode+0x114>
 2d4:	78 c0       	rjmp	.+240    	; 0x3c6 <APP_pedestrian_mode+0x204>
 2d6:	85 30       	cpi	r24, 0x05	; 5
 2d8:	09 f4       	brne	.+2      	; 0x2dc <APP_pedestrian_mode+0x11a>
 2da:	b0 c0       	rjmp	.+352    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 2dc:	b2 c0       	rjmp	.+356    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			{
				case 0 :
					TRAFFIC_LIGHT_Drive(&Peds_sign,RED) ;
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	80 e6       	ldi	r24, 0x60	; 96
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
					if (currentState == YELLOW)
 2e8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <currentState>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	69 f5       	brne	.+90     	; 0x34a <APP_pedestrian_mode+0x188>
					{
						if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	9a 81       	ldd	r25, Y+2	; 0x02
 2f4:	ab 81       	ldd	r26, Y+3	; 0x03
 2f6:	bc 81       	ldd	r27, Y+4	; 0x04
 2f8:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 2fc:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 300:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
 304:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
 308:	84 1b       	sub	r24, r20
 30a:	95 0b       	sbc	r25, r21
 30c:	a6 0b       	sbc	r26, r22
 30e:	b7 0b       	sbc	r27, r23
 310:	8a 3f       	cpi	r24, 0xFA	; 250
 312:	91 05       	cpc	r25, r1
 314:	a1 05       	cpc	r26, r1
 316:	b1 05       	cpc	r27, r1
 318:	08 f4       	brcc	.+2      	; 0x31c <APP_pedestrian_mode+0x15a>
 31a:	93 c0       	rjmp	.+294    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
						{
							/*toggle yellow led every 0.25 sec*/
							TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	83 e6       	ldi	r24, 0x63	; 99
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
							TRAFFIC_LIGHT_Drive(&Peds_sign,RED) ;
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	80 e6       	ldi	r24, 0x60	; 96
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>

							/*set the old counter to be the current counter to begin counting again*/
							lastTimeYellow = currentTime ;
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	9a 81       	ldd	r25, Y+2	; 0x02
 334:	ab 81       	ldd	r26, Y+3	; 0x03
 336:	bc 81       	ldd	r27, Y+4	; 0x04
 338:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 33c:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 340:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
 344:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
 348:	7c c0       	rjmp	.+248    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>

						}
					}
					else
					{
						TRAFFIC_LIGHT_Drive(&Traffic_light,GREEN) ;
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	83 e6       	ldi	r24, 0x63	; 99
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
 354:	76 c0       	rjmp	.+236    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
					}
					break;
				case 1 :
					if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	9a 81       	ldd	r25, Y+2	; 0x02
 35a:	ab 81       	ldd	r26, Y+3	; 0x03
 35c:	bc 81       	ldd	r27, Y+4	; 0x04
 35e:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 362:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 366:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
 36a:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
 36e:	84 1b       	sub	r24, r20
 370:	95 0b       	sbc	r25, r21
 372:	a6 0b       	sbc	r26, r22
 374:	b7 0b       	sbc	r27, r23
 376:	8a 3f       	cpi	r24, 0xFA	; 250
 378:	91 05       	cpc	r25, r1
 37a:	a1 05       	cpc	r26, r1
 37c:	b1 05       	cpc	r27, r1
 37e:	08 f4       	brcc	.+2      	; 0x382 <APP_pedestrian_mode+0x1c0>
 380:	60 c0       	rjmp	.+192    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
					{
						/*toggle yellow led every 0.25 sec*/
						TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	83 e6       	ldi	r24, 0x63	; 99
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
						TRAFFIC_LIGHT_Drive(&Peds_sign,YELLOW) ;
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	80 e6       	ldi	r24, 0x60	; 96
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
						/*set the old counter to be the current counter to begin counting again*/
						lastTimeYellow = currentTime ;
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	9a 81       	ldd	r25, Y+2	; 0x02
 39a:	ab 81       	ldd	r26, Y+3	; 0x03
 39c:	bc 81       	ldd	r27, Y+4	; 0x04
 39e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 3a2:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 3a6:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
 3aa:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
 3ae:	49 c0       	rjmp	.+146    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
					}
					break;
				case 2 :
					TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 3b0:	62 e0       	ldi	r22, 0x02	; 2
 3b2:	83 e6       	ldi	r24, 0x63	; 99
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
					TRAFFIC_LIGHT_Drive(&Peds_sign,GREEN) ;
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	80 e6       	ldi	r24, 0x60	; 96
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
					break ;
 3c4:	3e c0       	rjmp	.+124    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				case 3 :
					if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ca:	ab 81       	ldd	r26, Y+3	; 0x03
 3cc:	bc 81       	ldd	r27, Y+4	; 0x04
 3ce:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 3d2:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 3d6:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
 3da:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
 3de:	84 1b       	sub	r24, r20
 3e0:	95 0b       	sbc	r25, r21
 3e2:	a6 0b       	sbc	r26, r22
 3e4:	b7 0b       	sbc	r27, r23
 3e6:	8a 3f       	cpi	r24, 0xFA	; 250
 3e8:	91 05       	cpc	r25, r1
 3ea:	a1 05       	cpc	r26, r1
 3ec:	b1 05       	cpc	r27, r1
 3ee:	b0 f0       	brcs	.+44     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
					{
						/* toggle yellow led every 0.25 sec */
						TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	83 e6       	ldi	r24, 0x63	; 99
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
						TRAFFIC_LIGHT_Drive(&Peds_sign,YELLOW) ;
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	80 e6       	ldi	r24, 0x60	; 96
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
						/* set the old counter to be the current counter to begin counting again */
						lastTimeYellow = currentTime ;
 404:	89 81       	ldd	r24, Y+1	; 0x01
 406:	9a 81       	ldd	r25, Y+2	; 0x02
 408:	ab 81       	ldd	r26, Y+3	; 0x03
 40a:	bc 81       	ldd	r27, Y+4	; 0x04
 40c:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 410:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 414:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
 418:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
					}
					TRAFFIC_LIGHT_Drive(&Peds_sign,GREEN) ;
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	80 e6       	ldi	r24, 0x60	; 96
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
					break;
 426:	0d c0       	rjmp	.+26     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				case 4 :
					TRAFFIC_LIGHT_Drive(&Peds_sign,RED) ;
 428:	62 e0       	ldi	r22, 0x02	; 2
 42a:	80 e6       	ldi	r24, 0x60	; 96
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
					TRAFFIC_LIGHT_Drive(&Traffic_light,GREEN) ;
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	83 e6       	ldi	r24, 0x63	; 99
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>
				case 5 :
					turnoff_ped_mode = 1 ;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <turnoff_ped_mode.1665>
					break;
			}
		}
	}
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	08 95       	ret

00000452 <startApp>:

/* get only the short click of the PEDs button */
static inline void DoButton(void)
{
	/*get button state */
	Button_readState(&PEDs_button) ;
 452:	86 e6       	ldi	r24, 0x66	; 102
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 57 02 	call	0x4ae	; 0x4ae <Button_readState>

	/*if the button was pressed a short press */
	if(PEDs_button.buttonPressState == ShortPress)
 45a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <PEDs_button+0x1>
 45e:	83 30       	cpi	r24, 0x03	; 3
 460:	61 f4       	brne	.+24     	; 0x47a <startApp+0x28>
	{
		/* if the button is pressed single press */
		if (currentMode==normal)
 462:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <currentMode>
 466:	81 11       	cpse	r24, r1
 468:	08 c0       	rjmp	.+16     	; 0x47a <startApp+0x28>
		{
			/* change the current mode to pedestrian mode */
			currentMode = ped ;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <currentMode>
			TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
 470:	63 e0       	ldi	r22, 0x03	; 3
 472:	83 e6       	ldi	r24, 0x63	; 99
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 f6 02 	call	0x5ec	; 0x5ec <TRAFFIC_LIGHT_Drive>

void startApp(void)
{	
	/* get the system current mode from the button */
	DoButton() ; 
	switch(currentMode)
 47a:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <currentMode>
 47e:	88 23       	and	r24, r24
 480:	19 f0       	breq	.+6      	; 0x488 <startApp+0x36>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	21 f0       	breq	.+8      	; 0x48e <startApp+0x3c>
 486:	08 95       	ret
	{
	case normal : 
		APP_normal_mode() ;
 488:	0e 94 58 00 	call	0xb0	; 0xb0 <APP_normal_mode>
		break;
 48c:	08 95       	ret
	case  ped: 
		APP_pedestrian_mode() ;
 48e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <APP_pedestrian_mode>
 492:	08 95       	ret

00000494 <Button_Init>:
#include "../../MCAL/DIO/DIO_INT.h"
#include "../../MCAL/MILLIS/MILLIS_INT.h"
#include "Button_INT.h"

void Button_Init(ST_Button_t * button)
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	ec 01       	movw	r28, r24
	DIO_setPinDirection(button->buttonPin,INPUT) ;
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	88 81       	ld	r24, Y
 49e:	0e 94 22 03 	call	0x644	; 0x644 <DIO_setPinDirection>
	button->buttonPressState =NoAction ;
 4a2:	19 82       	std	Y+1, r1	; 0x01
	button->lastButtonState = LOW ;
 4a4:	1a 82       	std	Y+2, r1	; 0x02
	button-> isLongPress = 0 ;
 4a6:	1b 82       	std	Y+3, r1	; 0x03
}
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <Button_readState>:

void Button_readState(ST_Button_t * button) 
{
 4ae:	cf 92       	push	r12
 4b0:	df 92       	push	r13
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	00 d0       	rcall	.+0      	; 0x4c0 <Button_readState+0x12>
 4c0:	00 d0       	rcall	.+0      	; 0x4c2 <Button_readState+0x14>
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	8c 01       	movw	r16, r24
	/* Time since the millis timer started */
	millis_t currentMillis = Millis_get() ;
 4c8:	0e 94 58 04 	call	0x8b0	; 0x8b0 <Millis_get>
 4cc:	69 83       	std	Y+1, r22	; 0x01
 4ce:	7a 83       	std	Y+2, r23	; 0x02
 4d0:	8b 83       	std	Y+3, r24	; 0x03
 4d2:	9c 83       	std	Y+4, r25	; 0x04
	
	button->buttonPressState =NoAction ;
 4d4:	f8 01       	movw	r30, r16
 4d6:	11 82       	std	Z+1, r1	; 0x01
	/* Check for debouncing  */
	if(currentMillis - button->lastReadingTime > successiveReadingInterval) {
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	9a 81       	ldd	r25, Y+2	; 0x02
 4dc:	ab 81       	ldd	r26, Y+3	; 0x03
 4de:	bc 81       	ldd	r27, Y+4	; 0x04
 4e0:	40 85       	ldd	r20, Z+8	; 0x08
 4e2:	51 85       	ldd	r21, Z+9	; 0x09
 4e4:	62 85       	ldd	r22, Z+10	; 0x0a
 4e6:	73 85       	ldd	r23, Z+11	; 0x0b
 4e8:	84 1b       	sub	r24, r20
 4ea:	95 0b       	sbc	r25, r21
 4ec:	a6 0b       	sbc	r26, r22
 4ee:	b7 0b       	sbc	r27, r23
 4f0:	c3 97       	sbiw	r24, 0x33	; 51
 4f2:	a1 05       	cpc	r26, r1
 4f4:	b1 05       	cpc	r27, r1
 4f6:	08 f4       	brcc	.+2      	; 0x4fa <Button_readState+0x4c>
 4f8:	5a c0       	rjmp	.+180    	; 0x5ae <Button_readState+0x100>
		
		/*get the current button reading */
		uint8_t buttonState = DIO_getPinValue(button->buttonPin);
 4fa:	80 81       	ld	r24, Z
 4fc:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_getPinValue>

		/*if the button was pressed for the first time and the button wasn't pressed for a long time */
		if (buttonState == HIGH && button->lastButtonState  == LOW && !button->isLongPress) {
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	91 f4       	brne	.+36     	; 0x528 <Button_readState+0x7a>
 504:	f8 01       	movw	r30, r16
 506:	92 81       	ldd	r25, Z+2	; 0x02
 508:	91 11       	cpse	r25, r1
 50a:	0e c0       	rjmp	.+28     	; 0x528 <Button_readState+0x7a>
 50c:	93 81       	ldd	r25, Z+3	; 0x03
 50e:	91 11       	cpse	r25, r1
 510:	0b c0       	rjmp	.+22     	; 0x528 <Button_readState+0x7a>
			button->buttonPressTime = currentMillis;
 512:	49 81       	ldd	r20, Y+1	; 0x01
 514:	5a 81       	ldd	r21, Y+2	; 0x02
 516:	6b 81       	ldd	r22, Y+3	; 0x03
 518:	7c 81       	ldd	r23, Y+4	; 0x04
 51a:	44 83       	std	Z+4, r20	; 0x04
 51c:	55 83       	std	Z+5, r21	; 0x05
 51e:	66 83       	std	Z+6, r22	; 0x06
 520:	77 83       	std	Z+7, r23	; 0x07
			button->lastButtonState  = HIGH;
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	92 83       	std	Z+2, r25	; 0x02
			button->buttonPressState = Pressing ;
 526:	91 83       	std	Z+1, r25	; 0x01
		}

		// get how long the button has been pressed
		button->buttonPressedTime = currentMillis - button->buttonPressTime;
 528:	49 81       	ldd	r20, Y+1	; 0x01
 52a:	5a 81       	ldd	r21, Y+2	; 0x02
 52c:	6b 81       	ldd	r22, Y+3	; 0x03
 52e:	7c 81       	ldd	r23, Y+4	; 0x04
 530:	f8 01       	movw	r30, r16
 532:	c4 80       	ldd	r12, Z+4	; 0x04
 534:	d5 80       	ldd	r13, Z+5	; 0x05
 536:	e6 80       	ldd	r14, Z+6	; 0x06
 538:	f7 80       	ldd	r15, Z+7	; 0x07
 53a:	4c 19       	sub	r20, r12
 53c:	5d 09       	sbc	r21, r13
 53e:	6e 09       	sbc	r22, r14
 540:	7f 09       	sbc	r23, r15
 542:	44 87       	std	Z+12, r20	; 0x0c
 544:	55 87       	std	Z+13, r21	; 0x0d
 546:	66 87       	std	Z+14, r22	; 0x0e
 548:	77 87       	std	Z+15, r23	; 0x0f

		/* if the button is pressed and button pressed time >= the long press interval (1 s) */
		if (buttonState == HIGH && !button->isLongPress && button->buttonPressedTime >= isLongPressInterval) {
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	89 f4       	brne	.+34     	; 0x570 <Button_readState+0xc2>
 54e:	93 81       	ldd	r25, Z+3	; 0x03
 550:	91 11       	cpse	r25, r1
 552:	0e c0       	rjmp	.+28     	; 0x570 <Button_readState+0xc2>
 554:	44 85       	ldd	r20, Z+12	; 0x0c
 556:	55 85       	ldd	r21, Z+13	; 0x0d
 558:	66 85       	ldd	r22, Z+14	; 0x0e
 55a:	77 85       	ldd	r23, Z+15	; 0x0f
 55c:	48 3e       	cpi	r20, 0xE8	; 232
 55e:	53 40       	sbci	r21, 0x03	; 3
 560:	61 05       	cpc	r22, r1
 562:	71 05       	cpc	r23, r1
 564:	28 f0       	brcs	.+10     	; 0x570 <Button_readState+0xc2>
			/* set the button long press flag */
			button->isLongPress = 1;
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	f8 01       	movw	r30, r16
 56a:	93 83       	std	Z+3, r25	; 0x03
			/* set button pressed state to be a long press*/
			button->buttonPressState = LongPress;
 56c:	94 e0       	ldi	r25, 0x04	; 4
 56e:	91 83       	std	Z+1, r25	; 0x01
		}
		
		/* if the button current state was low and last was high the button is released */
		if (buttonState == LOW && button->lastButtonState  == HIGH) {
 570:	81 11       	cpse	r24, r1
 572:	14 c0       	rjmp	.+40     	; 0x59c <Button_readState+0xee>
 574:	f8 01       	movw	r30, r16
 576:	82 81       	ldd	r24, Z+2	; 0x02
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	81 f4       	brne	.+32     	; 0x59c <Button_readState+0xee>
			
			/*rest last button state */
			button->lastButtonState  = LOW;
 57c:	12 82       	std	Z+2, r1	; 0x02
			
			/*rest long press flag */
			button->isLongPress = 0;
 57e:	13 82       	std	Z+3, r1	; 0x03
			
			/* set button pressed state to be released */
			button->buttonPressState = Released;
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	81 83       	std	Z+1, r24	; 0x01
			/*if the button is released before the long press interval then the button press is a short press */
			if (button->buttonPressedTime < isLongPressInterval) {
 584:	84 85       	ldd	r24, Z+12	; 0x0c
 586:	95 85       	ldd	r25, Z+13	; 0x0d
 588:	a6 85       	ldd	r26, Z+14	; 0x0e
 58a:	b7 85       	ldd	r27, Z+15	; 0x0f
 58c:	88 3e       	cpi	r24, 0xE8	; 232
 58e:	93 40       	sbci	r25, 0x03	; 3
 590:	a1 05       	cpc	r26, r1
 592:	b1 05       	cpc	r27, r1
 594:	18 f4       	brcc	.+6      	; 0x59c <Button_readState+0xee>
				button->buttonPressState = ShortPress;
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	f8 01       	movw	r30, r16
 59a:	81 83       	std	Z+1, r24	; 0x01
			}
		}
		
		/*set the last time to the current time to get to the next iteration */
		button->lastReadingTime = currentMillis;
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	9a 81       	ldd	r25, Y+2	; 0x02
 5a0:	ab 81       	ldd	r26, Y+3	; 0x03
 5a2:	bc 81       	ldd	r27, Y+4	; 0x04
 5a4:	f8 01       	movw	r30, r16
 5a6:	80 87       	std	Z+8, r24	; 0x08
 5a8:	91 87       	std	Z+9, r25	; 0x09
 5aa:	a2 87       	std	Z+10, r26	; 0x0a
 5ac:	b3 87       	std	Z+11, r27	; 0x0b
	}

}
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	0f 90       	pop	r0
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	ef 90       	pop	r14
 5c2:	df 90       	pop	r13
 5c4:	cf 90       	pop	r12
 5c6:	08 95       	ret

000005c8 <TRAFFIC_LIGHT_Init>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_INT.h"
#include "traffic_light_INT.h"

void TRAFFIC_LIGHT_Init(ST_TrafficLight_t *traffic_light)
{
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	ec 01       	movw	r28, r24
	/* Set traffic light pins to be output */
	DIO_setPinDirection(traffic_light->GREEN_Pin,OUTPUT) ; 
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	88 81       	ld	r24, Y
 5d2:	0e 94 22 03 	call	0x644	; 0x644 <DIO_setPinDirection>
	DIO_setPinDirection(traffic_light->YELLOW_Pin,OUTPUT) ;
 5d6:	61 e0       	ldi	r22, 0x01	; 1
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	0e 94 22 03 	call	0x644	; 0x644 <DIO_setPinDirection>
	DIO_setPinDirection(traffic_light->RED_Pin,OUTPUT) ;
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	8a 81       	ldd	r24, Y+2	; 0x02
 5e2:	0e 94 22 03 	call	0x644	; 0x644 <DIO_setPinDirection>
}
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <TRAFFIC_LIGHT_Drive>:

void TRAFFIC_LIGHT_Drive(ST_TrafficLight_t * trafficLight , EN_LightState_t state) 
{
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	ec 01       	movw	r28, r24
	switch(state)
 5f2:	61 30       	cpi	r22, 0x01	; 1
 5f4:	49 f0       	breq	.+18     	; 0x608 <TRAFFIC_LIGHT_Drive+0x1c>
 5f6:	18 f0       	brcs	.+6      	; 0x5fe <TRAFFIC_LIGHT_Drive+0x12>
 5f8:	62 30       	cpi	r22, 0x02	; 2
 5fa:	59 f0       	breq	.+22     	; 0x612 <TRAFFIC_LIGHT_Drive+0x26>
 5fc:	0f c0       	rjmp	.+30     	; 0x61c <TRAFFIC_LIGHT_Drive+0x30>
	{
	case GREEN:
		/* turn only green led */
		DIO_setPinValue(trafficLight->GREEN_Pin,HIGH) ; 
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	88 81       	ld	r24, Y
 602:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_setPinValue>
		
		break;
 606:	16 c0       	rjmp	.+44     	; 0x634 <TRAFFIC_LIGHT_Drive+0x48>
	case YELLOW:
		/* Toggle only yellow led */
		DIO_setPinValue(trafficLight->YELLOW_Pin,TOGGLE) ;
 608:	62 e0       	ldi	r22, 0x02	; 2
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_setPinValue>
		break;
 610:	11 c0       	rjmp	.+34     	; 0x634 <TRAFFIC_LIGHT_Drive+0x48>
	case RED:
		/* turn only red led */
		DIO_setPinValue(trafficLight->RED_Pin,HIGH) ;
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_setPinValue>
		break;
 61a:	0c c0       	rjmp	.+24     	; 0x634 <TRAFFIC_LIGHT_Drive+0x48>
	
	default:
		/* turn off all  */
		DIO_setPinValue(trafficLight->GREEN_Pin,LOW) ;
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	88 81       	ld	r24, Y
 620:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_setPinValue>
		DIO_setPinValue(trafficLight->YELLOW_Pin,LOW) ;
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_setPinValue>
		DIO_setPinValue(trafficLight->RED_Pin,LOW) ;
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	8a 81       	ldd	r24, Y+2	; 0x02
 630:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_setPinValue>
		break;
	}

}
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <main>:
#include "APP/APP.h"

int main(void)
{
	/*init all modules used in app*/
	init_APP() ;
 63a:	0e 94 49 00 	call	0x92	; 0x92 <init_APP>
	
    while (1) 
    {
		/* run the app */
		startApp();
 63e:	0e 94 29 02 	call	0x452	; 0x452 <startApp>
 642:	fd cf       	rjmp	.-6      	; 0x63e <main+0x4>

00000644 <DIO_setPinDirection>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 644:	88 30       	cpi	r24, 0x08	; 8
 646:	70 f0       	brcs	.+28     	; 0x664 <DIO_setPinDirection+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 648:	28 ef       	ldi	r18, 0xF8	; 248
 64a:	28 0f       	add	r18, r24
 64c:	28 30       	cpi	r18, 0x08	; 8
 64e:	58 f0       	brcs	.+22     	; 0x666 <DIO_setPinDirection+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 650:	20 ef       	ldi	r18, 0xF0	; 240
 652:	28 0f       	add	r18, r24
 654:	28 30       	cpi	r18, 0x08	; 8
 656:	38 f0       	brcs	.+14     	; 0x666 <DIO_setPinDirection+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 658:	28 ee       	ldi	r18, 0xE8	; 232
 65a:	28 0f       	add	r18, r24
 65c:	28 30       	cpi	r18, 0x08	; 8
 65e:	18 f0       	brcs	.+6      	; 0x666 <DIO_setPinDirection+0x22>
	return NC ; 
 660:	2f ef       	ldi	r18, 0xFF	; 255
 662:	01 c0       	rjmp	.+2      	; 0x666 <DIO_setPinDirection+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 664:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 666:	88 30       	cpi	r24, 0x08	; 8
 668:	68 f0       	brcs	.+26     	; 0x684 <DIO_setPinDirection+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 66a:	98 ef       	ldi	r25, 0xF8	; 248
 66c:	98 0f       	add	r25, r24
 66e:	98 30       	cpi	r25, 0x08	; 8
 670:	58 f0       	brcs	.+22     	; 0x688 <DIO_setPinDirection+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 672:	90 ef       	ldi	r25, 0xF0	; 240
 674:	98 0f       	add	r25, r24
 676:	98 30       	cpi	r25, 0x08	; 8
 678:	48 f0       	brcs	.+18     	; 0x68c <DIO_setPinDirection+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 67a:	88 51       	subi	r24, 0x18	; 24
 67c:	88 30       	cpi	r24, 0x08	; 8
 67e:	40 f4       	brcc	.+16     	; 0x690 <DIO_setPinDirection+0x4c>
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	07 c0       	rjmp	.+14     	; 0x692 <DIO_setPinDirection+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	05 c0       	rjmp	.+10     	; 0x692 <DIO_setPinDirection+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	03 c0       	rjmp	.+6      	; 0x692 <DIO_setPinDirection+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	01 c0       	rjmp	.+2      	; 0x692 <DIO_setPinDirection+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 690:	8f ef       	ldi	r24, 0xFF	; 255
{
	
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[port][1]) ;
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	fc 01       	movw	r30, r24
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	df 01       	movw	r26, r30
 69c:	a8 0f       	add	r26, r24
 69e:	b9 1f       	adc	r27, r25
 6a0:	aa 0f       	add	r26, r26
 6a2:	bb 1f       	adc	r27, r27
 6a4:	a6 58       	subi	r26, 0x86	; 134
 6a6:	bf 4f       	sbci	r27, 0xFF	; 255
 6a8:	12 96       	adiw	r26, 0x02	; 2
 6aa:	0d 90       	ld	r0, X+
 6ac:	bc 91       	ld	r27, X
 6ae:	a0 2d       	mov	r26, r0
	/* select PORTX Register */ 
	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 6b0:	e8 0f       	add	r30, r24
 6b2:	f9 1f       	adc	r31, r25
 6b4:	ee 0f       	add	r30, r30
 6b6:	ff 1f       	adc	r31, r31
 6b8:	e6 58       	subi	r30, 0x86	; 134
 6ba:	ff 4f       	sbci	r31, 0xFF	; 255
 6bc:	01 90       	ld	r0, Z+
 6be:	f0 81       	ld	r31, Z
 6c0:	e0 2d       	mov	r30, r0
    switch (pinDirection)
 6c2:	61 30       	cpi	r22, 0x01	; 1
 6c4:	81 f0       	breq	.+32     	; 0x6e6 <DIO_setPinDirection+0xa2>
 6c6:	18 f0       	brcs	.+6      	; 0x6ce <DIO_setPinDirection+0x8a>
 6c8:	62 30       	cpi	r22, 0x02	; 2
 6ca:	c1 f0       	breq	.+48     	; 0x6fc <DIO_setPinDirection+0xb8>
 6cc:	08 95       	ret
    {
    case INPUT:
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 6ce:	3c 91       	ld	r19, X
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_setPinDirection+0x96>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	2a 95       	dec	r18
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_setPinDirection+0x92>
 6de:	80 95       	com	r24
 6e0:	83 23       	and	r24, r19
 6e2:	8c 93       	st	X, r24
        break;
 6e4:	08 95       	ret
    case OUTPUT:
        /* set PORTX to 1 to set as output */
        setBit((*DDRX),pin) ;
 6e6:	3c 91       	ld	r19, X
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_setPinDirection+0xae>
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	2a 95       	dec	r18
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_setPinDirection+0xaa>
 6f6:	83 2b       	or	r24, r19
 6f8:	8c 93       	st	X, r24
        break;
 6fa:	08 95       	ret
    case INPUT_PULLUP:
        /* set PORTX to 1 to active the pull up resistor */
        setBit((*PORTX),pin) ;  
 6fc:	30 81       	ld	r19, Z
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_setPinDirection+0xc4>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	2a 95       	dec	r18
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_setPinDirection+0xc0>
 70c:	93 2f       	mov	r25, r19
 70e:	98 2b       	or	r25, r24
 710:	90 83       	st	Z, r25
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 712:	9c 91       	ld	r25, X
 714:	80 95       	com	r24
 716:	89 23       	and	r24, r25
 718:	8c 93       	st	X, r24
 71a:	08 95       	ret

0000071c <DIO_setPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 71c:	88 30       	cpi	r24, 0x08	; 8
 71e:	70 f0       	brcs	.+28     	; 0x73c <DIO_setPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 720:	28 ef       	ldi	r18, 0xF8	; 248
 722:	28 0f       	add	r18, r24
 724:	28 30       	cpi	r18, 0x08	; 8
 726:	58 f0       	brcs	.+22     	; 0x73e <DIO_setPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 728:	20 ef       	ldi	r18, 0xF0	; 240
 72a:	28 0f       	add	r18, r24
 72c:	28 30       	cpi	r18, 0x08	; 8
 72e:	38 f0       	brcs	.+14     	; 0x73e <DIO_setPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 730:	28 ee       	ldi	r18, 0xE8	; 232
 732:	28 0f       	add	r18, r24
 734:	28 30       	cpi	r18, 0x08	; 8
 736:	18 f0       	brcs	.+6      	; 0x73e <DIO_setPinValue+0x22>
	return NC ; 
 738:	2f ef       	ldi	r18, 0xFF	; 255
 73a:	01 c0       	rjmp	.+2      	; 0x73e <DIO_setPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 73c:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 73e:	88 30       	cpi	r24, 0x08	; 8
 740:	68 f0       	brcs	.+26     	; 0x75c <DIO_setPinValue+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 742:	98 ef       	ldi	r25, 0xF8	; 248
 744:	98 0f       	add	r25, r24
 746:	98 30       	cpi	r25, 0x08	; 8
 748:	58 f0       	brcs	.+22     	; 0x760 <DIO_setPinValue+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 74a:	90 ef       	ldi	r25, 0xF0	; 240
 74c:	98 0f       	add	r25, r24
 74e:	98 30       	cpi	r25, 0x08	; 8
 750:	48 f0       	brcs	.+18     	; 0x764 <DIO_setPinValue+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 752:	88 51       	subi	r24, 0x18	; 24
 754:	88 30       	cpi	r24, 0x08	; 8
 756:	40 f4       	brcc	.+16     	; 0x768 <DIO_setPinValue+0x4c>
 758:	83 e0       	ldi	r24, 0x03	; 3
 75a:	07 c0       	rjmp	.+14     	; 0x76a <DIO_setPinValue+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	05 c0       	rjmp	.+10     	; 0x76a <DIO_setPinValue+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	03 c0       	rjmp	.+6      	; 0x76a <DIO_setPinValue+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	01 c0       	rjmp	.+2      	; 0x76a <DIO_setPinValue+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 768:	8f ef       	ldi	r24, 0xFF	; 255
void DIO_setPinValue(EN_PinNumber_t pinNum, EN_Values_t value) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PORTX Register */
   	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	fc 01       	movw	r30, r24
 76e:	ee 0f       	add	r30, r30
 770:	ff 1f       	adc	r31, r31
 772:	e8 0f       	add	r30, r24
 774:	f9 1f       	adc	r31, r25
 776:	ee 0f       	add	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	e6 58       	subi	r30, 0x86	; 134
 77c:	ff 4f       	sbci	r31, 0xFF	; 255
 77e:	01 90       	ld	r0, Z+
 780:	f0 81       	ld	r31, Z
 782:	e0 2d       	mov	r30, r0
    switch (value)
 784:	61 30       	cpi	r22, 0x01	; 1
 786:	81 f0       	breq	.+32     	; 0x7a8 <DIO_setPinValue+0x8c>
 788:	18 f0       	brcs	.+6      	; 0x790 <DIO_setPinValue+0x74>
 78a:	62 30       	cpi	r22, 0x02	; 2
 78c:	c1 f0       	breq	.+48     	; 0x7be <DIO_setPinValue+0xa2>
 78e:	08 95       	ret
    {
        
    case LOW:
        /* set the selected pin to LOW */
       clearBit((*PORTX),pin) ;
 790:	30 81       	ld	r19, Z
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_setPinValue+0x80>
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	2a 95       	dec	r18
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_setPinValue+0x7c>
 7a0:	80 95       	com	r24
 7a2:	83 23       	and	r24, r19
 7a4:	80 83       	st	Z, r24
        break;    
 7a6:	08 95       	ret
    case HIGH:
        /* set the selected pin to HIGH */
        setBit((*PORTX),pin) ;
 7a8:	30 81       	ld	r19, Z
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_setPinValue+0x98>
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	2a 95       	dec	r18
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_setPinValue+0x94>
 7b8:	83 2b       	or	r24, r19
 7ba:	80 83       	st	Z, r24
        break;
 7bc:	08 95       	ret
    case TOGGLE:
        /*TOGGLE the selected pin */
        toggleBit((*PORTX),pin) ;
 7be:	30 81       	ld	r19, Z
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_setPinValue+0xae>
 7c6:	88 0f       	add	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	2a 95       	dec	r18
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_setPinValue+0xaa>
 7ce:	83 27       	eor	r24, r19
 7d0:	80 83       	st	Z, r24
 7d2:	08 95       	ret

000007d4 <DIO_getPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 7d4:	88 30       	cpi	r24, 0x08	; 8
 7d6:	70 f0       	brcs	.+28     	; 0x7f4 <DIO_getPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 7d8:	28 ef       	ldi	r18, 0xF8	; 248
 7da:	28 0f       	add	r18, r24
 7dc:	28 30       	cpi	r18, 0x08	; 8
 7de:	58 f0       	brcs	.+22     	; 0x7f6 <DIO_getPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 7e0:	20 ef       	ldi	r18, 0xF0	; 240
 7e2:	28 0f       	add	r18, r24
 7e4:	28 30       	cpi	r18, 0x08	; 8
 7e6:	38 f0       	brcs	.+14     	; 0x7f6 <DIO_getPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 7e8:	28 ee       	ldi	r18, 0xE8	; 232
 7ea:	28 0f       	add	r18, r24
 7ec:	28 30       	cpi	r18, 0x08	; 8
 7ee:	18 f0       	brcs	.+6      	; 0x7f6 <DIO_getPinValue+0x22>
	return NC ; 
 7f0:	2f ef       	ldi	r18, 0xFF	; 255
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <DIO_getPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 7f4:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 7f6:	88 30       	cpi	r24, 0x08	; 8
 7f8:	68 f0       	brcs	.+26     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 7fa:	98 ef       	ldi	r25, 0xF8	; 248
 7fc:	98 0f       	add	r25, r24
 7fe:	98 30       	cpi	r25, 0x08	; 8
 800:	58 f0       	brcs	.+22     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 802:	90 ef       	ldi	r25, 0xF0	; 240
 804:	98 0f       	add	r25, r24
 806:	98 30       	cpi	r25, 0x08	; 8
 808:	48 f0       	brcs	.+18     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 80a:	88 51       	subi	r24, 0x18	; 24
 80c:	88 30       	cpi	r24, 0x08	; 8
 80e:	40 f4       	brcc	.+16     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 810:	83 e0       	ldi	r24, 0x03	; 3
 812:	07 c0       	rjmp	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	05 c0       	rjmp	.+10     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	03 c0       	rjmp	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 81c:	82 e0       	ldi	r24, 0x02	; 2
 81e:	01 c0       	rjmp	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 820:	8f ef       	ldi	r24, 0xFF	; 255
uint8_t DIO_getPinValue(EN_PinNumber_t pinNum) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	fc 01       	movw	r30, r24
 826:	ee 0f       	add	r30, r30
 828:	ff 1f       	adc	r31, r31
 82a:	e8 0f       	add	r30, r24
 82c:	f9 1f       	adc	r31, r25
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	e6 58       	subi	r30, 0x86	; 134
 834:	ff 4f       	sbci	r31, 0xFF	; 255
 836:	04 80       	ldd	r0, Z+4	; 0x04
 838:	f5 81       	ldd	r31, Z+5	; 0x05
 83a:	e0 2d       	mov	r30, r0
   /* return pin value */
    return getBit((*PINX) ,pin);
 83c:	80 81       	ld	r24, Z
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	95 95       	asr	r25
 844:	87 95       	ror	r24
 846:	2a 95       	dec	r18
 848:	e2 f7       	brpl	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
}
 84a:	81 70       	andi	r24, 0x01	; 1
 84c:	08 95       	ret

0000084e <GIE_Enable>:

#include "GIE_INT.h"
#include "GIE_REG.h"


inline void GIE_Enable(void)  {SREG |=  (1<<SREG_I) ;}
 84e:	8f b7       	in	r24, 0x3f	; 63
 850:	80 68       	ori	r24, 0x80	; 128
 852:	8f bf       	out	0x3f, r24	; 63
 854:	08 95       	ret

00000856 <GIE_Disable>:

 856:	8f b7       	in	r24, 0x3f	; 63
 858:	8f 77       	andi	r24, 0x7F	; 127
 85a:	8f bf       	out	0x3f, r24	; 63
 85c:	08 95       	ret

0000085e <Millis_INC>:

/* each timer overflow(timer ISR) */ 
static void Millis_INC(void)
{
	/* set timer preload again */
	Timer_SetOVFRegister(Selected_Timer,131);
 85e:	63 e8       	ldi	r22, 0x83	; 131
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Timer_SetOVFRegister>
	/*increment the number of milliseconds passed */
	millis++ ; 	
 866:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <millis>
 86a:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <millis+0x1>
 86e:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <millis+0x2>
 872:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <millis+0x3>
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	a1 1d       	adc	r26, r1
 87a:	b1 1d       	adc	r27, r1
 87c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <millis>
 880:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <millis+0x1>
 884:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <millis+0x2>
 888:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <millis+0x3>
 88c:	08 95       	ret

0000088e <Millis_Init>:
}

void Millis_Init(void) 
{
	/* global interrupts enable*/
	GIE_Enable() ; 
 88e:	0e 94 27 04 	call	0x84e	; 0x84e <GIE_Enable>
	/* set timer overflow callback (what happen when timer overflows */
	Timer_SetOVF_Callback(Selected_Timer,&Millis_INC) ; 
 892:	6f e2       	ldi	r22, 0x2F	; 47
 894:	74 e0       	ldi	r23, 0x04	; 4
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Timer_SetOVF_Callback>
	
	/* set timer overflow register to  131 to achieve 1 ms in the next overflow*/
	Timer_SetOVFRegister(Selected_Timer,131) ;
 89c:	63 e8       	ldi	r22, 0x83	; 131
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Timer_SetOVFRegister>
	
	/* set timer prescaller and wave mode to be normal */
	Timer_Init(Selected_Timer,prescaler8,Normal) ;
 8a4:	40 e0       	ldi	r20, 0x00	; 0
 8a6:	62 e0       	ldi	r22, 0x02	; 2
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	0e 94 c9 04 	call	0x992	; 0x992 <Timer_Init>
 8ae:	08 95       	ret

000008b0 <Millis_get>:
}

millis_t Millis_get(void) 
{
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	00 d0       	rcall	.+0      	; 0x8b6 <Millis_get+0x6>
 8b6:	00 d0       	rcall	.+0      	; 0x8b8 <Millis_get+0x8>
 8b8:	cd b7       	in	r28, 0x3d	; 61
 8ba:	de b7       	in	r29, 0x3e	; 62
	/*disable all interrupts */ 
	GIE_Disable() ; 
 8bc:	0e 94 2b 04 	call	0x856	; 0x856 <GIE_Disable>
	millis_t m = millis ; 
 8c0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <millis>
 8c4:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <millis+0x1>
 8c8:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <millis+0x2>
 8cc:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <millis+0x3>
 8d0:	89 83       	std	Y+1, r24	; 0x01
 8d2:	9a 83       	std	Y+2, r25	; 0x02
 8d4:	ab 83       	std	Y+3, r26	; 0x03
 8d6:	bc 83       	std	Y+4, r27	; 0x04
	/* global interrupts enable */
	GIE_Enable() ;
 8d8:	0e 94 27 04 	call	0x84e	; 0x84e <GIE_Enable>
	return m ;
 8dc:	69 81       	ldd	r22, Y+1	; 0x01
 8de:	7a 81       	ldd	r23, Y+2	; 0x02
 8e0:	8b 81       	ldd	r24, Y+3	; 0x03
 8e2:	9c 81       	ldd	r25, Y+4	; 0x04
 8e4:	0f 90       	pop	r0
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	08 95       	ret

000008f2 <Timer_SetPrescaller>:
	{
	case TIMER0:
		setBit(TIFR,TIFR_OCF0) ;
		break;
	case TIMER2:
		 setBit(TIFR,TIFR_OCF2) ;
 8f2:	88 23       	and	r24, r24
 8f4:	19 f0       	breq	.+6      	; 0x8fc <Timer_SetPrescaller+0xa>
 8f6:	81 30       	cpi	r24, 0x01	; 1
 8f8:	41 f0       	breq	.+16     	; 0x90a <Timer_SetPrescaller+0x18>
 8fa:	08 95       	ret
 8fc:	83 b7       	in	r24, 0x33	; 51
 8fe:	88 7f       	andi	r24, 0xF8	; 248
 900:	83 bf       	out	0x33, r24	; 51
 902:	83 b7       	in	r24, 0x33	; 51
 904:	68 2b       	or	r22, r24
 906:	63 bf       	out	0x33, r22	; 51
 908:	08 95       	ret
 90a:	85 b5       	in	r24, 0x25	; 37
 90c:	88 7f       	andi	r24, 0xF8	; 248
 90e:	68 2b       	or	r22, r24
 910:	65 bd       	out	0x25, r22	; 37
 912:	08 95       	ret

00000914 <Timer_SetWaveMode>:
 914:	88 23       	and	r24, r24
 916:	19 f0       	breq	.+6      	; 0x91e <Timer_SetWaveMode+0xa>
 918:	81 30       	cpi	r24, 0x01	; 1
 91a:	f9 f0       	breq	.+62     	; 0x95a <Timer_SetWaveMode+0x46>
 91c:	08 95       	ret
 91e:	83 b7       	in	r24, 0x33	; 51
 920:	87 7b       	andi	r24, 0xB7	; 183
 922:	83 bf       	out	0x33, r24	; 51
 924:	83 b7       	in	r24, 0x33	; 51
 926:	a6 2f       	mov	r26, r22
 928:	a1 70       	andi	r26, 0x01	; 1
 92a:	b0 e0       	ldi	r27, 0x00	; 0
 92c:	00 24       	eor	r0, r0
 92e:	b6 95       	lsr	r27
 930:	a7 95       	ror	r26
 932:	07 94       	ror	r0
 934:	b6 95       	lsr	r27
 936:	a7 95       	ror	r26
 938:	07 94       	ror	r0
 93a:	ba 2f       	mov	r27, r26
 93c:	a0 2d       	mov	r26, r0
 93e:	61 fb       	bst	r22, 1
 940:	44 27       	eor	r20, r20
 942:	40 f9       	bld	r20, 0
 944:	50 e0       	ldi	r21, 0x00	; 0
 946:	44 0f       	add	r20, r20
 948:	55 1f       	adc	r21, r21
 94a:	44 0f       	add	r20, r20
 94c:	55 1f       	adc	r21, r21
 94e:	44 0f       	add	r20, r20
 950:	55 1f       	adc	r21, r21
 952:	4a 2b       	or	r20, r26
 954:	48 2b       	or	r20, r24
 956:	43 bf       	out	0x33, r20	; 51
 958:	08 95       	ret
 95a:	85 b5       	in	r24, 0x25	; 37
 95c:	87 7b       	andi	r24, 0xB7	; 183
 95e:	e6 2f       	mov	r30, r22
 960:	e1 70       	andi	r30, 0x01	; 1
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	00 24       	eor	r0, r0
 966:	f6 95       	lsr	r31
 968:	e7 95       	ror	r30
 96a:	07 94       	ror	r0
 96c:	f6 95       	lsr	r31
 96e:	e7 95       	ror	r30
 970:	07 94       	ror	r0
 972:	fe 2f       	mov	r31, r30
 974:	e0 2d       	mov	r30, r0
 976:	61 fb       	bst	r22, 1
 978:	22 27       	eor	r18, r18
 97a:	20 f9       	bld	r18, 0
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	22 0f       	add	r18, r18
 980:	33 1f       	adc	r19, r19
 982:	22 0f       	add	r18, r18
 984:	33 1f       	adc	r19, r19
 986:	22 0f       	add	r18, r18
 988:	33 1f       	adc	r19, r19
 98a:	2e 2b       	or	r18, r30
 98c:	28 2b       	or	r18, r24
 98e:	25 bd       	out	0x25, r18	; 37
 990:	08 95       	ret

00000992 <Timer_Init>:
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	c8 2f       	mov	r28, r24
 998:	d4 2f       	mov	r29, r20
 99a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <Timer_SetPrescaller>
 99e:	6d 2f       	mov	r22, r29
 9a0:	8c 2f       	mov	r24, r28
 9a2:	0e 94 8a 04 	call	0x914	; 0x914 <Timer_SetWaveMode>
 9a6:	df 91       	pop	r29
 9a8:	cf 91       	pop	r28
 9aa:	08 95       	ret

000009ac <Timer_SetOVF_Callback>:
 9ac:	61 15       	cp	r22, r1
 9ae:	71 05       	cpc	r23, r1
 9b0:	d1 f0       	breq	.+52     	; 0x9e6 <Timer_SetOVF_Callback+0x3a>
 9b2:	88 23       	and	r24, r24
 9b4:	19 f0       	breq	.+6      	; 0x9bc <Timer_SetOVF_Callback+0x10>
 9b6:	81 30       	cpi	r24, 0x01	; 1
 9b8:	61 f0       	breq	.+24     	; 0x9d2 <Timer_SetOVF_Callback+0x26>
 9ba:	08 95       	ret
 9bc:	89 b7       	in	r24, 0x39	; 57
 9be:	81 60       	ori	r24, 0x01	; 1
 9c0:	89 bf       	out	0x39, r24	; 57
 9c2:	89 b7       	in	r24, 0x39	; 57
 9c4:	8d 7f       	andi	r24, 0xFD	; 253
 9c6:	89 bf       	out	0x39, r24	; 57
 9c8:	70 93 af 00 	sts	0x00AF, r23	; 0x8000af <TIMERS_NORMAL_ISR+0x1>
 9cc:	60 93 ae 00 	sts	0x00AE, r22	; 0x8000ae <TIMERS_NORMAL_ISR>
 9d0:	08 95       	ret
 9d2:	89 b7       	in	r24, 0x39	; 57
 9d4:	80 64       	ori	r24, 0x40	; 64
 9d6:	89 bf       	out	0x39, r24	; 57
 9d8:	89 b7       	in	r24, 0x39	; 57
 9da:	8f 77       	andi	r24, 0x7F	; 127
 9dc:	89 bf       	out	0x39, r24	; 57
 9de:	70 93 b1 00 	sts	0x00B1, r23	; 0x8000b1 <TIMERS_NORMAL_ISR+0x3>
 9e2:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <TIMERS_NORMAL_ISR+0x2>
 9e6:	08 95       	ret

000009e8 <Timer_SetOVFRegister>:
 9e8:	88 23       	and	r24, r24
 9ea:	19 f0       	breq	.+6      	; 0x9f2 <Timer_SetOVFRegister+0xa>
 9ec:	81 30       	cpi	r24, 0x01	; 1
 9ee:	19 f0       	breq	.+6      	; 0x9f6 <Timer_SetOVFRegister+0xe>
 9f0:	08 95       	ret
 9f2:	62 bf       	out	0x32, r22	; 50
 9f4:	08 95       	ret
 9f6:	64 bd       	out	0x24, r22	; 36
 9f8:	08 95       	ret

000009fa <__vector_11>:
}

/* Timer0 Overflow ISR */
void __vector_11 (void) __attribute__ ((signal,used)) ; 
void __vector_11 (void) 
{
 9fa:	1f 92       	push	r1
 9fc:	0f 92       	push	r0
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	0f 92       	push	r0
 a02:	11 24       	eor	r1, r1
 a04:	2f 93       	push	r18
 a06:	3f 93       	push	r19
 a08:	4f 93       	push	r20
 a0a:	5f 93       	push	r21
 a0c:	6f 93       	push	r22
 a0e:	7f 93       	push	r23
 a10:	8f 93       	push	r24
 a12:	9f 93       	push	r25
 a14:	af 93       	push	r26
 a16:	bf 93       	push	r27
 a18:	ef 93       	push	r30
 a1a:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[0] != ((void *)0))
 a1c:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <TIMERS_NORMAL_ISR>
 a20:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <TIMERS_NORMAL_ISR+0x1>
 a24:	30 97       	sbiw	r30, 0x00	; 0
 a26:	09 f0       	breq	.+2      	; 0xa2a <__vector_11+0x30>
    {
        TIMERS_NORMAL_ISR[0]() ;
 a28:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 a2a:	ff 91       	pop	r31
 a2c:	ef 91       	pop	r30
 a2e:	bf 91       	pop	r27
 a30:	af 91       	pop	r26
 a32:	9f 91       	pop	r25
 a34:	8f 91       	pop	r24
 a36:	7f 91       	pop	r23
 a38:	6f 91       	pop	r22
 a3a:	5f 91       	pop	r21
 a3c:	4f 91       	pop	r20
 a3e:	3f 91       	pop	r19
 a40:	2f 91       	pop	r18
 a42:	0f 90       	pop	r0
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	0f 90       	pop	r0
 a48:	1f 90       	pop	r1
 a4a:	18 95       	reti

00000a4c <__vector_10>:

/* Timer0 CompareMatch ISR */
void __vector_10 (void) __attribute__ ((signal,used)) ; 
void __vector_10 (void) 
{
 a4c:	1f 92       	push	r1
 a4e:	0f 92       	push	r0
 a50:	0f b6       	in	r0, 0x3f	; 63
 a52:	0f 92       	push	r0
 a54:	11 24       	eor	r1, r1
 a56:	2f 93       	push	r18
 a58:	3f 93       	push	r19
 a5a:	4f 93       	push	r20
 a5c:	5f 93       	push	r21
 a5e:	6f 93       	push	r22
 a60:	7f 93       	push	r23
 a62:	8f 93       	push	r24
 a64:	9f 93       	push	r25
 a66:	af 93       	push	r26
 a68:	bf 93       	push	r27
 a6a:	ef 93       	push	r30
 a6c:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[0] != ((void *)0))
 a6e:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <TIMERS_CTC_ISR>
 a72:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <TIMERS_CTC_ISR+0x1>
 a76:	30 97       	sbiw	r30, 0x00	; 0
 a78:	09 f0       	breq	.+2      	; 0xa7c <__vector_10+0x30>
    {
        TIMERS_CTC_ISR[0]() ;
 a7a:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 a7c:	ff 91       	pop	r31
 a7e:	ef 91       	pop	r30
 a80:	bf 91       	pop	r27
 a82:	af 91       	pop	r26
 a84:	9f 91       	pop	r25
 a86:	8f 91       	pop	r24
 a88:	7f 91       	pop	r23
 a8a:	6f 91       	pop	r22
 a8c:	5f 91       	pop	r21
 a8e:	4f 91       	pop	r20
 a90:	3f 91       	pop	r19
 a92:	2f 91       	pop	r18
 a94:	0f 90       	pop	r0
 a96:	0f be       	out	0x3f, r0	; 63
 a98:	0f 90       	pop	r0
 a9a:	1f 90       	pop	r1
 a9c:	18 95       	reti

00000a9e <__vector_5>:

/* Timer2 Overflow ISR */
void __vector_5 (void) __attribute__ ((signal,used)) ; 
void __vector_5 (void) 
{
 a9e:	1f 92       	push	r1
 aa0:	0f 92       	push	r0
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	0f 92       	push	r0
 aa6:	11 24       	eor	r1, r1
 aa8:	2f 93       	push	r18
 aaa:	3f 93       	push	r19
 aac:	4f 93       	push	r20
 aae:	5f 93       	push	r21
 ab0:	6f 93       	push	r22
 ab2:	7f 93       	push	r23
 ab4:	8f 93       	push	r24
 ab6:	9f 93       	push	r25
 ab8:	af 93       	push	r26
 aba:	bf 93       	push	r27
 abc:	ef 93       	push	r30
 abe:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[1] != ((void *)0))
 ac0:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <TIMERS_NORMAL_ISR+0x2>
 ac4:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <TIMERS_NORMAL_ISR+0x3>
 ac8:	30 97       	sbiw	r30, 0x00	; 0
 aca:	09 f0       	breq	.+2      	; 0xace <__vector_5+0x30>
    {
        TIMERS_NORMAL_ISR[1]() ;
 acc:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 ace:	ff 91       	pop	r31
 ad0:	ef 91       	pop	r30
 ad2:	bf 91       	pop	r27
 ad4:	af 91       	pop	r26
 ad6:	9f 91       	pop	r25
 ad8:	8f 91       	pop	r24
 ada:	7f 91       	pop	r23
 adc:	6f 91       	pop	r22
 ade:	5f 91       	pop	r21
 ae0:	4f 91       	pop	r20
 ae2:	3f 91       	pop	r19
 ae4:	2f 91       	pop	r18
 ae6:	0f 90       	pop	r0
 ae8:	0f be       	out	0x3f, r0	; 63
 aea:	0f 90       	pop	r0
 aec:	1f 90       	pop	r1
 aee:	18 95       	reti

00000af0 <__vector_4>:

/* Timer2 CompareMatch ISR */
void __vector_4 (void) __attribute__ ((signal,used)) ; 
void __vector_4 (void) 
{
 af0:	1f 92       	push	r1
 af2:	0f 92       	push	r0
 af4:	0f b6       	in	r0, 0x3f	; 63
 af6:	0f 92       	push	r0
 af8:	11 24       	eor	r1, r1
 afa:	2f 93       	push	r18
 afc:	3f 93       	push	r19
 afe:	4f 93       	push	r20
 b00:	5f 93       	push	r21
 b02:	6f 93       	push	r22
 b04:	7f 93       	push	r23
 b06:	8f 93       	push	r24
 b08:	9f 93       	push	r25
 b0a:	af 93       	push	r26
 b0c:	bf 93       	push	r27
 b0e:	ef 93       	push	r30
 b10:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[1] != ((void *)0))
 b12:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <TIMERS_CTC_ISR+0x2>
 b16:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <TIMERS_CTC_ISR+0x3>
 b1a:	30 97       	sbiw	r30, 0x00	; 0
 b1c:	09 f0       	breq	.+2      	; 0xb20 <__vector_4+0x30>
    {
        TIMERS_CTC_ISR[1]() ;
 b1e:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 b20:	ff 91       	pop	r31
 b22:	ef 91       	pop	r30
 b24:	bf 91       	pop	r27
 b26:	af 91       	pop	r26
 b28:	9f 91       	pop	r25
 b2a:	8f 91       	pop	r24
 b2c:	7f 91       	pop	r23
 b2e:	6f 91       	pop	r22
 b30:	5f 91       	pop	r21
 b32:	4f 91       	pop	r20
 b34:	3f 91       	pop	r19
 b36:	2f 91       	pop	r18
 b38:	0f 90       	pop	r0
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	0f 90       	pop	r0
 b3e:	1f 90       	pop	r1
 b40:	18 95       	reti

00000b42 <_exit>:
 b42:	f8 94       	cli

00000b44 <__stop_program>:
 b44:	ff cf       	rjmp	.-2      	; 0xb44 <__stop_program>
