
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000ba6  00000c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800092  00800092  00000c6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d68  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1f  00000000  00000000  00002c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f17  00000000  00000000  0000382f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  00004748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a75  00000000  00000000  00004bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de8  00000000  00000000  00005635  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000641d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__vector_4>
  14:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 56 05 	jmp	0xaac	; 0xaac <__vector_10>
  2c:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3b       	cpi	r26, 0xB3	; 179
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4d 03 	call	0x69a	; 0x69a <main>
  8a:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_APP>:
}

void init_APP(void)
{	
	/* set traffic light pins */
	TRAFFIC_LIGHT_Init(&Traffic_light) ;
  92:	83 e6       	ldi	r24, 0x63	; 99
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 14 03 	call	0x628	; 0x628 <TRAFFIC_LIGHT_Init>
	
	/* set pedestrian sign pins */
	TRAFFIC_LIGHT_Init(&Peds_sign) ;
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 14 03 	call	0x628	; 0x628 <TRAFFIC_LIGHT_Init>
	
	/* init button */
	Button_Init(&PEDs_button) ;
  a2:	86 e6       	ldi	r24, 0x66	; 102
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Button_Init>
	
	/* start millis counter / tracker on timer2 */
	Millis_Init() ;
  aa:	0e 94 77 04 	call	0x8ee	; 0x8ee <Millis_Init>
  ae:	08 95       	ret

000000b0 <APP_normal_mode>:
		break;
	}
}

void APP_normal_mode(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <APP_normal_mode+0x6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <APP_normal_mode+0x8>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	/* get time in ms  */
	millis_t currentTime = Millis_get() ;
  bc:	0e 94 88 04 	call	0x910	; 0x910 <Millis_get>
  c0:	69 83       	std	Y+1, r22	; 0x01
  c2:	7a 83       	std	Y+2, r23	; 0x02
  c4:	8b 83       	std	Y+3, r24	; 0x03
  c6:	9c 83       	std	Y+4, r25	; 0x04
	
	/*current state counter */
	static uint8_t state_counter = 0;
	
	/*if traffic interval has passed */
	if (currentTime -lastTime >= TRAFFIC_INTERVAL)
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	ab 81       	ldd	r26, Y+3	; 0x03
  ce:	bc 81       	ldd	r27, Y+4	; 0x04
  d0:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <lastTime.1650>
  d4:	50 91 a2 00 	lds	r21, 0x00A2	; 0x8000a2 <lastTime.1650+0x1>
  d8:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <lastTime.1650+0x2>
  dc:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <lastTime.1650+0x3>
  e0:	84 1b       	sub	r24, r20
  e2:	95 0b       	sbc	r25, r21
  e4:	a6 0b       	sbc	r26, r22
  e6:	b7 0b       	sbc	r27, r23
  e8:	88 38       	cpi	r24, 0x88	; 136
  ea:	93 41       	sbci	r25, 0x13	; 19
  ec:	a1 05       	cpc	r26, r1
  ee:	b1 05       	cpc	r27, r1
  f0:	b0 f0       	brcs	.+44     	; 0x11e <APP_normal_mode+0x6e>
	{
		/* increment state counter */
		state_counter++ ;
  f2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <state_counter.1652>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <state_counter.1652>
		
		/*turn off all LEDs */
		TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	83 e6       	ldi	r24, 0x63	; 99
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
		
		/*rest counter*/
		lastTime =currentTime ;
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	ab 81       	ldd	r26, Y+3	; 0x03
 10c:	bc 81       	ldd	r27, Y+4	; 0x04
 10e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <lastTime.1650>
 112:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <lastTime.1650+0x1>
 116:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <lastTime.1650+0x2>
 11a:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <lastTime.1650+0x3>
	}
	
	/* limit state counter to only 4 element */
	state_counter = (state_counter>3)? 0: state_counter ;
 11e:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <state_counter.1652>
 122:	e4 30       	cpi	r30, 0x04	; 4
 124:	08 f0       	brcs	.+2      	; 0x128 <APP_normal_mode+0x78>
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	e0 93 a0 00 	sts	0x00A0, r30	; 0x8000a0 <state_counter.1652>
	
	/* get the next state */
	currentState = normal_seq[state_counter] ;
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ea 58       	subi	r30, 0x8A	; 138
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	80 81       	ld	r24, Z
 134:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <currentState>
	
	/* check on current state and drive the traffic light */
	switch(currentState)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	51 f0       	breq	.+20     	; 0x150 <APP_normal_mode+0xa0>
 13c:	18 f0       	brcs	.+6      	; 0x144 <APP_normal_mode+0x94>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	71 f1       	breq	.+92     	; 0x19e <APP_normal_mode+0xee>
 142:	33 c0       	rjmp	.+102    	; 0x1aa <APP_normal_mode+0xfa>
	{
		case GREEN:
			TRAFFIC_LIGHT_Drive(&Traffic_light,GREEN) ;
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	83 e6       	ldi	r24, 0x63	; 99
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
		break;
 14e:	32 c0       	rjmp	.+100    	; 0x1b4 <APP_normal_mode+0x104>
		case YELLOW:
			if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	9a 81       	ldd	r25, Y+2	; 0x02
 154:	ab 81       	ldd	r26, Y+3	; 0x03
 156:	bc 81       	ldd	r27, Y+4	; 0x04
 158:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <lastTimeYellow.1651>
 15c:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <lastTimeYellow.1651+0x1>
 160:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <lastTimeYellow.1651+0x2>
 164:	70 91 9f 00 	lds	r23, 0x009F	; 0x80009f <lastTimeYellow.1651+0x3>
 168:	84 1b       	sub	r24, r20
 16a:	95 0b       	sbc	r25, r21
 16c:	a6 0b       	sbc	r26, r22
 16e:	b7 0b       	sbc	r27, r23
 170:	8a 3f       	cpi	r24, 0xFA	; 250
 172:	91 05       	cpc	r25, r1
 174:	a1 05       	cpc	r26, r1
 176:	b1 05       	cpc	r27, r1
 178:	e8 f0       	brcs	.+58     	; 0x1b4 <APP_normal_mode+0x104>
			{
				/*toggle yellow led every 0.25 sec*/
				TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	83 e6       	ldi	r24, 0x63	; 99
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
			
				/*set the old counter to be the current counter to begin counting again*/
				lastTimeYellow = currentTime ;
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	ab 81       	ldd	r26, Y+3	; 0x03
 18a:	bc 81       	ldd	r27, Y+4	; 0x04
 18c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <lastTimeYellow.1651>
 190:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <lastTimeYellow.1651+0x1>
 194:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <lastTimeYellow.1651+0x2>
 198:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <lastTimeYellow.1651+0x3>
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <APP_normal_mode+0x104>
			}
		break;
		case RED:
		TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	83 e6       	ldi	r24, 0x63	; 99
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
		break;
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <APP_normal_mode+0x104>
		default:
		TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	83 e6       	ldi	r24, 0x63	; 99
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
		break;
	}
}
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <APP_pedestrian_mode>:

void APP_pedestrian_mode(void)
{
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <APP_pedestrian_mode+0x8>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <APP_pedestrian_mode+0xa>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62

	/* get time in ms  */
	millis_t currentTime = Millis_get() ;
 1d0:	0e 94 88 04 	call	0x910	; 0x910 <Millis_get>
 1d4:	69 83       	std	Y+1, r22	; 0x01
 1d6:	7a 83       	std	Y+2, r23	; 0x02
 1d8:	8b 83       	std	Y+3, r24	; 0x03
 1da:	9c 83       	std	Y+4, r25	; 0x04
	static uint8_t turnoff_ped_mode = 0 ;
	/* flag to indicate if the mode is terminated */
	uint8_t done = 0 ;
	
	/* if traffic interval has passed */
	if(currentTime-lastTime>=TRAFFIC_INTERVAL)
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	9a 81       	ldd	r25, Y+2	; 0x02
 1e0:	ab 81       	ldd	r26, Y+3	; 0x03
 1e2:	bc 81       	ldd	r27, Y+4	; 0x04
 1e4:	40 91 98 00 	lds	r20, 0x0098	; 0x800098 <lastTime.1662>
 1e8:	50 91 99 00 	lds	r21, 0x0099	; 0x800099 <lastTime.1662+0x1>
 1ec:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <lastTime.1662+0x2>
 1f0:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <lastTime.1662+0x3>
 1f4:	84 1b       	sub	r24, r20
 1f6:	95 0b       	sbc	r25, r21
 1f8:	a6 0b       	sbc	r26, r22
 1fa:	b7 0b       	sbc	r27, r23
 1fc:	88 38       	cpi	r24, 0x88	; 136
 1fe:	93 41       	sbci	r25, 0x13	; 19
 200:	a1 05       	cpc	r26, r1
 202:	b1 05       	cpc	r27, r1
 204:	c8 f1       	brcs	.+114    	; 0x278 <APP_pedestrian_mode+0xb6>
	{
		
		/* increment state counter */
		state_counter++ ;
 206:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <state_counter.1664>
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <state_counter.1664>
		
		/* rest config and switch mode */
		if (turnoff_ped_mode)
 210:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <turnoff_ped_mode.1665>
 214:	88 23       	and	r24, r24
 216:	c1 f0       	breq	.+48     	; 0x248 <APP_pedestrian_mode+0x86>
		{
			/* set the current mode to normal */
			currentMode = normal ;
 218:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <currentMode>
			/*reset */
			turnoff_ped_mode = 0 ;
 21c:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <turnoff_ped_mode.1665>
			lastTime = 0 ;
 220:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <lastTime.1662>
 224:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <lastTime.1662+0x1>
 228:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <lastTime.1662+0x2>
 22c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <lastTime.1662+0x3>
			lastTimeYellow =  0 ;
 230:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
 234:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <__data_end+0x1>
 238:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end+0x2>
 23c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x3>
			state_counter = 0 ;
 240:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <state_counter.1664>
			done = 1 ;
 244:	11 e0       	ldi	r17, 0x01	; 1
 246:	01 c0       	rjmp	.+2      	; 0x24a <APP_pedestrian_mode+0x88>
	static uint8_t state_counter = 0;
	
	/* flag to indicate end of pedestrian mode request */
	static uint8_t turnoff_ped_mode = 0 ;
	/* flag to indicate if the mode is terminated */
	uint8_t done = 0 ;
 248:	10 e0       	ldi	r17, 0x00	; 0
			lastTime = 0 ;
			lastTimeYellow =  0 ;
			state_counter = 0 ;
			done = 1 ;
		}
		TRAFFIC_LIGHT_Drive(&Peds_sign,OFF) ;
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	80 e6       	ldi	r24, 0x60	; 96
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
		TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	83 e6       	ldi	r24, 0x63	; 99
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
		
		/* reset overflow counter */
		lastTime = currentTime ;
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	ab 81       	ldd	r26, Y+3	; 0x03
 264:	bc 81       	ldd	r27, Y+4	; 0x04
 266:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <lastTime.1662>
 26a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <lastTime.1662+0x1>
 26e:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <lastTime.1662+0x2>
 272:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <lastTime.1662+0x3>
 276:	01 c0       	rjmp	.+2      	; 0x27a <APP_pedestrian_mode+0xb8>
	static uint8_t state_counter = 0;
	
	/* flag to indicate end of pedestrian mode request */
	static uint8_t turnoff_ped_mode = 0 ;
	/* flag to indicate if the mode is terminated */
	uint8_t done = 0 ;
 278:	10 e0       	ldi	r17, 0x00	; 0
		TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
		
		/* reset overflow counter */
		lastTime = currentTime ;
	}
	if(!done)
 27a:	11 11       	cpse	r17, r1
 27c:	12 c1       	rjmp	.+548    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	{
		/* if the cars traffic light was red */
		if (currentState == RED)
 27e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <currentState>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	e9 f5       	brne	.+122    	; 0x300 <APP_pedestrian_mode+0x13e>
		{
			TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	83 e6       	ldi	r24, 0x63	; 99
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
			switch(state_counter)
 290:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <state_counter.1664>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	59 f1       	breq	.+86     	; 0x2ee <APP_pedestrian_mode+0x12c>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	79 f1       	breq	.+94     	; 0x2fa <APP_pedestrian_mode+0x138>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	81 f5       	brne	.+96     	; 0x300 <APP_pedestrian_mode+0x13e>
			{

			case 1 : 
				if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	9a 81       	ldd	r25, Y+2	; 0x02
 2a4:	ab 81       	ldd	r26, Y+3	; 0x03
 2a6:	bc 81       	ldd	r27, Y+4	; 0x04
 2a8:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 2ac:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 2b0:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
 2b4:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
 2b8:	84 1b       	sub	r24, r20
 2ba:	95 0b       	sbc	r25, r21
 2bc:	a6 0b       	sbc	r26, r22
 2be:	b7 0b       	sbc	r27, r23
 2c0:	8a 3f       	cpi	r24, 0xFA	; 250
 2c2:	91 05       	cpc	r25, r1
 2c4:	a1 05       	cpc	r26, r1
 2c6:	b1 05       	cpc	r27, r1
 2c8:	d8 f0       	brcs	.+54     	; 0x300 <APP_pedestrian_mode+0x13e>
				{
					/*toggle yellow led every 0.25 sec*/
					TRAFFIC_LIGHT_Drive(&Peds_sign,YELLOW) ;
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	80 e6       	ldi	r24, 0x60	; 96
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>

					/*set the old counter to be the current counter to begin counting again*/
					lastTimeYellow = currentTime ;
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	9a 81       	ldd	r25, Y+2	; 0x02
 2d8:	ab 81       	ldd	r26, Y+3	; 0x03
 2da:	bc 81       	ldd	r27, Y+4	; 0x04
 2dc:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 2e0:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 2e4:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
 2e8:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
 2ec:	09 c0       	rjmp	.+18     	; 0x300 <APP_pedestrian_mode+0x13e>
				}
				break;
			case 2 : 
				TRAFFIC_LIGHT_Drive(&Peds_sign,GREEN) ;
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	80 e6       	ldi	r24, 0x60	; 96
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
				break;
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <APP_pedestrian_mode+0x13e>
			case 3:
				turnoff_ped_mode = 1 ; 
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <turnoff_ped_mode.1665>
				break;
			}
		}
		/* if the traffic light was green or yellow */
		if (currentState == GREEN || currentState ==YELLOW)
 300:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <currentState>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	08 f0       	brcs	.+2      	; 0x30a <APP_pedestrian_mode+0x148>
 308:	cc c0       	rjmp	.+408    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		{
			
			/* limit state counter to be only 6 states */
			state_counter = (state_counter>5) ? 0 : state_counter ;
 30a:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <state_counter.1664>
 30e:	86 30       	cpi	r24, 0x06	; 6
 310:	08 f0       	brcs	.+2      	; 0x314 <APP_pedestrian_mode+0x152>
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <state_counter.1664>
			
			switch(state_counter)
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	09 f4       	brne	.+2      	; 0x31e <APP_pedestrian_mode+0x15c>
 31c:	79 c0       	rjmp	.+242    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 31e:	30 f4       	brcc	.+12     	; 0x32c <APP_pedestrian_mode+0x16a>
 320:	88 23       	and	r24, r24
 322:	69 f0       	breq	.+26     	; 0x33e <APP_pedestrian_mode+0x17c>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	09 f4       	brne	.+2      	; 0x32a <APP_pedestrian_mode+0x168>
 328:	46 c0       	rjmp	.+140    	; 0x3b6 <APP_pedestrian_mode+0x1f4>
 32a:	bb c0       	rjmp	.+374    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	09 f4       	brne	.+2      	; 0x332 <APP_pedestrian_mode+0x170>
 330:	ab c0       	rjmp	.+342    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 332:	08 f4       	brcc	.+2      	; 0x336 <APP_pedestrian_mode+0x174>
 334:	78 c0       	rjmp	.+240    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 336:	85 30       	cpi	r24, 0x05	; 5
 338:	09 f4       	brne	.+2      	; 0x33c <APP_pedestrian_mode+0x17a>
 33a:	b0 c0       	rjmp	.+352    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 33c:	b2 c0       	rjmp	.+356    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			{
				case 0 :
					TRAFFIC_LIGHT_Drive(&Peds_sign,RED) ;
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	80 e6       	ldi	r24, 0x60	; 96
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
					if (currentState == YELLOW)
 348:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <currentState>
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	69 f5       	brne	.+90     	; 0x3aa <APP_pedestrian_mode+0x1e8>
					{
						if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	9a 81       	ldd	r25, Y+2	; 0x02
 354:	ab 81       	ldd	r26, Y+3	; 0x03
 356:	bc 81       	ldd	r27, Y+4	; 0x04
 358:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 35c:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 360:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
 364:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
 368:	84 1b       	sub	r24, r20
 36a:	95 0b       	sbc	r25, r21
 36c:	a6 0b       	sbc	r26, r22
 36e:	b7 0b       	sbc	r27, r23
 370:	8a 3f       	cpi	r24, 0xFA	; 250
 372:	91 05       	cpc	r25, r1
 374:	a1 05       	cpc	r26, r1
 376:	b1 05       	cpc	r27, r1
 378:	08 f4       	brcc	.+2      	; 0x37c <APP_pedestrian_mode+0x1ba>
 37a:	93 c0       	rjmp	.+294    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
						{
							/*toggle yellow led every 0.25 sec*/
							TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	83 e6       	ldi	r24, 0x63	; 99
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
							TRAFFIC_LIGHT_Drive(&Peds_sign,RED) ;
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	80 e6       	ldi	r24, 0x60	; 96
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>

							/*set the old counter to be the current counter to begin counting again*/
							lastTimeYellow = currentTime ;
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	9a 81       	ldd	r25, Y+2	; 0x02
 394:	ab 81       	ldd	r26, Y+3	; 0x03
 396:	bc 81       	ldd	r27, Y+4	; 0x04
 398:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 39c:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 3a0:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
 3a4:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
 3a8:	7c c0       	rjmp	.+248    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>

						}
					}
					else
					{
						TRAFFIC_LIGHT_Drive(&Traffic_light,GREEN) ;
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	83 e6       	ldi	r24, 0x63	; 99
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
 3b4:	76 c0       	rjmp	.+236    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
					}
					break;
				case 1 :
					if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ba:	ab 81       	ldd	r26, Y+3	; 0x03
 3bc:	bc 81       	ldd	r27, Y+4	; 0x04
 3be:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 3c2:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 3c6:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
 3ca:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
 3ce:	84 1b       	sub	r24, r20
 3d0:	95 0b       	sbc	r25, r21
 3d2:	a6 0b       	sbc	r26, r22
 3d4:	b7 0b       	sbc	r27, r23
 3d6:	8a 3f       	cpi	r24, 0xFA	; 250
 3d8:	91 05       	cpc	r25, r1
 3da:	a1 05       	cpc	r26, r1
 3dc:	b1 05       	cpc	r27, r1
 3de:	08 f4       	brcc	.+2      	; 0x3e2 <APP_pedestrian_mode+0x220>
 3e0:	60 c0       	rjmp	.+192    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
					{
						/*toggle yellow led every 0.25 sec*/
						TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	83 e6       	ldi	r24, 0x63	; 99
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
						TRAFFIC_LIGHT_Drive(&Peds_sign,YELLOW) ;
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	80 e6       	ldi	r24, 0x60	; 96
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
						/*set the old counter to be the current counter to begin counting again*/
						lastTimeYellow = currentTime ;
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	9a 81       	ldd	r25, Y+2	; 0x02
 3fa:	ab 81       	ldd	r26, Y+3	; 0x03
 3fc:	bc 81       	ldd	r27, Y+4	; 0x04
 3fe:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 402:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 406:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
 40a:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
 40e:	49 c0       	rjmp	.+146    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
					}
					break;
				case 2 :
					TRAFFIC_LIGHT_Drive(&Traffic_light,RED) ;
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	83 e6       	ldi	r24, 0x63	; 99
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
					TRAFFIC_LIGHT_Drive(&Peds_sign,GREEN) ;
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	80 e6       	ldi	r24, 0x60	; 96
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
					break ;
 424:	3e c0       	rjmp	.+124    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
				case 3 :
					if((currentTime-lastTimeYellow)>=YELLOW_LIGHT_BLINKING_INTERVAL)
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	9a 81       	ldd	r25, Y+2	; 0x02
 42a:	ab 81       	ldd	r26, Y+3	; 0x03
 42c:	bc 81       	ldd	r27, Y+4	; 0x04
 42e:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 432:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
 436:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
 43a:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
 43e:	84 1b       	sub	r24, r20
 440:	95 0b       	sbc	r25, r21
 442:	a6 0b       	sbc	r26, r22
 444:	b7 0b       	sbc	r27, r23
 446:	8a 3f       	cpi	r24, 0xFA	; 250
 448:	91 05       	cpc	r25, r1
 44a:	a1 05       	cpc	r26, r1
 44c:	b1 05       	cpc	r27, r1
 44e:	b0 f0       	brcs	.+44     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
					{
						/* toggle yellow led every 0.25 sec */
						TRAFFIC_LIGHT_Drive(&Traffic_light,YELLOW) ;
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	83 e6       	ldi	r24, 0x63	; 99
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
						TRAFFIC_LIGHT_Drive(&Peds_sign,YELLOW) ;
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	80 e6       	ldi	r24, 0x60	; 96
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
						/* set the old counter to be the current counter to begin counting again */
						lastTimeYellow = currentTime ;
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	9a 81       	ldd	r25, Y+2	; 0x02
 468:	ab 81       	ldd	r26, Y+3	; 0x03
 46a:	bc 81       	ldd	r27, Y+4	; 0x04
 46c:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
 470:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
 474:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
 478:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
					}
					TRAFFIC_LIGHT_Drive(&Peds_sign,GREEN) ;
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	80 e6       	ldi	r24, 0x60	; 96
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
					break;
 486:	0d c0       	rjmp	.+26     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
				case 4 :
					TRAFFIC_LIGHT_Drive(&Peds_sign,RED) ;
 488:	62 e0       	ldi	r22, 0x02	; 2
 48a:	80 e6       	ldi	r24, 0x60	; 96
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
					TRAFFIC_LIGHT_Drive(&Traffic_light,GREEN) ;
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	83 e6       	ldi	r24, 0x63	; 99
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>
				case 5 :
					turnoff_ped_mode = 1 ;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <turnoff_ped_mode.1665>
					break;
			}
		}
	}
	
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	1f 91       	pop	r17
 4b0:	08 95       	ret

000004b2 <startApp>:

/* get only the short click of the PEDs button */
static inline void DoButton(void)
{
	/*get button state */
	Button_readState(&PEDs_button) ;
 4b2:	86 e6       	ldi	r24, 0x66	; 102
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 87 02 	call	0x50e	; 0x50e <Button_readState>

	/*if the button was pressed a short press */
	if(PEDs_button.buttonPressState == ShortPress)
 4ba:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <PEDs_button+0x1>
 4be:	83 30       	cpi	r24, 0x03	; 3
 4c0:	61 f4       	brne	.+24     	; 0x4da <startApp+0x28>
	{
		/* if the button is pressed single press */
		if (currentMode==normal)
 4c2:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <currentMode>
 4c6:	81 11       	cpse	r24, r1
 4c8:	08 c0       	rjmp	.+16     	; 0x4da <startApp+0x28>
		{
			/* change the current mode to pedestrian mode */
			currentMode = ped ;
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <currentMode>
			TRAFFIC_LIGHT_Drive(&Traffic_light,OFF) ;
 4d0:	63 e0       	ldi	r22, 0x03	; 3
 4d2:	83 e6       	ldi	r24, 0x63	; 99
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 26 03 	call	0x64c	; 0x64c <TRAFFIC_LIGHT_Drive>

void startApp(void)
{	
	/* get the system current mode from the button */
	DoButton() ; 
	switch(currentMode)
 4da:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <currentMode>
 4de:	88 23       	and	r24, r24
 4e0:	19 f0       	breq	.+6      	; 0x4e8 <startApp+0x36>
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	21 f0       	breq	.+8      	; 0x4ee <startApp+0x3c>
 4e6:	08 95       	ret
	{
	case normal : 
		APP_normal_mode() ;
 4e8:	0e 94 58 00 	call	0xb0	; 0xb0 <APP_normal_mode>
		break;
 4ec:	08 95       	ret
	case  ped: 
		APP_pedestrian_mode() ;
 4ee:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <APP_pedestrian_mode>
 4f2:	08 95       	ret

000004f4 <Button_Init>:

#include "../../MCAL/DIO/DIO_INT.h"
#include "Button_INT.h"

void Button_Init(ST_Button_t * button)
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	ec 01       	movw	r28, r24
	DIO_setPinDirection(button->buttonPin,INPUT) ;
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	88 81       	ld	r24, Y
 4fe:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_setPinDirection>
	button->buttonPressState =NoAction ;
 502:	19 82       	std	Y+1, r1	; 0x01
	button->lastButtonState = LOW ;
 504:	1a 82       	std	Y+2, r1	; 0x02
	button-> isLongPress = 0 ;
 506:	1b 82       	std	Y+3, r1	; 0x03
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <Button_readState>:

void Button_readState(ST_Button_t * button) 
{
 50e:	cf 92       	push	r12
 510:	df 92       	push	r13
 512:	ef 92       	push	r14
 514:	ff 92       	push	r15
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	00 d0       	rcall	.+0      	; 0x520 <Button_readState+0x12>
 520:	00 d0       	rcall	.+0      	; 0x522 <Button_readState+0x14>
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	8c 01       	movw	r16, r24
	/* Time since the millis timer started */
	millis_t currentMillis = Millis_get() ;
 528:	0e 94 88 04 	call	0x910	; 0x910 <Millis_get>
 52c:	69 83       	std	Y+1, r22	; 0x01
 52e:	7a 83       	std	Y+2, r23	; 0x02
 530:	8b 83       	std	Y+3, r24	; 0x03
 532:	9c 83       	std	Y+4, r25	; 0x04
	
	button->buttonPressState =NoAction ;
 534:	f8 01       	movw	r30, r16
 536:	11 82       	std	Z+1, r1	; 0x01
	/* Check for debouncing  */
	if(currentMillis - button->lastReadingTime > successiveReadingInterval) {
 538:	89 81       	ldd	r24, Y+1	; 0x01
 53a:	9a 81       	ldd	r25, Y+2	; 0x02
 53c:	ab 81       	ldd	r26, Y+3	; 0x03
 53e:	bc 81       	ldd	r27, Y+4	; 0x04
 540:	40 85       	ldd	r20, Z+8	; 0x08
 542:	51 85       	ldd	r21, Z+9	; 0x09
 544:	62 85       	ldd	r22, Z+10	; 0x0a
 546:	73 85       	ldd	r23, Z+11	; 0x0b
 548:	84 1b       	sub	r24, r20
 54a:	95 0b       	sbc	r25, r21
 54c:	a6 0b       	sbc	r26, r22
 54e:	b7 0b       	sbc	r27, r23
 550:	c3 97       	sbiw	r24, 0x33	; 51
 552:	a1 05       	cpc	r26, r1
 554:	b1 05       	cpc	r27, r1
 556:	08 f4       	brcc	.+2      	; 0x55a <Button_readState+0x4c>
 558:	5a c0       	rjmp	.+180    	; 0x60e <Button_readState+0x100>
		
		/*get the current button reading */
		uint8_t buttonState = DIO_getPinValue(button->buttonPin);
 55a:	80 81       	ld	r24, Z
 55c:	0e 94 1a 04 	call	0x834	; 0x834 <DIO_getPinValue>

		/*if the button was pressed for the first time and the button wasn't pressed for a long time */
		if (buttonState == HIGH && button->lastButtonState  == LOW && !button->isLongPress) {
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	91 f4       	brne	.+36     	; 0x588 <Button_readState+0x7a>
 564:	f8 01       	movw	r30, r16
 566:	92 81       	ldd	r25, Z+2	; 0x02
 568:	91 11       	cpse	r25, r1
 56a:	0e c0       	rjmp	.+28     	; 0x588 <Button_readState+0x7a>
 56c:	93 81       	ldd	r25, Z+3	; 0x03
 56e:	91 11       	cpse	r25, r1
 570:	0b c0       	rjmp	.+22     	; 0x588 <Button_readState+0x7a>
			button->buttonPressTime = currentMillis;
 572:	49 81       	ldd	r20, Y+1	; 0x01
 574:	5a 81       	ldd	r21, Y+2	; 0x02
 576:	6b 81       	ldd	r22, Y+3	; 0x03
 578:	7c 81       	ldd	r23, Y+4	; 0x04
 57a:	44 83       	std	Z+4, r20	; 0x04
 57c:	55 83       	std	Z+5, r21	; 0x05
 57e:	66 83       	std	Z+6, r22	; 0x06
 580:	77 83       	std	Z+7, r23	; 0x07
			button->lastButtonState  = HIGH;
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	92 83       	std	Z+2, r25	; 0x02
			button->buttonPressState = Pressing ;
 586:	91 83       	std	Z+1, r25	; 0x01
		}

		// get how long the button has been pressed
		button->buttonPressedTime = currentMillis - button->buttonPressTime;
 588:	49 81       	ldd	r20, Y+1	; 0x01
 58a:	5a 81       	ldd	r21, Y+2	; 0x02
 58c:	6b 81       	ldd	r22, Y+3	; 0x03
 58e:	7c 81       	ldd	r23, Y+4	; 0x04
 590:	f8 01       	movw	r30, r16
 592:	c4 80       	ldd	r12, Z+4	; 0x04
 594:	d5 80       	ldd	r13, Z+5	; 0x05
 596:	e6 80       	ldd	r14, Z+6	; 0x06
 598:	f7 80       	ldd	r15, Z+7	; 0x07
 59a:	4c 19       	sub	r20, r12
 59c:	5d 09       	sbc	r21, r13
 59e:	6e 09       	sbc	r22, r14
 5a0:	7f 09       	sbc	r23, r15
 5a2:	44 87       	std	Z+12, r20	; 0x0c
 5a4:	55 87       	std	Z+13, r21	; 0x0d
 5a6:	66 87       	std	Z+14, r22	; 0x0e
 5a8:	77 87       	std	Z+15, r23	; 0x0f

		/* if the button is pressed and button pressed time >= the long press interval (1 s) */
		if (buttonState == HIGH && !button->isLongPress && button->buttonPressedTime >= isLongPressInterval) {
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	89 f4       	brne	.+34     	; 0x5d0 <Button_readState+0xc2>
 5ae:	93 81       	ldd	r25, Z+3	; 0x03
 5b0:	91 11       	cpse	r25, r1
 5b2:	0e c0       	rjmp	.+28     	; 0x5d0 <Button_readState+0xc2>
 5b4:	44 85       	ldd	r20, Z+12	; 0x0c
 5b6:	55 85       	ldd	r21, Z+13	; 0x0d
 5b8:	66 85       	ldd	r22, Z+14	; 0x0e
 5ba:	77 85       	ldd	r23, Z+15	; 0x0f
 5bc:	48 3e       	cpi	r20, 0xE8	; 232
 5be:	53 40       	sbci	r21, 0x03	; 3
 5c0:	61 05       	cpc	r22, r1
 5c2:	71 05       	cpc	r23, r1
 5c4:	28 f0       	brcs	.+10     	; 0x5d0 <Button_readState+0xc2>
			/* set the button long press flag */
			button->isLongPress = 1;
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	f8 01       	movw	r30, r16
 5ca:	93 83       	std	Z+3, r25	; 0x03
			/* set button pressed state to be a long press*/
			button->buttonPressState = LongPress;
 5cc:	94 e0       	ldi	r25, 0x04	; 4
 5ce:	91 83       	std	Z+1, r25	; 0x01
		}
		
		/* if the button current state was low and last was high the button is released */
		if (buttonState == LOW && button->lastButtonState  == HIGH) {
 5d0:	81 11       	cpse	r24, r1
 5d2:	14 c0       	rjmp	.+40     	; 0x5fc <Button_readState+0xee>
 5d4:	f8 01       	movw	r30, r16
 5d6:	82 81       	ldd	r24, Z+2	; 0x02
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	81 f4       	brne	.+32     	; 0x5fc <Button_readState+0xee>
			
			/*rest last button state */
			button->lastButtonState  = LOW;
 5dc:	12 82       	std	Z+2, r1	; 0x02
			
			/*rest long press flag */
			button->isLongPress = 0;
 5de:	13 82       	std	Z+3, r1	; 0x03
			
			/* set button pressed state to be released */
			button->buttonPressState = Released;
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	81 83       	std	Z+1, r24	; 0x01
			/*if the button is released before the long press interval then the button press is a short press */
			if (button->buttonPressedTime < isLongPressInterval) {
 5e4:	84 85       	ldd	r24, Z+12	; 0x0c
 5e6:	95 85       	ldd	r25, Z+13	; 0x0d
 5e8:	a6 85       	ldd	r26, Z+14	; 0x0e
 5ea:	b7 85       	ldd	r27, Z+15	; 0x0f
 5ec:	88 3e       	cpi	r24, 0xE8	; 232
 5ee:	93 40       	sbci	r25, 0x03	; 3
 5f0:	a1 05       	cpc	r26, r1
 5f2:	b1 05       	cpc	r27, r1
 5f4:	18 f4       	brcc	.+6      	; 0x5fc <Button_readState+0xee>
				button->buttonPressState = ShortPress;
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	f8 01       	movw	r30, r16
 5fa:	81 83       	std	Z+1, r24	; 0x01
			}
		}
		
		/*set the last time to the current time to get to the next iteration */
		button->lastReadingTime = currentMillis;
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	9a 81       	ldd	r25, Y+2	; 0x02
 600:	ab 81       	ldd	r26, Y+3	; 0x03
 602:	bc 81       	ldd	r27, Y+4	; 0x04
 604:	f8 01       	movw	r30, r16
 606:	80 87       	std	Z+8, r24	; 0x08
 608:	91 87       	std	Z+9, r25	; 0x09
 60a:	a2 87       	std	Z+10, r26	; 0x0a
 60c:	b3 87       	std	Z+11, r27	; 0x0b
	}

}
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
 614:	0f 90       	pop	r0
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	ff 90       	pop	r15
 620:	ef 90       	pop	r14
 622:	df 90       	pop	r13
 624:	cf 90       	pop	r12
 626:	08 95       	ret

00000628 <TRAFFIC_LIGHT_Init>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_INT.h"
#include "traffic_light_INT.h"

void TRAFFIC_LIGHT_Init(ST_TrafficLight_t *traffic_light)
{
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	ec 01       	movw	r28, r24
	/* Set traffic light pins to be output */
	DIO_setPinDirection(traffic_light->GREEN_Pin,OUTPUT) ; 
 62e:	61 e0       	ldi	r22, 0x01	; 1
 630:	88 81       	ld	r24, Y
 632:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_setPinDirection>
	DIO_setPinDirection(traffic_light->YELLOW_Pin,OUTPUT) ;
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_setPinDirection>
	DIO_setPinDirection(traffic_light->RED_Pin,OUTPUT) ;
 63e:	61 e0       	ldi	r22, 0x01	; 1
 640:	8a 81       	ldd	r24, Y+2	; 0x02
 642:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_setPinDirection>
}
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <TRAFFIC_LIGHT_Drive>:

void TRAFFIC_LIGHT_Drive(ST_TrafficLight_t * trafficLight , EN_LightState_t state) 
{
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	ec 01       	movw	r28, r24
	switch(state)
 652:	61 30       	cpi	r22, 0x01	; 1
 654:	49 f0       	breq	.+18     	; 0x668 <TRAFFIC_LIGHT_Drive+0x1c>
 656:	18 f0       	brcs	.+6      	; 0x65e <TRAFFIC_LIGHT_Drive+0x12>
 658:	62 30       	cpi	r22, 0x02	; 2
 65a:	59 f0       	breq	.+22     	; 0x672 <TRAFFIC_LIGHT_Drive+0x26>
 65c:	0f c0       	rjmp	.+30     	; 0x67c <TRAFFIC_LIGHT_Drive+0x30>
	{
	case GREEN:
		/* turn only green led */
		DIO_setPinValue(trafficLight->GREEN_Pin,HIGH) ; 
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	88 81       	ld	r24, Y
 662:	0e 94 be 03 	call	0x77c	; 0x77c <DIO_setPinValue>
		
		break;
 666:	16 c0       	rjmp	.+44     	; 0x694 <TRAFFIC_LIGHT_Drive+0x48>
	case YELLOW:
		/* Toggle only yellow led */
		DIO_setPinValue(trafficLight->YELLOW_Pin,TOGGLE) ;
 668:	62 e0       	ldi	r22, 0x02	; 2
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	0e 94 be 03 	call	0x77c	; 0x77c <DIO_setPinValue>
		break;
 670:	11 c0       	rjmp	.+34     	; 0x694 <TRAFFIC_LIGHT_Drive+0x48>
	case RED:
		/* turn only red led */
		DIO_setPinValue(trafficLight->RED_Pin,HIGH) ;
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	0e 94 be 03 	call	0x77c	; 0x77c <DIO_setPinValue>
		break;
 67a:	0c c0       	rjmp	.+24     	; 0x694 <TRAFFIC_LIGHT_Drive+0x48>
	
	default:
		/* turn off all  */
		DIO_setPinValue(trafficLight->GREEN_Pin,LOW) ;
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	88 81       	ld	r24, Y
 680:	0e 94 be 03 	call	0x77c	; 0x77c <DIO_setPinValue>
		DIO_setPinValue(trafficLight->YELLOW_Pin,LOW) ;
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	0e 94 be 03 	call	0x77c	; 0x77c <DIO_setPinValue>
		DIO_setPinValue(trafficLight->RED_Pin,LOW) ;
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	0e 94 be 03 	call	0x77c	; 0x77c <DIO_setPinValue>
		break;
	}

}
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	08 95       	ret

0000069a <main>:
#include "APP/APP.h"

int main(void)
{
	/*init all modules used in app*/
	init_APP() ;
 69a:	0e 94 49 00 	call	0x92	; 0x92 <init_APP>
	
    while (1) 
    {
		/* run the app */
		startApp();
 69e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <startApp>
 6a2:	fd cf       	rjmp	.-6      	; 0x69e <main+0x4>

000006a4 <DIO_setPinDirection>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 6a4:	88 30       	cpi	r24, 0x08	; 8
 6a6:	70 f0       	brcs	.+28     	; 0x6c4 <DIO_setPinDirection+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 6a8:	28 ef       	ldi	r18, 0xF8	; 248
 6aa:	28 0f       	add	r18, r24
 6ac:	28 30       	cpi	r18, 0x08	; 8
 6ae:	58 f0       	brcs	.+22     	; 0x6c6 <DIO_setPinDirection+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 6b0:	20 ef       	ldi	r18, 0xF0	; 240
 6b2:	28 0f       	add	r18, r24
 6b4:	28 30       	cpi	r18, 0x08	; 8
 6b6:	38 f0       	brcs	.+14     	; 0x6c6 <DIO_setPinDirection+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 6b8:	28 ee       	ldi	r18, 0xE8	; 232
 6ba:	28 0f       	add	r18, r24
 6bc:	28 30       	cpi	r18, 0x08	; 8
 6be:	18 f0       	brcs	.+6      	; 0x6c6 <DIO_setPinDirection+0x22>
	return NC ; 
 6c0:	2f ef       	ldi	r18, 0xFF	; 255
 6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <DIO_setPinDirection+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 6c4:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 6c6:	88 30       	cpi	r24, 0x08	; 8
 6c8:	68 f0       	brcs	.+26     	; 0x6e4 <DIO_setPinDirection+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 6ca:	98 ef       	ldi	r25, 0xF8	; 248
 6cc:	98 0f       	add	r25, r24
 6ce:	98 30       	cpi	r25, 0x08	; 8
 6d0:	58 f0       	brcs	.+22     	; 0x6e8 <DIO_setPinDirection+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 6d2:	90 ef       	ldi	r25, 0xF0	; 240
 6d4:	98 0f       	add	r25, r24
 6d6:	98 30       	cpi	r25, 0x08	; 8
 6d8:	48 f0       	brcs	.+18     	; 0x6ec <DIO_setPinDirection+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 6da:	88 51       	subi	r24, 0x18	; 24
 6dc:	88 30       	cpi	r24, 0x08	; 8
 6de:	40 f4       	brcc	.+16     	; 0x6f0 <DIO_setPinDirection+0x4c>
 6e0:	83 e0       	ldi	r24, 0x03	; 3
 6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <DIO_setPinDirection+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <DIO_setPinDirection+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <DIO_setPinDirection+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <DIO_setPinDirection+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
{
	
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[port][1]) ;
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	fc 01       	movw	r30, r24
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	df 01       	movw	r26, r30
 6fc:	a8 0f       	add	r26, r24
 6fe:	b9 1f       	adc	r27, r25
 700:	aa 0f       	add	r26, r26
 702:	bb 1f       	adc	r27, r27
 704:	a6 58       	subi	r26, 0x86	; 134
 706:	bf 4f       	sbci	r27, 0xFF	; 255
 708:	12 96       	adiw	r26, 0x02	; 2
 70a:	0d 90       	ld	r0, X+
 70c:	bc 91       	ld	r27, X
 70e:	a0 2d       	mov	r26, r0
	/* select PORTX Register */ 
	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 710:	e8 0f       	add	r30, r24
 712:	f9 1f       	adc	r31, r25
 714:	ee 0f       	add	r30, r30
 716:	ff 1f       	adc	r31, r31
 718:	e6 58       	subi	r30, 0x86	; 134
 71a:	ff 4f       	sbci	r31, 0xFF	; 255
 71c:	01 90       	ld	r0, Z+
 71e:	f0 81       	ld	r31, Z
 720:	e0 2d       	mov	r30, r0
    switch (pinDirection)
 722:	61 30       	cpi	r22, 0x01	; 1
 724:	81 f0       	breq	.+32     	; 0x746 <DIO_setPinDirection+0xa2>
 726:	18 f0       	brcs	.+6      	; 0x72e <DIO_setPinDirection+0x8a>
 728:	62 30       	cpi	r22, 0x02	; 2
 72a:	c1 f0       	breq	.+48     	; 0x75c <DIO_setPinDirection+0xb8>
 72c:	08 95       	ret
    {
    case INPUT:
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 72e:	3c 91       	ld	r19, X
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_setPinDirection+0x96>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	2a 95       	dec	r18
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_setPinDirection+0x92>
 73e:	80 95       	com	r24
 740:	83 23       	and	r24, r19
 742:	8c 93       	st	X, r24
        break;
 744:	08 95       	ret
    case OUTPUT:
        /* set PORTX to 1 to set as output */
        setBit((*DDRX),pin) ;
 746:	3c 91       	ld	r19, X
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_setPinDirection+0xae>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	2a 95       	dec	r18
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_setPinDirection+0xaa>
 756:	83 2b       	or	r24, r19
 758:	8c 93       	st	X, r24
        break;
 75a:	08 95       	ret
    case INPUT_PULLUP:
        /* set PORTX to 1 to active the pull up resistor */
        setBit((*PORTX),pin) ;  
 75c:	30 81       	ld	r19, Z
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_setPinDirection+0xc4>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	2a 95       	dec	r18
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_setPinDirection+0xc0>
 76c:	93 2f       	mov	r25, r19
 76e:	98 2b       	or	r25, r24
 770:	90 83       	st	Z, r25
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 772:	9c 91       	ld	r25, X
 774:	80 95       	com	r24
 776:	89 23       	and	r24, r25
 778:	8c 93       	st	X, r24
 77a:	08 95       	ret

0000077c <DIO_setPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 77c:	88 30       	cpi	r24, 0x08	; 8
 77e:	70 f0       	brcs	.+28     	; 0x79c <DIO_setPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 780:	28 ef       	ldi	r18, 0xF8	; 248
 782:	28 0f       	add	r18, r24
 784:	28 30       	cpi	r18, 0x08	; 8
 786:	58 f0       	brcs	.+22     	; 0x79e <DIO_setPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 788:	20 ef       	ldi	r18, 0xF0	; 240
 78a:	28 0f       	add	r18, r24
 78c:	28 30       	cpi	r18, 0x08	; 8
 78e:	38 f0       	brcs	.+14     	; 0x79e <DIO_setPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 790:	28 ee       	ldi	r18, 0xE8	; 232
 792:	28 0f       	add	r18, r24
 794:	28 30       	cpi	r18, 0x08	; 8
 796:	18 f0       	brcs	.+6      	; 0x79e <DIO_setPinValue+0x22>
	return NC ; 
 798:	2f ef       	ldi	r18, 0xFF	; 255
 79a:	01 c0       	rjmp	.+2      	; 0x79e <DIO_setPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 79c:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 79e:	88 30       	cpi	r24, 0x08	; 8
 7a0:	68 f0       	brcs	.+26     	; 0x7bc <DIO_setPinValue+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 7a2:	98 ef       	ldi	r25, 0xF8	; 248
 7a4:	98 0f       	add	r25, r24
 7a6:	98 30       	cpi	r25, 0x08	; 8
 7a8:	58 f0       	brcs	.+22     	; 0x7c0 <DIO_setPinValue+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 7aa:	90 ef       	ldi	r25, 0xF0	; 240
 7ac:	98 0f       	add	r25, r24
 7ae:	98 30       	cpi	r25, 0x08	; 8
 7b0:	48 f0       	brcs	.+18     	; 0x7c4 <DIO_setPinValue+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 7b2:	88 51       	subi	r24, 0x18	; 24
 7b4:	88 30       	cpi	r24, 0x08	; 8
 7b6:	40 f4       	brcc	.+16     	; 0x7c8 <DIO_setPinValue+0x4c>
 7b8:	83 e0       	ldi	r24, 0x03	; 3
 7ba:	07 c0       	rjmp	.+14     	; 0x7ca <DIO_setPinValue+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <DIO_setPinValue+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <DIO_setPinValue+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <DIO_setPinValue+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 7c8:	8f ef       	ldi	r24, 0xFF	; 255
void DIO_setPinValue(EN_PinNumber_t pinNum, EN_Values_t value) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PORTX Register */
   	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	fc 01       	movw	r30, r24
 7ce:	ee 0f       	add	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	e8 0f       	add	r30, r24
 7d4:	f9 1f       	adc	r31, r25
 7d6:	ee 0f       	add	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	e6 58       	subi	r30, 0x86	; 134
 7dc:	ff 4f       	sbci	r31, 0xFF	; 255
 7de:	01 90       	ld	r0, Z+
 7e0:	f0 81       	ld	r31, Z
 7e2:	e0 2d       	mov	r30, r0
    switch (value)
 7e4:	61 30       	cpi	r22, 0x01	; 1
 7e6:	81 f0       	breq	.+32     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e8:	18 f0       	brcs	.+6      	; 0x7f0 <DIO_setPinValue+0x74>
 7ea:	62 30       	cpi	r22, 0x02	; 2
 7ec:	c1 f0       	breq	.+48     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7ee:	08 95       	ret
    {
        
    case LOW:
        /* set the selected pin to LOW */
       clearBit((*PORTX),pin) ;
 7f0:	30 81       	ld	r19, Z
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_setPinValue+0x80>
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	2a 95       	dec	r18
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_setPinValue+0x7c>
 800:	80 95       	com	r24
 802:	83 23       	and	r24, r19
 804:	80 83       	st	Z, r24
        break;    
 806:	08 95       	ret
    case HIGH:
        /* set the selected pin to HIGH */
        setBit((*PORTX),pin) ;
 808:	30 81       	ld	r19, Z
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	2a 95       	dec	r18
 816:	e2 f7       	brpl	.-8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 818:	83 2b       	or	r24, r19
 81a:	80 83       	st	Z, r24
        break;
 81c:	08 95       	ret
    case TOGGLE:
        /*TOGGLE the selected pin */
        toggleBit((*PORTX),pin) ;
 81e:	30 81       	ld	r19, Z
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	2a 95       	dec	r18
 82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	83 27       	eor	r24, r19
 830:	80 83       	st	Z, r24
 832:	08 95       	ret

00000834 <DIO_getPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 834:	88 30       	cpi	r24, 0x08	; 8
 836:	70 f0       	brcs	.+28     	; 0x854 <DIO_getPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 838:	28 ef       	ldi	r18, 0xF8	; 248
 83a:	28 0f       	add	r18, r24
 83c:	28 30       	cpi	r18, 0x08	; 8
 83e:	58 f0       	brcs	.+22     	; 0x856 <DIO_getPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 840:	20 ef       	ldi	r18, 0xF0	; 240
 842:	28 0f       	add	r18, r24
 844:	28 30       	cpi	r18, 0x08	; 8
 846:	38 f0       	brcs	.+14     	; 0x856 <DIO_getPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 848:	28 ee       	ldi	r18, 0xE8	; 232
 84a:	28 0f       	add	r18, r24
 84c:	28 30       	cpi	r18, 0x08	; 8
 84e:	18 f0       	brcs	.+6      	; 0x856 <DIO_getPinValue+0x22>
	return NC ; 
 850:	2f ef       	ldi	r18, 0xFF	; 255
 852:	01 c0       	rjmp	.+2      	; 0x856 <DIO_getPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 854:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 856:	88 30       	cpi	r24, 0x08	; 8
 858:	68 f0       	brcs	.+26     	; 0x874 <__stack+0x15>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 85a:	98 ef       	ldi	r25, 0xF8	; 248
 85c:	98 0f       	add	r25, r24
 85e:	98 30       	cpi	r25, 0x08	; 8
 860:	58 f0       	brcs	.+22     	; 0x878 <__stack+0x19>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 862:	90 ef       	ldi	r25, 0xF0	; 240
 864:	98 0f       	add	r25, r24
 866:	98 30       	cpi	r25, 0x08	; 8
 868:	48 f0       	brcs	.+18     	; 0x87c <__stack+0x1d>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 86a:	88 51       	subi	r24, 0x18	; 24
 86c:	88 30       	cpi	r24, 0x08	; 8
 86e:	40 f4       	brcc	.+16     	; 0x880 <__stack+0x21>
 870:	83 e0       	ldi	r24, 0x03	; 3
 872:	07 c0       	rjmp	.+14     	; 0x882 <__stack+0x23>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	05 c0       	rjmp	.+10     	; 0x882 <__stack+0x23>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	03 c0       	rjmp	.+6      	; 0x882 <__stack+0x23>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 87c:	82 e0       	ldi	r24, 0x02	; 2
 87e:	01 c0       	rjmp	.+2      	; 0x882 <__stack+0x23>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 880:	8f ef       	ldi	r24, 0xFF	; 255
uint8_t DIO_getPinValue(EN_PinNumber_t pinNum) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	fc 01       	movw	r30, r24
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	e8 0f       	add	r30, r24
 88c:	f9 1f       	adc	r31, r25
 88e:	ee 0f       	add	r30, r30
 890:	ff 1f       	adc	r31, r31
 892:	e6 58       	subi	r30, 0x86	; 134
 894:	ff 4f       	sbci	r31, 0xFF	; 255
 896:	04 80       	ldd	r0, Z+4	; 0x04
 898:	f5 81       	ldd	r31, Z+5	; 0x05
 89a:	e0 2d       	mov	r30, r0
   /* return pin value */
    return getBit((*PINX) ,pin);
 89c:	80 81       	ld	r24, Z
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	95 95       	asr	r25
 8a4:	87 95       	ror	r24
 8a6:	2a 95       	dec	r18
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
}
 8aa:	81 70       	andi	r24, 0x01	; 1
 8ac:	08 95       	ret

000008ae <GIE_Enable>:

#include "GIE_INT.h"
#include "GIE_REG.h"


inline void GIE_Enable(void)  {SREG |=  (1<<SREG_I) ;}
 8ae:	8f b7       	in	r24, 0x3f	; 63
 8b0:	80 68       	ori	r24, 0x80	; 128
 8b2:	8f bf       	out	0x3f, r24	; 63
 8b4:	08 95       	ret

000008b6 <GIE_Disable>:

 8b6:	8f b7       	in	r24, 0x3f	; 63
 8b8:	8f 77       	andi	r24, 0x7F	; 127
 8ba:	8f bf       	out	0x3f, r24	; 63
 8bc:	08 95       	ret

000008be <Millis_INC>:

/* each timer overflow(timer ISR) */ 
static void Millis_INC(void)
{
	/* set timer preload again */
	Timer_SetOVFRegister(Selected_Timer,131);
 8be:	63 e8       	ldi	r22, 0x83	; 131
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	0e 94 24 05 	call	0xa48	; 0xa48 <Timer_SetOVFRegister>
	/*increment the number of milliseconds passed */
	millis++ ; 	
 8c6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <millis>
 8ca:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <millis+0x1>
 8ce:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <millis+0x2>
 8d2:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <millis+0x3>
 8d6:	01 96       	adiw	r24, 0x01	; 1
 8d8:	a1 1d       	adc	r26, r1
 8da:	b1 1d       	adc	r27, r1
 8dc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <millis>
 8e0:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <millis+0x1>
 8e4:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <millis+0x2>
 8e8:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <millis+0x3>
 8ec:	08 95       	ret

000008ee <Millis_Init>:
}

void Millis_Init(void) 
{
	/* global interrupts enable*/
	GIE_Enable() ; 
 8ee:	0e 94 57 04 	call	0x8ae	; 0x8ae <GIE_Enable>
	/* set timer overflow callback (what happen when timer overflows */
	Timer_SetOVF_Callback(Selected_Timer,&Millis_INC) ; 
 8f2:	6f e5       	ldi	r22, 0x5F	; 95
 8f4:	74 e0       	ldi	r23, 0x04	; 4
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	0e 94 06 05 	call	0xa0c	; 0xa0c <Timer_SetOVF_Callback>
	
	/* set timer overflow register to  131 to achieve 1 ms in the next overflow*/
	Timer_SetOVFRegister(Selected_Timer,131) ;
 8fc:	63 e8       	ldi	r22, 0x83	; 131
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	0e 94 24 05 	call	0xa48	; 0xa48 <Timer_SetOVFRegister>
	
	/* set timer prescaller and wave mode to be normal */
	Timer_Init(Selected_Timer,prescaler8,Normal) ;
 904:	40 e0       	ldi	r20, 0x00	; 0
 906:	62 e0       	ldi	r22, 0x02	; 2
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Timer_Init>
 90e:	08 95       	ret

00000910 <Millis_get>:
}

millis_t Millis_get(void) 
{
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	00 d0       	rcall	.+0      	; 0x916 <Millis_get+0x6>
 916:	00 d0       	rcall	.+0      	; 0x918 <Millis_get+0x8>
 918:	cd b7       	in	r28, 0x3d	; 61
 91a:	de b7       	in	r29, 0x3e	; 62
	/*disable all interrupts */ 
	GIE_Disable() ; 
 91c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GIE_Disable>
	millis_t m = millis ; 
 920:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <millis>
 924:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <millis+0x1>
 928:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <millis+0x2>
 92c:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <millis+0x3>
 930:	89 83       	std	Y+1, r24	; 0x01
 932:	9a 83       	std	Y+2, r25	; 0x02
 934:	ab 83       	std	Y+3, r26	; 0x03
 936:	bc 83       	std	Y+4, r27	; 0x04
	/* global interrupts enable */
	GIE_Enable() ;
 938:	0e 94 57 04 	call	0x8ae	; 0x8ae <GIE_Enable>
	return m ;
 93c:	69 81       	ldd	r22, Y+1	; 0x01
 93e:	7a 81       	ldd	r23, Y+2	; 0x02
 940:	8b 81       	ldd	r24, Y+3	; 0x03
 942:	9c 81       	ldd	r25, Y+4	; 0x04
 944:	0f 90       	pop	r0
 946:	0f 90       	pop	r0
 948:	0f 90       	pop	r0
 94a:	0f 90       	pop	r0
 94c:	df 91       	pop	r29
 94e:	cf 91       	pop	r28
 950:	08 95       	ret

00000952 <Timer_SetPrescaller>:
	{
	case TIMER0:
		setBit(TIFR,TIFR_OCF0) ;
		break;
	case TIMER2:
		 setBit(TIFR,TIFR_OCF2) ;
 952:	88 23       	and	r24, r24
 954:	19 f0       	breq	.+6      	; 0x95c <Timer_SetPrescaller+0xa>
 956:	81 30       	cpi	r24, 0x01	; 1
 958:	41 f0       	breq	.+16     	; 0x96a <Timer_SetPrescaller+0x18>
 95a:	08 95       	ret
 95c:	83 b7       	in	r24, 0x33	; 51
 95e:	88 7f       	andi	r24, 0xF8	; 248
 960:	83 bf       	out	0x33, r24	; 51
 962:	83 b7       	in	r24, 0x33	; 51
 964:	68 2b       	or	r22, r24
 966:	63 bf       	out	0x33, r22	; 51
 968:	08 95       	ret
 96a:	85 b5       	in	r24, 0x25	; 37
 96c:	88 7f       	andi	r24, 0xF8	; 248
 96e:	68 2b       	or	r22, r24
 970:	65 bd       	out	0x25, r22	; 37
 972:	08 95       	ret

00000974 <Timer_SetWaveMode>:
 974:	88 23       	and	r24, r24
 976:	19 f0       	breq	.+6      	; 0x97e <Timer_SetWaveMode+0xa>
 978:	81 30       	cpi	r24, 0x01	; 1
 97a:	f9 f0       	breq	.+62     	; 0x9ba <Timer_SetWaveMode+0x46>
 97c:	08 95       	ret
 97e:	83 b7       	in	r24, 0x33	; 51
 980:	87 7b       	andi	r24, 0xB7	; 183
 982:	83 bf       	out	0x33, r24	; 51
 984:	83 b7       	in	r24, 0x33	; 51
 986:	a6 2f       	mov	r26, r22
 988:	a1 70       	andi	r26, 0x01	; 1
 98a:	b0 e0       	ldi	r27, 0x00	; 0
 98c:	00 24       	eor	r0, r0
 98e:	b6 95       	lsr	r27
 990:	a7 95       	ror	r26
 992:	07 94       	ror	r0
 994:	b6 95       	lsr	r27
 996:	a7 95       	ror	r26
 998:	07 94       	ror	r0
 99a:	ba 2f       	mov	r27, r26
 99c:	a0 2d       	mov	r26, r0
 99e:	61 fb       	bst	r22, 1
 9a0:	44 27       	eor	r20, r20
 9a2:	40 f9       	bld	r20, 0
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	44 0f       	add	r20, r20
 9a8:	55 1f       	adc	r21, r21
 9aa:	44 0f       	add	r20, r20
 9ac:	55 1f       	adc	r21, r21
 9ae:	44 0f       	add	r20, r20
 9b0:	55 1f       	adc	r21, r21
 9b2:	4a 2b       	or	r20, r26
 9b4:	48 2b       	or	r20, r24
 9b6:	43 bf       	out	0x33, r20	; 51
 9b8:	08 95       	ret
 9ba:	85 b5       	in	r24, 0x25	; 37
 9bc:	87 7b       	andi	r24, 0xB7	; 183
 9be:	e6 2f       	mov	r30, r22
 9c0:	e1 70       	andi	r30, 0x01	; 1
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	00 24       	eor	r0, r0
 9c6:	f6 95       	lsr	r31
 9c8:	e7 95       	ror	r30
 9ca:	07 94       	ror	r0
 9cc:	f6 95       	lsr	r31
 9ce:	e7 95       	ror	r30
 9d0:	07 94       	ror	r0
 9d2:	fe 2f       	mov	r31, r30
 9d4:	e0 2d       	mov	r30, r0
 9d6:	61 fb       	bst	r22, 1
 9d8:	22 27       	eor	r18, r18
 9da:	20 f9       	bld	r18, 0
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	22 0f       	add	r18, r18
 9e0:	33 1f       	adc	r19, r19
 9e2:	22 0f       	add	r18, r18
 9e4:	33 1f       	adc	r19, r19
 9e6:	22 0f       	add	r18, r18
 9e8:	33 1f       	adc	r19, r19
 9ea:	2e 2b       	or	r18, r30
 9ec:	28 2b       	or	r18, r24
 9ee:	25 bd       	out	0x25, r18	; 37
 9f0:	08 95       	ret

000009f2 <Timer_Init>:
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	c8 2f       	mov	r28, r24
 9f8:	d4 2f       	mov	r29, r20
 9fa:	0e 94 a9 04 	call	0x952	; 0x952 <Timer_SetPrescaller>
 9fe:	6d 2f       	mov	r22, r29
 a00:	8c 2f       	mov	r24, r28
 a02:	0e 94 ba 04 	call	0x974	; 0x974 <Timer_SetWaveMode>
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	08 95       	ret

00000a0c <Timer_SetOVF_Callback>:
 a0c:	61 15       	cp	r22, r1
 a0e:	71 05       	cpc	r23, r1
 a10:	d1 f0       	breq	.+52     	; 0xa46 <Timer_SetOVF_Callback+0x3a>
 a12:	88 23       	and	r24, r24
 a14:	19 f0       	breq	.+6      	; 0xa1c <Timer_SetOVF_Callback+0x10>
 a16:	81 30       	cpi	r24, 0x01	; 1
 a18:	61 f0       	breq	.+24     	; 0xa32 <Timer_SetOVF_Callback+0x26>
 a1a:	08 95       	ret
 a1c:	89 b7       	in	r24, 0x39	; 57
 a1e:	81 60       	ori	r24, 0x01	; 1
 a20:	89 bf       	out	0x39, r24	; 57
 a22:	89 b7       	in	r24, 0x39	; 57
 a24:	8d 7f       	andi	r24, 0xFD	; 253
 a26:	89 bf       	out	0x39, r24	; 57
 a28:	70 93 af 00 	sts	0x00AF, r23	; 0x8000af <TIMERS_NORMAL_ISR+0x1>
 a2c:	60 93 ae 00 	sts	0x00AE, r22	; 0x8000ae <TIMERS_NORMAL_ISR>
 a30:	08 95       	ret
 a32:	89 b7       	in	r24, 0x39	; 57
 a34:	80 64       	ori	r24, 0x40	; 64
 a36:	89 bf       	out	0x39, r24	; 57
 a38:	89 b7       	in	r24, 0x39	; 57
 a3a:	8f 77       	andi	r24, 0x7F	; 127
 a3c:	89 bf       	out	0x39, r24	; 57
 a3e:	70 93 b1 00 	sts	0x00B1, r23	; 0x8000b1 <TIMERS_NORMAL_ISR+0x3>
 a42:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <TIMERS_NORMAL_ISR+0x2>
 a46:	08 95       	ret

00000a48 <Timer_SetOVFRegister>:
 a48:	88 23       	and	r24, r24
 a4a:	19 f0       	breq	.+6      	; 0xa52 <Timer_SetOVFRegister+0xa>
 a4c:	81 30       	cpi	r24, 0x01	; 1
 a4e:	19 f0       	breq	.+6      	; 0xa56 <Timer_SetOVFRegister+0xe>
 a50:	08 95       	ret
 a52:	62 bf       	out	0x32, r22	; 50
 a54:	08 95       	ret
 a56:	64 bd       	out	0x24, r22	; 36
 a58:	08 95       	ret

00000a5a <__vector_11>:
}

/* Timer0 Overflow ISR */
void __vector_11 (void) __attribute__ ((signal,used)) ; 
void __vector_11 (void) 
{
 a5a:	1f 92       	push	r1
 a5c:	0f 92       	push	r0
 a5e:	0f b6       	in	r0, 0x3f	; 63
 a60:	0f 92       	push	r0
 a62:	11 24       	eor	r1, r1
 a64:	2f 93       	push	r18
 a66:	3f 93       	push	r19
 a68:	4f 93       	push	r20
 a6a:	5f 93       	push	r21
 a6c:	6f 93       	push	r22
 a6e:	7f 93       	push	r23
 a70:	8f 93       	push	r24
 a72:	9f 93       	push	r25
 a74:	af 93       	push	r26
 a76:	bf 93       	push	r27
 a78:	ef 93       	push	r30
 a7a:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[0] != ((void *)0))
 a7c:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <TIMERS_NORMAL_ISR>
 a80:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <TIMERS_NORMAL_ISR+0x1>
 a84:	30 97       	sbiw	r30, 0x00	; 0
 a86:	09 f0       	breq	.+2      	; 0xa8a <__vector_11+0x30>
    {
        TIMERS_NORMAL_ISR[0]() ;
 a88:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 a8a:	ff 91       	pop	r31
 a8c:	ef 91       	pop	r30
 a8e:	bf 91       	pop	r27
 a90:	af 91       	pop	r26
 a92:	9f 91       	pop	r25
 a94:	8f 91       	pop	r24
 a96:	7f 91       	pop	r23
 a98:	6f 91       	pop	r22
 a9a:	5f 91       	pop	r21
 a9c:	4f 91       	pop	r20
 a9e:	3f 91       	pop	r19
 aa0:	2f 91       	pop	r18
 aa2:	0f 90       	pop	r0
 aa4:	0f be       	out	0x3f, r0	; 63
 aa6:	0f 90       	pop	r0
 aa8:	1f 90       	pop	r1
 aaa:	18 95       	reti

00000aac <__vector_10>:

/* Timer0 CompareMatch ISR */
void __vector_10 (void) __attribute__ ((signal,used)) ; 
void __vector_10 (void) 
{
 aac:	1f 92       	push	r1
 aae:	0f 92       	push	r0
 ab0:	0f b6       	in	r0, 0x3f	; 63
 ab2:	0f 92       	push	r0
 ab4:	11 24       	eor	r1, r1
 ab6:	2f 93       	push	r18
 ab8:	3f 93       	push	r19
 aba:	4f 93       	push	r20
 abc:	5f 93       	push	r21
 abe:	6f 93       	push	r22
 ac0:	7f 93       	push	r23
 ac2:	8f 93       	push	r24
 ac4:	9f 93       	push	r25
 ac6:	af 93       	push	r26
 ac8:	bf 93       	push	r27
 aca:	ef 93       	push	r30
 acc:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[0] != ((void *)0))
 ace:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <TIMERS_CTC_ISR>
 ad2:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <TIMERS_CTC_ISR+0x1>
 ad6:	30 97       	sbiw	r30, 0x00	; 0
 ad8:	09 f0       	breq	.+2      	; 0xadc <__vector_10+0x30>
    {
        TIMERS_CTC_ISR[0]() ;
 ada:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 adc:	ff 91       	pop	r31
 ade:	ef 91       	pop	r30
 ae0:	bf 91       	pop	r27
 ae2:	af 91       	pop	r26
 ae4:	9f 91       	pop	r25
 ae6:	8f 91       	pop	r24
 ae8:	7f 91       	pop	r23
 aea:	6f 91       	pop	r22
 aec:	5f 91       	pop	r21
 aee:	4f 91       	pop	r20
 af0:	3f 91       	pop	r19
 af2:	2f 91       	pop	r18
 af4:	0f 90       	pop	r0
 af6:	0f be       	out	0x3f, r0	; 63
 af8:	0f 90       	pop	r0
 afa:	1f 90       	pop	r1
 afc:	18 95       	reti

00000afe <__vector_5>:

/* Timer2 Overflow ISR */
void __vector_5 (void) __attribute__ ((signal,used)) ; 
void __vector_5 (void) 
{
 afe:	1f 92       	push	r1
 b00:	0f 92       	push	r0
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	0f 92       	push	r0
 b06:	11 24       	eor	r1, r1
 b08:	2f 93       	push	r18
 b0a:	3f 93       	push	r19
 b0c:	4f 93       	push	r20
 b0e:	5f 93       	push	r21
 b10:	6f 93       	push	r22
 b12:	7f 93       	push	r23
 b14:	8f 93       	push	r24
 b16:	9f 93       	push	r25
 b18:	af 93       	push	r26
 b1a:	bf 93       	push	r27
 b1c:	ef 93       	push	r30
 b1e:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[1] != ((void *)0))
 b20:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <TIMERS_NORMAL_ISR+0x2>
 b24:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <TIMERS_NORMAL_ISR+0x3>
 b28:	30 97       	sbiw	r30, 0x00	; 0
 b2a:	09 f0       	breq	.+2      	; 0xb2e <__vector_5+0x30>
    {
        TIMERS_NORMAL_ISR[1]() ;
 b2c:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 b2e:	ff 91       	pop	r31
 b30:	ef 91       	pop	r30
 b32:	bf 91       	pop	r27
 b34:	af 91       	pop	r26
 b36:	9f 91       	pop	r25
 b38:	8f 91       	pop	r24
 b3a:	7f 91       	pop	r23
 b3c:	6f 91       	pop	r22
 b3e:	5f 91       	pop	r21
 b40:	4f 91       	pop	r20
 b42:	3f 91       	pop	r19
 b44:	2f 91       	pop	r18
 b46:	0f 90       	pop	r0
 b48:	0f be       	out	0x3f, r0	; 63
 b4a:	0f 90       	pop	r0
 b4c:	1f 90       	pop	r1
 b4e:	18 95       	reti

00000b50 <__vector_4>:

/* Timer2 CompareMatch ISR */
void __vector_4 (void) __attribute__ ((signal,used)) ; 
void __vector_4 (void) 
{
 b50:	1f 92       	push	r1
 b52:	0f 92       	push	r0
 b54:	0f b6       	in	r0, 0x3f	; 63
 b56:	0f 92       	push	r0
 b58:	11 24       	eor	r1, r1
 b5a:	2f 93       	push	r18
 b5c:	3f 93       	push	r19
 b5e:	4f 93       	push	r20
 b60:	5f 93       	push	r21
 b62:	6f 93       	push	r22
 b64:	7f 93       	push	r23
 b66:	8f 93       	push	r24
 b68:	9f 93       	push	r25
 b6a:	af 93       	push	r26
 b6c:	bf 93       	push	r27
 b6e:	ef 93       	push	r30
 b70:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[1] != ((void *)0))
 b72:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <TIMERS_CTC_ISR+0x2>
 b76:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <TIMERS_CTC_ISR+0x3>
 b7a:	30 97       	sbiw	r30, 0x00	; 0
 b7c:	09 f0       	breq	.+2      	; 0xb80 <__vector_4+0x30>
    {
        TIMERS_CTC_ISR[1]() ;
 b7e:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 b80:	ff 91       	pop	r31
 b82:	ef 91       	pop	r30
 b84:	bf 91       	pop	r27
 b86:	af 91       	pop	r26
 b88:	9f 91       	pop	r25
 b8a:	8f 91       	pop	r24
 b8c:	7f 91       	pop	r23
 b8e:	6f 91       	pop	r22
 b90:	5f 91       	pop	r21
 b92:	4f 91       	pop	r20
 b94:	3f 91       	pop	r19
 b96:	2f 91       	pop	r18
 b98:	0f 90       	pop	r0
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	0f 90       	pop	r0
 b9e:	1f 90       	pop	r1
 ba0:	18 95       	reti

00000ba2 <_exit>:
 ba2:	f8 94       	cli

00000ba4 <__stop_program>:
 ba4:	ff cf       	rjmp	.-2      	; 0xba4 <__stop_program>
