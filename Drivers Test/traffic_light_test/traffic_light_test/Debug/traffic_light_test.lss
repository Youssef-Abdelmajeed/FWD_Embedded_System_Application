
traffic_light_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000620  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000620  000006b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800078  00800078  000006cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015e0  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a70  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a53  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  0000334c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000864  00000000  00000000  000036e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c28  00000000  00000000  00003f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004b74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_4>
  14:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_10>
  2c:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 19 01 	call	0x232	; 0x232 <main>
  8a:	0c 94 0e 03 	jmp	0x61c	; 0x61c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	70 f0       	brcs	.+28     	; 0xb2 <DIO_setPinDirection+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
  96:	28 ef       	ldi	r18, 0xF8	; 248
  98:	28 0f       	add	r18, r24
  9a:	28 30       	cpi	r18, 0x08	; 8
  9c:	58 f0       	brcs	.+22     	; 0xb4 <DIO_setPinDirection+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
  9e:	20 ef       	ldi	r18, 0xF0	; 240
  a0:	28 0f       	add	r18, r24
  a2:	28 30       	cpi	r18, 0x08	; 8
  a4:	38 f0       	brcs	.+14     	; 0xb4 <DIO_setPinDirection+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
  a6:	28 ee       	ldi	r18, 0xE8	; 232
  a8:	28 0f       	add	r18, r24
  aa:	28 30       	cpi	r18, 0x08	; 8
  ac:	18 f0       	brcs	.+6      	; 0xb4 <DIO_setPinDirection+0x22>
	return NC ; 
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <DIO_setPinDirection+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
  b2:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	68 f0       	brcs	.+26     	; 0xd2 <DIO_setPinDirection+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
  b8:	98 ef       	ldi	r25, 0xF8	; 248
  ba:	98 0f       	add	r25, r24
  bc:	98 30       	cpi	r25, 0x08	; 8
  be:	58 f0       	brcs	.+22     	; 0xd6 <DIO_setPinDirection+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
  c0:	90 ef       	ldi	r25, 0xF0	; 240
  c2:	98 0f       	add	r25, r24
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	48 f0       	brcs	.+18     	; 0xda <DIO_setPinDirection+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
  c8:	88 51       	subi	r24, 0x18	; 24
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	40 f4       	brcc	.+16     	; 0xde <DIO_setPinDirection+0x4c>
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <DIO_setPinDirection+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
  de:	8f ef       	ldi	r24, 0xFF	; 255
{
	
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[port][1]) ;
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	df 01       	movw	r26, r30
  ea:	a8 0f       	add	r26, r24
  ec:	b9 1f       	adc	r27, r25
  ee:	aa 0f       	add	r26, r26
  f0:	bb 1f       	adc	r27, r27
  f2:	a0 5a       	subi	r26, 0xA0	; 160
  f4:	bf 4f       	sbci	r27, 0xFF	; 255
  f6:	12 96       	adiw	r26, 0x02	; 2
  f8:	0d 90       	ld	r0, X+
  fa:	bc 91       	ld	r27, X
  fc:	a0 2d       	mov	r26, r0
	/* select PORTX Register */ 
	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
  fe:	e8 0f       	add	r30, r24
 100:	f9 1f       	adc	r31, r25
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e0 5a       	subi	r30, 0xA0	; 160
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	01 90       	ld	r0, Z+
 10c:	f0 81       	ld	r31, Z
 10e:	e0 2d       	mov	r30, r0
    switch (pinDirection)
 110:	61 30       	cpi	r22, 0x01	; 1
 112:	81 f0       	breq	.+32     	; 0x134 <DIO_setPinDirection+0xa2>
 114:	18 f0       	brcs	.+6      	; 0x11c <DIO_setPinDirection+0x8a>
 116:	62 30       	cpi	r22, 0x02	; 2
 118:	c1 f0       	breq	.+48     	; 0x14a <DIO_setPinDirection+0xb8>
 11a:	08 95       	ret
    {
    case INPUT:
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 11c:	3c 91       	ld	r19, X
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_setPinDirection+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_setPinDirection+0x92>
 12c:	80 95       	com	r24
 12e:	83 23       	and	r24, r19
 130:	8c 93       	st	X, r24
        break;
 132:	08 95       	ret
    case OUTPUT:
        /* set PORTX to 1 to set as output */
        setBit((*DDRX),pin) ;
 134:	3c 91       	ld	r19, X
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setPinDirection+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	2a 95       	dec	r18
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setPinDirection+0xaa>
 144:	83 2b       	or	r24, r19
 146:	8c 93       	st	X, r24
        break;
 148:	08 95       	ret
    case INPUT_PULLUP:
        /* set PORTX to 1 to active the pull up resistor */
        setBit((*PORTX),pin) ;  
 14a:	30 81       	ld	r19, Z
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_setPinDirection+0xc4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_setPinDirection+0xc0>
 15a:	93 2f       	mov	r25, r19
 15c:	98 2b       	or	r25, r24
 15e:	90 83       	st	Z, r25
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 160:	9c 91       	ld	r25, X
 162:	80 95       	com	r24
 164:	89 23       	and	r24, r25
 166:	8c 93       	st	X, r24
 168:	08 95       	ret

0000016a <DIO_setPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	70 f0       	brcs	.+28     	; 0x18a <DIO_setPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 16e:	28 ef       	ldi	r18, 0xF8	; 248
 170:	28 0f       	add	r18, r24
 172:	28 30       	cpi	r18, 0x08	; 8
 174:	58 f0       	brcs	.+22     	; 0x18c <DIO_setPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 176:	20 ef       	ldi	r18, 0xF0	; 240
 178:	28 0f       	add	r18, r24
 17a:	28 30       	cpi	r18, 0x08	; 8
 17c:	38 f0       	brcs	.+14     	; 0x18c <DIO_setPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 17e:	28 ee       	ldi	r18, 0xE8	; 232
 180:	28 0f       	add	r18, r24
 182:	28 30       	cpi	r18, 0x08	; 8
 184:	18 f0       	brcs	.+6      	; 0x18c <DIO_setPinValue+0x22>
	return NC ; 
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	01 c0       	rjmp	.+2      	; 0x18c <DIO_setPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 18a:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 18c:	88 30       	cpi	r24, 0x08	; 8
 18e:	68 f0       	brcs	.+26     	; 0x1aa <DIO_setPinValue+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 190:	98 ef       	ldi	r25, 0xF8	; 248
 192:	98 0f       	add	r25, r24
 194:	98 30       	cpi	r25, 0x08	; 8
 196:	58 f0       	brcs	.+22     	; 0x1ae <DIO_setPinValue+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 198:	90 ef       	ldi	r25, 0xF0	; 240
 19a:	98 0f       	add	r25, r24
 19c:	98 30       	cpi	r25, 0x08	; 8
 19e:	48 f0       	brcs	.+18     	; 0x1b2 <DIO_setPinValue+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 1a0:	88 51       	subi	r24, 0x18	; 24
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	40 f4       	brcc	.+16     	; 0x1b6 <DIO_setPinValue+0x4c>
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <DIO_setPinValue+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <DIO_setPinValue+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <DIO_setPinValue+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <DIO_setPinValue+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
void DIO_setPinValue(EN_PinNumber_t pinNum, EN_Values_t value) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PORTX Register */
   	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e8 0f       	add	r30, r24
 1c2:	f9 1f       	adc	r31, r25
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	e0 5a       	subi	r30, 0xA0	; 160
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	01 90       	ld	r0, Z+
 1ce:	f0 81       	ld	r31, Z
 1d0:	e0 2d       	mov	r30, r0
    switch (value)
 1d2:	61 30       	cpi	r22, 0x01	; 1
 1d4:	81 f0       	breq	.+32     	; 0x1f6 <DIO_setPinValue+0x8c>
 1d6:	18 f0       	brcs	.+6      	; 0x1de <DIO_setPinValue+0x74>
 1d8:	62 30       	cpi	r22, 0x02	; 2
 1da:	c1 f0       	breq	.+48     	; 0x20c <DIO_setPinValue+0xa2>
 1dc:	08 95       	ret
    {
        
    case LOW:
        /* set the selected pin to LOW */
       clearBit((*PORTX),pin) ;
 1de:	30 81       	ld	r19, Z
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x80>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	2a 95       	dec	r18
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x7c>
 1ee:	80 95       	com	r24
 1f0:	83 23       	and	r24, r19
 1f2:	80 83       	st	Z, r24
        break;    
 1f4:	08 95       	ret
    case HIGH:
        /* set the selected pin to HIGH */
        setBit((*PORTX),pin) ;
 1f6:	30 81       	ld	r19, Z
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_setPinValue+0x98>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_setPinValue+0x94>
 206:	83 2b       	or	r24, r19
 208:	80 83       	st	Z, r24
        break;
 20a:	08 95       	ret
    case TOGGLE:
        /*TOGGLE the selected pin */
        toggleBit((*PORTX),pin) ;
 20c:	30 81       	ld	r19, Z
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_setPinValue+0xae>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_setPinValue+0xaa>
 21c:	83 27       	eor	r24, r19
 21e:	80 83       	st	Z, r24
 220:	08 95       	ret

00000222 <GIE_Enable>:

#include "GIE_INT.h"
#include "GIE_REG.h"


inline void GIE_Enable(void)  {SREG |=  (1<<SREG_I) ;}
 222:	8f b7       	in	r24, 0x3f	; 63
 224:	80 68       	ori	r24, 0x80	; 128
 226:	8f bf       	out	0x3f, r24	; 63
 228:	08 95       	ret

0000022a <GIE_Disable>:

 22a:	8f b7       	in	r24, 0x3f	; 63
 22c:	8f 77       	andi	r24, 0x7F	; 127
 22e:	8f bf       	out	0x3f, r24	; 63
 230:	08 95       	ret

00000232 <main>:
#include "DIO/DIO_INT.h"
#include "MILLIS/MILLIS_INT.h"
#include "Traffic_light/traffic_light_INT.h"

int main(void)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	2b 97       	sbiw	r28, 0x0b	; 11
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
	ST_TrafficLight_t traffic_light1 = {.GREEN_Pin=PA0, .YELLOW_Pin=PA1,.RED_Pin=PA2};
 246:	19 82       	std	Y+1, r1	; 0x01
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	8a 83       	std	Y+2, r24	; 0x02
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	8b 83       	std	Y+3, r24	; 0x03
	TRAFFIC_LIGHT_Init(&traffic_light1) ;
 250:	ce 01       	movw	r24, r28
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	0e 94 d5 02 	call	0x5aa	; 0x5aa <TRAFFIC_LIGHT_Init>
	Millis_Init();
 258:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Millis_Init>
    millis_t last_time = 0 ; 
 25c:	1c 82       	std	Y+4, r1	; 0x04
 25e:	1d 82       	std	Y+5, r1	; 0x05
 260:	1e 82       	std	Y+6, r1	; 0x06
 262:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t state = 0 ;
 264:	10 e0       	ldi	r17, 0x00	; 0
	while (1) 
    {
		millis_t current_time = Millis_get() ; 
 266:	0e 94 8c 01 	call	0x318	; 0x318 <Millis_get>
 26a:	68 87       	std	Y+8, r22	; 0x08
 26c:	79 87       	std	Y+9, r23	; 0x09
 26e:	8a 87       	std	Y+10, r24	; 0x0a
 270:	9b 87       	std	Y+11, r25	; 0x0b
		state = (state>2)? 0 : state ;
 272:	13 30       	cpi	r17, 0x03	; 3
 274:	08 f0       	brcs	.+2      	; 0x278 <main+0x46>
 276:	10 e0       	ldi	r17, 0x00	; 0
		if(current_time-last_time>=1000)	
 278:	88 85       	ldd	r24, Y+8	; 0x08
 27a:	99 85       	ldd	r25, Y+9	; 0x09
 27c:	aa 85       	ldd	r26, Y+10	; 0x0a
 27e:	bb 85       	ldd	r27, Y+11	; 0x0b
 280:	4c 81       	ldd	r20, Y+4	; 0x04
 282:	5d 81       	ldd	r21, Y+5	; 0x05
 284:	6e 81       	ldd	r22, Y+6	; 0x06
 286:	7f 81       	ldd	r23, Y+7	; 0x07
 288:	84 1b       	sub	r24, r20
 28a:	95 0b       	sbc	r25, r21
 28c:	a6 0b       	sbc	r26, r22
 28e:	b7 0b       	sbc	r27, r23
 290:	88 3e       	cpi	r24, 0xE8	; 232
 292:	93 40       	sbci	r25, 0x03	; 3
 294:	a1 05       	cpc	r26, r1
 296:	b1 05       	cpc	r27, r1
 298:	30 f3       	brcs	.-52     	; 0x266 <main+0x34>
		{
			TRAFFIC_LIGHT_Drive(&traffic_light1,OFF) ;
 29a:	63 e0       	ldi	r22, 0x03	; 3
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <TRAFFIC_LIGHT_Drive>
			TRAFFIC_LIGHT_Drive(&traffic_light1,state++) ;
 2a4:	01 e0       	ldi	r16, 0x01	; 1
 2a6:	01 0f       	add	r16, r17
 2a8:	61 2f       	mov	r22, r17
 2aa:	ce 01       	movw	r24, r28
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	0e 94 e7 02 	call	0x5ce	; 0x5ce <TRAFFIC_LIGHT_Drive>
			last_time = current_time ;
 2b2:	88 85       	ldd	r24, Y+8	; 0x08
 2b4:	99 85       	ldd	r25, Y+9	; 0x09
 2b6:	aa 85       	ldd	r26, Y+10	; 0x0a
 2b8:	bb 85       	ldd	r27, Y+11	; 0x0b
 2ba:	8c 83       	std	Y+4, r24	; 0x04
 2bc:	9d 83       	std	Y+5, r25	; 0x05
 2be:	ae 83       	std	Y+6, r26	; 0x06
 2c0:	bf 83       	std	Y+7, r27	; 0x07
		millis_t current_time = Millis_get() ; 
		state = (state>2)? 0 : state ;
		if(current_time-last_time>=1000)	
		{
			TRAFFIC_LIGHT_Drive(&traffic_light1,OFF) ;
			TRAFFIC_LIGHT_Drive(&traffic_light1,state++) ;
 2c2:	10 2f       	mov	r17, r16
 2c4:	d0 cf       	rjmp	.-96     	; 0x266 <main+0x34>

000002c6 <Millis_INC>:

/* each timer overflow(timer ISR) */ 
static void Millis_INC(void)
{
	/* set timer preload again */
	Timer_SetOVFRegister(Selected_Timer,131);
 2c6:	63 e8       	ldi	r22, 0x83	; 131
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 28 02 	call	0x450	; 0x450 <Timer_SetOVFRegister>
	/*increment the number of milliseconds passed */
	millis++ ; 	
 2ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 2d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 2d6:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__data_end+0x2>
 2da:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <__data_end+0x3>
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	a1 1d       	adc	r26, r1
 2e2:	b1 1d       	adc	r27, r1
 2e4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 2e8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 2ec:	a0 93 7a 00 	sts	0x007A, r26	; 0x80007a <__data_end+0x2>
 2f0:	b0 93 7b 00 	sts	0x007B, r27	; 0x80007b <__data_end+0x3>
 2f4:	08 95       	ret

000002f6 <Millis_Init>:
}

void Millis_Init(void) 
{
	/* global interrupts enable*/
	GIE_Enable() ; 
 2f6:	0e 94 11 01 	call	0x222	; 0x222 <GIE_Enable>
	/* set timer overflow callback (what happen when timer overflows */
	Timer_SetOVF_Callback(Selected_Timer,&Millis_INC) ; 
 2fa:	63 e6       	ldi	r22, 0x63	; 99
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 0a 02 	call	0x414	; 0x414 <Timer_SetOVF_Callback>
	
	/* set timer overflow register to  131 to achieve 1 ms in the next overflow*/
	Timer_SetOVFRegister(Selected_Timer,131) ;
 304:	63 e8       	ldi	r22, 0x83	; 131
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 28 02 	call	0x450	; 0x450 <Timer_SetOVFRegister>
	
	/* set timer prescaller and wave mode to be normal */
	Timer_Init(Selected_Timer,prescaler8,Normal) ;
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	62 e0       	ldi	r22, 0x02	; 2
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Timer_Init>
 316:	08 95       	ret

00000318 <Millis_get>:
}

millis_t Millis_get(void) 
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	00 d0       	rcall	.+0      	; 0x31e <Millis_get+0x6>
 31e:	00 d0       	rcall	.+0      	; 0x320 <Millis_get+0x8>
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
	/*disable all interrupts */ 
	GIE_Disable() ; 
 324:	0e 94 15 01 	call	0x22a	; 0x22a <GIE_Disable>
	millis_t m = millis ; 
 328:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 32c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 330:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__data_end+0x2>
 334:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <__data_end+0x3>
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	9a 83       	std	Y+2, r25	; 0x02
 33c:	ab 83       	std	Y+3, r26	; 0x03
 33e:	bc 83       	std	Y+4, r27	; 0x04
	/* global interrupts enable */
	GIE_Enable() ;
 340:	0e 94 11 01 	call	0x222	; 0x222 <GIE_Enable>
	return m ;
 344:	69 81       	ldd	r22, Y+1	; 0x01
 346:	7a 81       	ldd	r23, Y+2	; 0x02
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	9c 81       	ldd	r25, Y+4	; 0x04
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <Timer_SetPrescaller>:
	{
	case TIMER0:
		setBit(TIFR,TIFR_OCF0) ;
		break;
	case TIMER2:
		 setBit(TIFR,TIFR_OCF2) ;
 35a:	88 23       	and	r24, r24
 35c:	19 f0       	breq	.+6      	; 0x364 <Timer_SetPrescaller+0xa>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	41 f0       	breq	.+16     	; 0x372 <Timer_SetPrescaller+0x18>
 362:	08 95       	ret
 364:	83 b7       	in	r24, 0x33	; 51
 366:	88 7f       	andi	r24, 0xF8	; 248
 368:	83 bf       	out	0x33, r24	; 51
 36a:	83 b7       	in	r24, 0x33	; 51
 36c:	68 2b       	or	r22, r24
 36e:	63 bf       	out	0x33, r22	; 51
 370:	08 95       	ret
 372:	85 b5       	in	r24, 0x25	; 37
 374:	88 7f       	andi	r24, 0xF8	; 248
 376:	68 2b       	or	r22, r24
 378:	65 bd       	out	0x25, r22	; 37
 37a:	08 95       	ret

0000037c <Timer_SetWaveMode>:
 37c:	88 23       	and	r24, r24
 37e:	19 f0       	breq	.+6      	; 0x386 <Timer_SetWaveMode+0xa>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	f9 f0       	breq	.+62     	; 0x3c2 <Timer_SetWaveMode+0x46>
 384:	08 95       	ret
 386:	83 b7       	in	r24, 0x33	; 51
 388:	87 7b       	andi	r24, 0xB7	; 183
 38a:	83 bf       	out	0x33, r24	; 51
 38c:	83 b7       	in	r24, 0x33	; 51
 38e:	a6 2f       	mov	r26, r22
 390:	a1 70       	andi	r26, 0x01	; 1
 392:	b0 e0       	ldi	r27, 0x00	; 0
 394:	00 24       	eor	r0, r0
 396:	b6 95       	lsr	r27
 398:	a7 95       	ror	r26
 39a:	07 94       	ror	r0
 39c:	b6 95       	lsr	r27
 39e:	a7 95       	ror	r26
 3a0:	07 94       	ror	r0
 3a2:	ba 2f       	mov	r27, r26
 3a4:	a0 2d       	mov	r26, r0
 3a6:	61 fb       	bst	r22, 1
 3a8:	44 27       	eor	r20, r20
 3aa:	40 f9       	bld	r20, 0
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	44 0f       	add	r20, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	44 0f       	add	r20, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	4a 2b       	or	r20, r26
 3bc:	48 2b       	or	r20, r24
 3be:	43 bf       	out	0x33, r20	; 51
 3c0:	08 95       	ret
 3c2:	85 b5       	in	r24, 0x25	; 37
 3c4:	87 7b       	andi	r24, 0xB7	; 183
 3c6:	e6 2f       	mov	r30, r22
 3c8:	e1 70       	andi	r30, 0x01	; 1
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	00 24       	eor	r0, r0
 3ce:	f6 95       	lsr	r31
 3d0:	e7 95       	ror	r30
 3d2:	07 94       	ror	r0
 3d4:	f6 95       	lsr	r31
 3d6:	e7 95       	ror	r30
 3d8:	07 94       	ror	r0
 3da:	fe 2f       	mov	r31, r30
 3dc:	e0 2d       	mov	r30, r0
 3de:	61 fb       	bst	r22, 1
 3e0:	22 27       	eor	r18, r18
 3e2:	20 f9       	bld	r18, 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	22 0f       	add	r18, r18
 3ec:	33 1f       	adc	r19, r19
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	2e 2b       	or	r18, r30
 3f4:	28 2b       	or	r18, r24
 3f6:	25 bd       	out	0x25, r18	; 37
 3f8:	08 95       	ret

000003fa <Timer_Init>:
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	c8 2f       	mov	r28, r24
 400:	d4 2f       	mov	r29, r20
 402:	0e 94 ad 01 	call	0x35a	; 0x35a <Timer_SetPrescaller>
 406:	6d 2f       	mov	r22, r29
 408:	8c 2f       	mov	r24, r28
 40a:	0e 94 be 01 	call	0x37c	; 0x37c <Timer_SetWaveMode>
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <Timer_SetOVF_Callback>:
 414:	61 15       	cp	r22, r1
 416:	71 05       	cpc	r23, r1
 418:	d1 f0       	breq	.+52     	; 0x44e <Timer_SetOVF_Callback+0x3a>
 41a:	88 23       	and	r24, r24
 41c:	19 f0       	breq	.+6      	; 0x424 <Timer_SetOVF_Callback+0x10>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	61 f0       	breq	.+24     	; 0x43a <Timer_SetOVF_Callback+0x26>
 422:	08 95       	ret
 424:	89 b7       	in	r24, 0x39	; 57
 426:	81 60       	ori	r24, 0x01	; 1
 428:	89 bf       	out	0x39, r24	; 57
 42a:	89 b7       	in	r24, 0x39	; 57
 42c:	8d 7f       	andi	r24, 0xFD	; 253
 42e:	89 bf       	out	0x39, r24	; 57
 430:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <TIMERS_NORMAL_ISR+0x1>
 434:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <TIMERS_NORMAL_ISR>
 438:	08 95       	ret
 43a:	89 b7       	in	r24, 0x39	; 57
 43c:	80 64       	ori	r24, 0x40	; 64
 43e:	89 bf       	out	0x39, r24	; 57
 440:	89 b7       	in	r24, 0x39	; 57
 442:	8f 77       	andi	r24, 0x7F	; 127
 444:	89 bf       	out	0x39, r24	; 57
 446:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <TIMERS_NORMAL_ISR+0x3>
 44a:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <TIMERS_NORMAL_ISR+0x2>
 44e:	08 95       	ret

00000450 <Timer_SetOVFRegister>:
 450:	88 23       	and	r24, r24
 452:	19 f0       	breq	.+6      	; 0x45a <Timer_SetOVFRegister+0xa>
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	19 f0       	breq	.+6      	; 0x45e <Timer_SetOVFRegister+0xe>
 458:	08 95       	ret
 45a:	62 bf       	out	0x32, r22	; 50
 45c:	08 95       	ret
 45e:	64 bd       	out	0x24, r22	; 36
 460:	08 95       	ret

00000462 <__vector_11>:
}

/* Timer0 Overflow ISR */
void __vector_11 (void) __attribute__ ((signal,used)) ; 
void __vector_11 (void) 
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[0] != ((void *)0))
 484:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <TIMERS_NORMAL_ISR>
 488:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <TIMERS_NORMAL_ISR+0x1>
 48c:	30 97       	sbiw	r30, 0x00	; 0
 48e:	09 f0       	breq	.+2      	; 0x492 <__vector_11+0x30>
    {
        TIMERS_NORMAL_ISR[0]() ;
 490:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	7f 91       	pop	r23
 4a0:	6f 91       	pop	r22
 4a2:	5f 91       	pop	r21
 4a4:	4f 91       	pop	r20
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__vector_10>:

/* Timer0 CompareMatch ISR */
void __vector_10 (void) __attribute__ ((signal,used)) ; 
void __vector_10 (void) 
{
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	2f 93       	push	r18
 4c0:	3f 93       	push	r19
 4c2:	4f 93       	push	r20
 4c4:	5f 93       	push	r21
 4c6:	6f 93       	push	r22
 4c8:	7f 93       	push	r23
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	af 93       	push	r26
 4d0:	bf 93       	push	r27
 4d2:	ef 93       	push	r30
 4d4:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[0] != ((void *)0))
 4d6:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <TIMERS_CTC_ISR>
 4da:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <TIMERS_CTC_ISR+0x1>
 4de:	30 97       	sbiw	r30, 0x00	; 0
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <__vector_10+0x30>
    {
        TIMERS_CTC_ISR[0]() ;
 4e2:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 4e4:	ff 91       	pop	r31
 4e6:	ef 91       	pop	r30
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	7f 91       	pop	r23
 4f2:	6f 91       	pop	r22
 4f4:	5f 91       	pop	r21
 4f6:	4f 91       	pop	r20
 4f8:	3f 91       	pop	r19
 4fa:	2f 91       	pop	r18
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <__vector_5>:

/* Timer2 Overflow ISR */
void __vector_5 (void) __attribute__ ((signal,used)) ; 
void __vector_5 (void) 
{
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	3f 93       	push	r19
 514:	4f 93       	push	r20
 516:	5f 93       	push	r21
 518:	6f 93       	push	r22
 51a:	7f 93       	push	r23
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
 520:	af 93       	push	r26
 522:	bf 93       	push	r27
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[1] != ((void *)0))
 528:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <TIMERS_NORMAL_ISR+0x2>
 52c:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <TIMERS_NORMAL_ISR+0x3>
 530:	30 97       	sbiw	r30, 0x00	; 0
 532:	09 f0       	breq	.+2      	; 0x536 <__vector_5+0x30>
    {
        TIMERS_NORMAL_ISR[1]() ;
 534:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 536:	ff 91       	pop	r31
 538:	ef 91       	pop	r30
 53a:	bf 91       	pop	r27
 53c:	af 91       	pop	r26
 53e:	9f 91       	pop	r25
 540:	8f 91       	pop	r24
 542:	7f 91       	pop	r23
 544:	6f 91       	pop	r22
 546:	5f 91       	pop	r21
 548:	4f 91       	pop	r20
 54a:	3f 91       	pop	r19
 54c:	2f 91       	pop	r18
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_4>:

/* Timer2 CompareMatch ISR */
void __vector_4 (void) __attribute__ ((signal,used)) ; 
void __vector_4 (void) 
{
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	2f 93       	push	r18
 564:	3f 93       	push	r19
 566:	4f 93       	push	r20
 568:	5f 93       	push	r21
 56a:	6f 93       	push	r22
 56c:	7f 93       	push	r23
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
 576:	ef 93       	push	r30
 578:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[1] != ((void *)0))
 57a:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <TIMERS_CTC_ISR+0x2>
 57e:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <TIMERS_CTC_ISR+0x3>
 582:	30 97       	sbiw	r30, 0x00	; 0
 584:	09 f0       	breq	.+2      	; 0x588 <__vector_4+0x30>
    {
        TIMERS_CTC_ISR[1]() ;
 586:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	bf 91       	pop	r27
 58e:	af 91       	pop	r26
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	7f 91       	pop	r23
 596:	6f 91       	pop	r22
 598:	5f 91       	pop	r21
 59a:	4f 91       	pop	r20
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <TRAFFIC_LIGHT_Init>:
#include "../LIB/STD_TYPES.h"
#include "../DIO/DIO_INT.h"
#include "traffic_light_INT.h"

void TRAFFIC_LIGHT_Init(ST_TrafficLight_t *traffic_light)
{
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	ec 01       	movw	r28, r24
	/* Set traffic light pins to be output */
	DIO_setPinDirection(traffic_light->GREEN_Pin,OUTPUT) ; 
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	88 81       	ld	r24, Y
 5b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(traffic_light->YELLOW_Pin,OUTPUT) ;
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(traffic_light->RED_Pin,OUTPUT) ;
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
}
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <TRAFFIC_LIGHT_Drive>:

void TRAFFIC_LIGHT_Drive(ST_TrafficLight_t * trafficLight , EN_LightState_t state) 
{
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	ec 01       	movw	r28, r24
	switch(state)
 5d4:	61 30       	cpi	r22, 0x01	; 1
 5d6:	49 f0       	breq	.+18     	; 0x5ea <TRAFFIC_LIGHT_Drive+0x1c>
 5d8:	18 f0       	brcs	.+6      	; 0x5e0 <TRAFFIC_LIGHT_Drive+0x12>
 5da:	62 30       	cpi	r22, 0x02	; 2
 5dc:	59 f0       	breq	.+22     	; 0x5f4 <TRAFFIC_LIGHT_Drive+0x26>
 5de:	0f c0       	rjmp	.+30     	; 0x5fe <TRAFFIC_LIGHT_Drive+0x30>
	{
	case GREEN:
		/* turn only green led */
		DIO_setPinValue(trafficLight->GREEN_Pin,HIGH) ; 
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	88 81       	ld	r24, Y
 5e4:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
		
		break;
 5e8:	16 c0       	rjmp	.+44     	; 0x616 <TRAFFIC_LIGHT_Drive+0x48>
	case YELLOW:
		/* Toggle only yellow led */
		DIO_setPinValue(trafficLight->YELLOW_Pin,TOGGLE) ;
 5ea:	62 e0       	ldi	r22, 0x02	; 2
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
 5ee:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
		break;
 5f2:	11 c0       	rjmp	.+34     	; 0x616 <TRAFFIC_LIGHT_Drive+0x48>
	case RED:
		/* turn only red led */
		DIO_setPinValue(trafficLight->RED_Pin,HIGH) ;
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
		break;
 5fc:	0c c0       	rjmp	.+24     	; 0x616 <TRAFFIC_LIGHT_Drive+0x48>
	
	default:
		/* turn off all  */
		DIO_setPinValue(trafficLight->GREEN_Pin,LOW) ;
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	88 81       	ld	r24, Y
 602:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
		DIO_setPinValue(trafficLight->YELLOW_Pin,LOW) ;
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
		DIO_setPinValue(trafficLight->RED_Pin,LOW) ;
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
		break;
	}

}
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <_exit>:
 61c:	f8 94       	cli

0000061e <__stop_program>:
 61e:	ff cf       	rjmp	.-2      	; 0x61e <__stop_program>
