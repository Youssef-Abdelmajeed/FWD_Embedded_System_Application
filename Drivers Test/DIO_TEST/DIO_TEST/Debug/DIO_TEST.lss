
DIO_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000026c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cbb  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073e  00000000  00000000  00001097  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f7  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000539  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c4  00000000  00000000  000022dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000027a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  7a:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_setPinDirection>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	70 f0       	brcs	.+28     	; 0xa2 <DIO_setPinDirection+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
  86:	28 ef       	ldi	r18, 0xF8	; 248
  88:	28 0f       	add	r18, r24
  8a:	28 30       	cpi	r18, 0x08	; 8
  8c:	58 f0       	brcs	.+22     	; 0xa4 <DIO_setPinDirection+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
  8e:	20 ef       	ldi	r18, 0xF0	; 240
  90:	28 0f       	add	r18, r24
  92:	28 30       	cpi	r18, 0x08	; 8
  94:	38 f0       	brcs	.+14     	; 0xa4 <DIO_setPinDirection+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
  96:	28 ee       	ldi	r18, 0xE8	; 232
  98:	28 0f       	add	r18, r24
  9a:	28 30       	cpi	r18, 0x08	; 8
  9c:	18 f0       	brcs	.+6      	; 0xa4 <DIO_setPinDirection+0x22>
	return NC ; 
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <DIO_setPinDirection+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
  a2:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	68 f0       	brcs	.+26     	; 0xc2 <DIO_setPinDirection+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
  a8:	98 ef       	ldi	r25, 0xF8	; 248
  aa:	98 0f       	add	r25, r24
  ac:	98 30       	cpi	r25, 0x08	; 8
  ae:	58 f0       	brcs	.+22     	; 0xc6 <DIO_setPinDirection+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
  b0:	90 ef       	ldi	r25, 0xF0	; 240
  b2:	98 0f       	add	r25, r24
  b4:	98 30       	cpi	r25, 0x08	; 8
  b6:	48 f0       	brcs	.+18     	; 0xca <DIO_setPinDirection+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
  b8:	88 51       	subi	r24, 0x18	; 24
  ba:	88 30       	cpi	r24, 0x08	; 8
  bc:	40 f4       	brcc	.+16     	; 0xce <DIO_setPinDirection+0x4c>
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	07 c0       	rjmp	.+14     	; 0xd0 <DIO_setPinDirection+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	05 c0       	rjmp	.+10     	; 0xd0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
{
	
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[port][1]) ;
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	df 01       	movw	r26, r30
  da:	a8 0f       	add	r26, r24
  dc:	b9 1f       	adc	r27, r25
  de:	aa 0f       	add	r26, r26
  e0:	bb 1f       	adc	r27, r27
  e2:	a0 5a       	subi	r26, 0xA0	; 160
  e4:	bf 4f       	sbci	r27, 0xFF	; 255
  e6:	12 96       	adiw	r26, 0x02	; 2
  e8:	0d 90       	ld	r0, X+
  ea:	bc 91       	ld	r27, X
  ec:	a0 2d       	mov	r26, r0
	/* select PORTX Register */ 
	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
  ee:	e8 0f       	add	r30, r24
  f0:	f9 1f       	adc	r31, r25
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	01 90       	ld	r0, Z+
  fc:	f0 81       	ld	r31, Z
  fe:	e0 2d       	mov	r30, r0
    switch (pinDirection)
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	81 f0       	breq	.+32     	; 0x124 <DIO_setPinDirection+0xa2>
 104:	18 f0       	brcs	.+6      	; 0x10c <DIO_setPinDirection+0x8a>
 106:	62 30       	cpi	r22, 0x02	; 2
 108:	c1 f0       	breq	.+48     	; 0x13a <DIO_setPinDirection+0xb8>
 10a:	08 95       	ret
    {
    case INPUT:
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 10c:	3c 91       	ld	r19, X
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_setPinDirection+0x96>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	2a 95       	dec	r18
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_setPinDirection+0x92>
 11c:	80 95       	com	r24
 11e:	83 23       	and	r24, r19
 120:	8c 93       	st	X, r24
        break;
 122:	08 95       	ret
    case OUTPUT:
        /* set PORTX to 1 to set as output */
        setBit((*DDRX),pin) ;
 124:	3c 91       	ld	r19, X
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDirection+0xaa>
 134:	83 2b       	or	r24, r19
 136:	8c 93       	st	X, r24
        break;
 138:	08 95       	ret
    case INPUT_PULLUP:
        /* set PORTX to 1 to active the pull up resistor */
        setBit((*PORTX),pin) ;  
 13a:	30 81       	ld	r19, Z
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_setPinDirection+0xc4>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	2a 95       	dec	r18
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_setPinDirection+0xc0>
 14a:	93 2f       	mov	r25, r19
 14c:	98 2b       	or	r25, r24
 14e:	90 83       	st	Z, r25
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 150:	9c 91       	ld	r25, X
 152:	80 95       	com	r24
 154:	89 23       	and	r24, r25
 156:	8c 93       	st	X, r24
 158:	08 95       	ret

0000015a <DIO_setPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	70 f0       	brcs	.+28     	; 0x17a <DIO_setPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 15e:	28 ef       	ldi	r18, 0xF8	; 248
 160:	28 0f       	add	r18, r24
 162:	28 30       	cpi	r18, 0x08	; 8
 164:	58 f0       	brcs	.+22     	; 0x17c <DIO_setPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 166:	20 ef       	ldi	r18, 0xF0	; 240
 168:	28 0f       	add	r18, r24
 16a:	28 30       	cpi	r18, 0x08	; 8
 16c:	38 f0       	brcs	.+14     	; 0x17c <DIO_setPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 16e:	28 ee       	ldi	r18, 0xE8	; 232
 170:	28 0f       	add	r18, r24
 172:	28 30       	cpi	r18, 0x08	; 8
 174:	18 f0       	brcs	.+6      	; 0x17c <DIO_setPinValue+0x22>
	return NC ; 
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	01 c0       	rjmp	.+2      	; 0x17c <DIO_setPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 17a:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 17c:	88 30       	cpi	r24, 0x08	; 8
 17e:	68 f0       	brcs	.+26     	; 0x19a <DIO_setPinValue+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 180:	98 ef       	ldi	r25, 0xF8	; 248
 182:	98 0f       	add	r25, r24
 184:	98 30       	cpi	r25, 0x08	; 8
 186:	58 f0       	brcs	.+22     	; 0x19e <DIO_setPinValue+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 188:	90 ef       	ldi	r25, 0xF0	; 240
 18a:	98 0f       	add	r25, r24
 18c:	98 30       	cpi	r25, 0x08	; 8
 18e:	48 f0       	brcs	.+18     	; 0x1a2 <DIO_setPinValue+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 190:	88 51       	subi	r24, 0x18	; 24
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	40 f4       	brcc	.+16     	; 0x1a6 <DIO_setPinValue+0x4c>
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <DIO_setPinValue+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <DIO_setPinValue+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <DIO_setPinValue+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <DIO_setPinValue+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
void DIO_setPinValue(EN_PinNumber_t pinNum, EN_Values_t value) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PORTX Register */
   	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	fc 01       	movw	r30, r24
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	e8 0f       	add	r30, r24
 1b2:	f9 1f       	adc	r31, r25
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	e0 5a       	subi	r30, 0xA0	; 160
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	01 90       	ld	r0, Z+
 1be:	f0 81       	ld	r31, Z
 1c0:	e0 2d       	mov	r30, r0
    switch (value)
 1c2:	61 30       	cpi	r22, 0x01	; 1
 1c4:	81 f0       	breq	.+32     	; 0x1e6 <DIO_setPinValue+0x8c>
 1c6:	18 f0       	brcs	.+6      	; 0x1ce <DIO_setPinValue+0x74>
 1c8:	62 30       	cpi	r22, 0x02	; 2
 1ca:	c1 f0       	breq	.+48     	; 0x1fc <DIO_setPinValue+0xa2>
 1cc:	08 95       	ret
    {
        
    case LOW:
        /* set the selected pin to LOW */
       clearBit((*PORTX),pin) ;
 1ce:	30 81       	ld	r19, Z
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_setPinValue+0x80>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	2a 95       	dec	r18
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_setPinValue+0x7c>
 1de:	80 95       	com	r24
 1e0:	83 23       	and	r24, r19
 1e2:	80 83       	st	Z, r24
        break;    
 1e4:	08 95       	ret
    case HIGH:
        /* set the selected pin to HIGH */
        setBit((*PORTX),pin) ;
 1e6:	30 81       	ld	r19, Z
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_setPinValue+0x98>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_setPinValue+0x94>
 1f6:	83 2b       	or	r24, r19
 1f8:	80 83       	st	Z, r24
        break;
 1fa:	08 95       	ret
    case TOGGLE:
        /*TOGGLE the selected pin */
        toggleBit((*PORTX),pin) ;
 1fc:	30 81       	ld	r19, Z
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_setPinValue+0xae>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	2a 95       	dec	r18
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_setPinValue+0xaa>
 20c:	83 27       	eor	r24, r19
 20e:	80 83       	st	Z, r24
 210:	08 95       	ret

00000212 <DIO_setPinDirection_test>:
{
	DIO_setPortDirection(PORTA,direction) ;
	DIO_setPortDirection(PORTB,direction) ;
	DIO_setPortDirection(PORTC,direction) ;
	DIO_setPortDirection(PORTD,direction) ;
}
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	d8 2f       	mov	r29, r24
 218:	c0 e0       	ldi	r28, 0x00	; 0
 21a:	05 c0       	rjmp	.+10     	; 0x226 <DIO_setPinDirection_test+0x14>
 21c:	6d 2f       	mov	r22, r29
 21e:	8c 2f       	mov	r24, r28
 220:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 224:	cf 5f       	subi	r28, 0xFF	; 255
 226:	c0 32       	cpi	r28, 0x20	; 32
 228:	c8 f3       	brcs	.-14     	; 0x21c <DIO_setPinDirection_test+0xa>
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <DIO_setPinValue_test>:
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	d8 2f       	mov	r29, r24
 236:	c0 e0       	ldi	r28, 0x00	; 0
 238:	0b c0       	rjmp	.+22     	; 0x250 <DIO_setPinValue_test+0x20>
 23a:	6d 2f       	mov	r22, r29
 23c:	8c 2f       	mov	r24, r28
 23e:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_setPinValue>
 242:	87 ea       	ldi	r24, 0xA7	; 167
 244:	91 e6       	ldi	r25, 0x61	; 97
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <DIO_setPinValue_test+0x16>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <DIO_setPinValue_test+0x1c>
 24c:	00 00       	nop
 24e:	cf 5f       	subi	r28, 0xFF	; 255
 250:	c0 32       	cpi	r28, 0x20	; 32
 252:	98 f3       	brcs	.-26     	; 0x23a <DIO_setPinValue_test+0xa>
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <main>:

int main(void)
{
	#if debug == 1 
	//DIO_setPortDirection_test(OUTPUT) ; 
	DIO_setPinDirection_test(OUTPUT) ;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinDirection_test>
    while (1) 
    {
		DIO_setPinValue_test(TOGGLE) ;
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	0e 94 18 01 	call	0x230	; 0x230 <DIO_setPinValue_test>
 266:	fc cf       	rjmp	.-8      	; 0x260 <main+0x6>

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
